const express = require("express");
const router = express.Router();
const autenticarToken = require("../../middlewares/auth");
const db = require("../../config/database");
const jwt = require("jsonwebtoken");
const { addDays, subDays, parseISO, isEqual, isBefore, addBusinessDays } = require('date-fns');
const { consultarDCTFWeb } = require("../../services/gestao/dctfwebService"); // Importa a fun√ß√£o que j√° existe
const { verificarPermissao } = require("../../middlewares/permissao");
const multer = require("multer");
const xlsx = require("xlsx");
const fs = require("fs");

// Configura√ß√£o do multer para upload de arquivos
const upload = multer({ dest: "uploads/" });

// ================= FUN√á√ïES AUXILIARES =================

// Fun√ß√£o para converter diaSemana (nome do m√™s) para n√∫mero do m√™s
function obterMesDoDiaSemana(diaSemana) {
  if (!diaSemana) return null;
  
  const mesesMap = {
    'Janeiro': 1, 'Fevereiro': 2, 'Mar√ßo': 3, 'Marco': 3, 'Abril': 4, 'Maio': 5, 'Junho': 6,
    'Julho': 7, 'Agosto': 8, 'Setembro': 9, 'Outubro': 10, 'Novembro': 11, 'Dezembro': 12
  };
  
  return mesesMap[diaSemana] || null;
}

// Fun√ß√£o para subtrair dias (√∫teis ou corridos)
function subtrairDias(dataBase, qtd, tipo) {
  let data = new Date(dataBase);
  if (!qtd) return data;
  if (typeof tipo === 'string' && tipo.toLowerCase().includes('corrid')) {
    data.setDate(data.getDate() - qtd);
    return data;
  }
  // Dias √∫teis: subtrai pulando fim de semana
  let count = 0;
  while (count < qtd) {
    data.setDate(data.getDate() - 1);
    if (data.getDay() !== 0 && data.getDay() !== 6) {
      count++;
    }
  }
  return data;
}

// ================= A√á√ïES EM LOTE =================

// üî∂ GET /api/obrigacoes/setores - Listar setores √∫nicos das obriga√ß√µes
router.get("/setores", autenticarToken, async (req, res) => {
  try {
    const empresaId = req.usuario?.empresaId;
    if (!empresaId) {
      return res.status(400).json({ error: "Empresa ID √© obrigat√≥rio." });
    }

    const [setores] = await db.query(`
      SELECT DISTINCT d.nome as setor
      FROM obrigacoes o
      LEFT JOIN departamentos d ON o.departamentoId = d.id
      WHERE o.empresaId = ? AND d.nome IS NOT NULL
      ORDER BY d.nome ASC
    `, [empresaId]);

    const setoresList = setores.map(row => row.setor);
    res.json(setoresList);
  } catch (err) {
    console.error("Erro ao buscar setores:", err);
    res.status(500).json({ error: "Erro ao buscar setores." });
  }
});

// üî∂ ROTA EM LOTE: Buscar obriga√ß√µes base (tabela 'obrigacoes') para todos os clientes de um grupo
// Exemplo: GET /api/obrigacoes/cliente/lote?grupoId=123
  router.get('/cliente/lote', autenticarToken, async (req, res) => {
    try {
      const { grupoId, apenasSemlResponsavel = 'false' } = req.query;
      if (!grupoId) {
        return res.status(400).json({ error: 'grupoId √© obrigat√≥rio' });
      }

    // 1) Buscar todos os clientes vinculados ao grupo
    const [clientesGrupo] = await db.query(
      'SELECT clienteId FROM clientes_grupos_vinculo WHERE grupoId = ?',[grupoId]
    );
    const clienteIds = clientesGrupo.map(c => c.clienteId);
    if (clienteIds.length === 0) {
      return res.json({ resultado: [] });
    }

    // 2) Buscar respostas (particularidades) de TODOS OS clientes de uma vez
    const placeholders = clienteIds.map(() => '?').join(',');
    const [respostasRows] = await db.query(`
      SELECT cr.clienteId, r.particularidadeId
      FROM cliente_respostas cr
      JOIN enquete_respostas r ON cr.respostaId = r.id
      WHERE cr.clienteId IN (${placeholders})
    `, clienteIds);

    // 3) Buscar respons√°veis fixos (por cliente) e globais
    const [respClienteRows] = await db.query(`
      SELECT orc.obrigacaoId, orc.clienteId, u.id as usuarioId, u.nome AS responsavel_nome
      FROM obrigacoes_responsaveis_cliente orc
      JOIN usuarios u ON u.id = orc.usuarioId
      WHERE orc.clienteId IN (${placeholders})
    `, clienteIds);

    const [respGlobalRows] = await db.query(`
      SELECT orc.obrigacaoId, u.id as usuarioId, u.nome AS responsavel_nome
      FROM obrigacoes_responsaveis_cliente orc
      JOIN usuarios u ON u.id = orc.usuarioId
      WHERE orc.clienteId IS NULL
    `);

    // Mapas de respons√°veis (m√∫ltiplos)
    const respClienteArrayMap = new Map(); // key: `${clienteId}:${obrigacaoId}` -> [{usuarioId, nome}, ...]
    for (const row of respClienteRows) {
      const key = `${row.clienteId}:${row.obrigacaoId}`;
      if (!respClienteArrayMap.has(key)) respClienteArrayMap.set(key, []);
      respClienteArrayMap.get(key).push({ usuarioId: row.usuarioId, nome: row.responsavel_nome });
    }
    const respGlobalArrayMap = new Map(); // key: obrigacaoId -> [{usuarioId, nome}, ...]
    for (const row of respGlobalRows) {
      if (!respGlobalArrayMap.has(row.obrigacaoId)) respGlobalArrayMap.set(row.obrigacaoId, []);
      respGlobalArrayMap.get(row.obrigacaoId).push({ usuarioId: row.usuarioId, nome: row.responsavel_nome });
    }

    // Mapa: clienteId -> [particularidadeId, ...]
    const clienteIdToParticularidades = new Map();
    for (const cid of clienteIds) clienteIdToParticularidades.set(cid, []);
    for (const row of respostasRows) {
      if (!clienteIdToParticularidades.has(row.clienteId)) {
        clienteIdToParticularidades.set(row.clienteId, []);
      }
      clienteIdToParticularidades.get(row.clienteId).push(row.particularidadeId);
    }

    // 4) Buscar TODAS as obriga√ß√µes e suas particularidades (uma vez s√≥)
    const [obrigacoesRows] = await db.query(`
      SELECT 
        o.*, 
        d.nome as departamentoNome,
        op.tipo as tipoPart,
        op.particularidadeId
      FROM obrigacoes o
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN obrigacoes_particularidades op ON op.obrigacaoId = o.id
    `);

    // Agrupar particularidades por obriga√ß√£o, como na rota individual
    const obrigacoesMap = new Map();
    for (const row of obrigacoesRows) {
      if (!obrigacoesMap.has(row.id)) {
        obrigacoesMap.set(row.id, {
          ...row,
          obrigacaoId: row.id,
          particularidadesE: [],
          particularidadesOU: [],
          particularidadesEXCETO: []
        });
      }
      const ob = obrigacoesMap.get(row.id);
      if (row.tipoPart === 'E') ob.particularidadesE.push(row.particularidadeId);
      else if (row.tipoPart === 'OU') ob.particularidadesOU.push(row.particularidadeId);
      else if (row.tipoPart === 'EXCETO') ob.particularidadesEXCETO.push(row.particularidadeId);
    }
    const obrigacoesBase = Array.from(obrigacoesMap.values());

    // 5) Para cada cliente, aplicar a mesma regra de match e anexar respons√°vel (cliente > global)
    const resultado = [];
          for (const clienteId of clienteIds) {
        const particularidadesCliente = clienteIdToParticularidades.get(clienteId) || [];
        let listaValidas = obrigacoesBase.filter(o => {
          const temTodasE = o.particularidadesE.every(p => particularidadesCliente.includes(p));
          const temAlgumaOU = o.particularidadesOU.length === 0 || o.particularidadesOU.some(p => particularidadesCliente.includes(p));
          const temAlgumExceto = o.particularidadesEXCETO.length > 0 && o.particularidadesEXCETO.some(p => particularidadesCliente.includes(p));
          return temTodasE && temAlgumaOU && !temAlgumExceto;
        }).map(o => {
          const individuais = respClienteArrayMap.get(`${clienteId}:${o.obrigacaoId}`) || [];
          const globais = respGlobalArrayMap.get(o.obrigacaoId) || [];
          const resumo = (individuais[0]?.nome) || (globais[0]?.nome) || null;
          return {
            ...o,
            responsaveisIndividuais: individuais,
            responsaveisGlobais: globais,
            responsavel_nome: resumo,
          };
        });

        // Filtrar apenas obriga√ß√µes sem respons√°veis se solicitado
        if (apenasSemlResponsavel === 'true') {
          listaValidas = listaValidas.filter(o => 
            o.responsaveisIndividuais.length === 0 && o.responsaveisGlobais.length === 0
          );
        }

        // S√≥ adicionar clientes que t√™m obriga√ß√µes ap√≥s o filtro
        if (apenasSemlResponsavel === 'true') {
          // Se o filtro est√° ativo, s√≥ incluir clientes com obriga√ß√µes pendentes
          if (listaValidas.length > 0) {
            resultado.push({ clienteId, obrigacoes: listaValidas });
          }
        } else {
          // Se o filtro n√£o est√° ativo, incluir todos os clientes
          resultado.push({ clienteId, obrigacoes: listaValidas });
        }
      }

    res.json({ resultado });
  } catch (err) {
    console.error('Erro em /api/obrigacoes/cliente/lote:', err);
    res.status(500).json({ error: 'Erro ao buscar obriga√ß√µes em lote por grupo' });
  }
});

// üî∂ GET /api/obrigacoes?empresaId=X&grupoId=Y - Buscar obriga√ß√µes por grupo
router.get("/", autenticarToken, async (req, res) => {
  try {
    const { empresaId, grupoId } = req.query;
    
    if (!empresaId) {
      return res.status(400).json({ error: "Empresa ID √© obrigat√≥rio." });
    }

    let query = `
      SELECT 
        oc.id,
        oc.nome as descricao,
        oc.status,
        d.nome as setor,
        u.nome as responsavel_nome,
        oc.clienteId,
        c.nome as cliente_nome
      FROM obrigacoes_clientes oc
      JOIN obrigacoes o ON oc.obrigacaoId = o.id
      LEFT JOIN departamentos d ON o.departamentoId = d.id
      LEFT JOIN usuarios u ON oc.responsavelId = u.id
      LEFT JOIN clientes c ON oc.clienteId = c.id
      WHERE o.empresaId = ?
    `;
    
    const params = [empresaId];

    // Se grupoId for fornecido, filtrar por grupo
    if (grupoId) {
      query += ` AND oc.clienteId IN (
        SELECT cgv.clienteId 
        FROM clientes_grupos_vinculo cgv 
        WHERE cgv.grupoId = ?
      )`;
      params.push(grupoId);
    }

    query += ` ORDER BY d.nome, oc.nome`;

    const [obrigacoes] = await db.query(query, params);
    
    res.json({ obrigacoes });
  } catch (err) {
    console.error("Erro ao buscar obriga√ß√µes:", err);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√µes." });
  }
});

// üî∂ POST /api/obrigacoes/definir-responsavel-lote - Aplicar respons√°vel em lote
router.post("/definir-responsavel-lote", autenticarToken, async (req, res) => {
  try {
    const { empresaId, grupoId, setor, responsavelId, selectedClients, selectedPairs } = req.body;
    
    if (!empresaId || !grupoId || !setor || !responsavelId) {
      return res.status(400).json({ 
        error: "Todos os campos s√£o obrigat√≥rios: empresaId, grupoId, setor, responsavelId" 
      });
    }

    // Verificar se o respons√°vel existe e pertence √† empresa
    const [responsavel] = await db.query(`
      SELECT u.id, u.nome 
      FROM usuarios u
      INNER JOIN relacao_empresas re ON u.id = re.usuarioId
      WHERE u.id = ? AND re.empresaId = ?
    `, [responsavelId, empresaId]);

    if (!responsavel.length) {
      return res.status(404).json({ error: "Respons√°vel n√£o encontrado ou n√£o pertence √† empresa." });
    }

    // Buscar obriga√ß√µes da empresa no setor especificado
    let query = `
      SELECT o.id as obrigacaoId, o.nome as obrigacaoNome, d.nome as departamentoNome
      FROM obrigacoes o
      LEFT JOIN departamentos d ON o.departamentoId = d.id
      WHERE o.empresaId = ?
    `;
    const params = [empresaId];

    // Adicionar filtro de setor se especificado
    if (setor && setor !== 'Todos') {
      query += ` AND d.nome = ?`;
      params.push(setor);
    }

    // Buscar obriga√ß√µes do setor
    const [obrigacoes] = await db.query(query, params);

    if (!obrigacoes.length) {
      return res.status(404).json({ 
        error: "Nenhuma obriga√ß√£o encontrada no setor especificado." 
      });
    }

    // Buscar clientes do grupo
    const [clientesGrupo] = await db.query(`
      SELECT cgv.clienteId 
      FROM clientes_grupos_vinculo cgv 
      WHERE cgv.grupoId = ?
    `, [grupoId]);

    if (!clientesGrupo.length) {
      return res.status(404).json({ 
        error: "Nenhum cliente encontrado no grupo especificado." 
      });
    }

    // Filtrar clientes se especificado
    const validSelectedClients = Array.isArray(selectedClients) && selectedClients.length > 0
      ? selectedClients.filter((v) => Number.isFinite(Number(v))).map((v) => Number(v))
      : [];

    let clientesAlvo = clientesGrupo.map(c => c.clienteId);
    if (validSelectedClients.length > 0) {
      clientesAlvo = clientesAlvo.filter(id => validSelectedClients.includes(id));
    }

    // Filtrar por pares espec√≠ficos se especificado
    const validSelectedPairs = Array.isArray(selectedPairs) && selectedPairs.length > 0
      ? selectedPairs
      : [];

    let paresObrigacaoCliente = [];
    
    if (validSelectedPairs.length > 0) {
      // Usar apenas os pares especificados
      for (const p of validSelectedPairs) {
        if (typeof p === 'string' && p.includes(':')) {
          const [c, o] = p.split(':');
          const cid = Number(c);
          const oid = Number(o);
          if (Number.isFinite(cid) && Number.isFinite(oid)) {
            // Verificar se a obriga√ß√£o est√° nas obriga√ß√µes encontradas
            const obrigacaoExiste = obrigacoes.find(ob => ob.obrigacaoId === oid);
            if (obrigacaoExiste && clientesAlvo.includes(cid)) {
              paresObrigacaoCliente.push({ clienteId: cid, obrigacaoId: oid });
            }
          }
        }
      }
    } else {
      // Criar combina√ß√µes de todas as obriga√ß√µes com todos os clientes
      for (const obrigacao of obrigacoes) {
        for (const clienteId of clientesAlvo) {
          paresObrigacaoCliente.push({ 
            clienteId: clienteId, 
            obrigacaoId: obrigacao.obrigacaoId 
          });
        }
      }
    }

    if (!paresObrigacaoCliente.length) {
      return res.status(404).json({ 
        error: "Nenhuma combina√ß√£o v√°lida de cliente/obriga√ß√£o encontrada." 
      });
    }

    // Debug: Log do que ser√° processado
    console.log("üîç Debug - Obriga√ß√µes encontradas:", obrigacoes.length);
    console.log("üîç Debug - Clientes alvo:", clientesAlvo.length);
    console.log("üîç Debug - Pares a processar:", paresObrigacaoCliente.length);

    // Aplicar respons√°vel em lote usando INSERT ... ON DUPLICATE KEY UPDATE
    const valuesPlaceholders = paresObrigacaoCliente.map(() => '(?, ?, ?)').join(', ');
    const values = [];
    
    for (const par of paresObrigacaoCliente) {
      values.push(par.obrigacaoId, par.clienteId, responsavelId);
    }

    await db.query(`
      INSERT INTO obrigacoes_responsaveis_cliente (obrigacaoId, clienteId, usuarioId)
      VALUES ${valuesPlaceholders}
      ON DUPLICATE KEY UPDATE usuarioId = VALUES(usuarioId)
    `, values);

    res.json({ 
      success: true, 
      message: `Respons√°vel ${responsavel[0].nome} definido para ${paresObrigacaoCliente.length} combina√ß√µes cliente/obriga√ß√£o do setor ${setor}`,
      obrigacoesAtualizadas: paresObrigacaoCliente.length,
      detalhes: {
        obrigacoes: obrigacoes.length,
        clientes: clientesAlvo.length,
        combinacoes: paresObrigacaoCliente.length
      }
    });

  } catch (err) {
    console.error("Erro ao definir respons√°vel em lote:", err);
    res.status(500).json({ error: "Erro ao definir respons√°vel em lote." });
  }
});

// üî∂ Buscar obriga√ß√µes para gerar tarefas por cliente
router.get("/para-gerar-tarefas", autenticarToken, async (req, res) => {
  const { clienteId, ano, apenasAptas, departamentoId } = req.query;



  try {
    // 1. Buscar respostas do cliente
    const [respostas] = await db.query(`
      SELECT r.particularidadeId
      FROM cliente_respostas cr
      JOIN enquete_respostas r ON cr.respostaId = r.id
      WHERE cr.clienteId = ?
    `, [clienteId]);
    const particularidadesCliente = respostas.map(r => r.particularidadeId);

    // 2. Buscar obriga√ß√µes com suas particularidades
    let query = `
      SELECT DISTINCT
        o.*, 
        d.nome as departamentoNome,
        op.tipo as tipoPart,
        op.particularidadeId,
        orc.usuarioId as responsavelId,
        u.nome as responsavelNome
      FROM obrigacoes o
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN obrigacoes_particularidades op ON op.obrigacaoId = o.id
      JOIN empresas e ON o.empresaId = e.id
      JOIN clientes c ON c.empresaId = e.id AND c.id = ?
      LEFT JOIN obrigacoes_responsaveis_cliente orc ON orc.obrigacaoId = o.id AND orc.clienteId = ?
      LEFT JOIN usuarios u ON u.id = orc.usuarioId
      WHERE c.id = ?
    `;
    
    const params = [clienteId, clienteId, clienteId];

    if (departamentoId && departamentoId !== "Todos") {
      query += " AND o.departamentoId = ?";
      params.push(parseInt(departamentoId));
    }



    const [obrigacoes] = await db.query(query, params);
    


    // 3. Agrupar particularidades por obriga√ß√£o
    const obrigacoesMap = {};

    for (const row of obrigacoes) {
      if (!obrigacoesMap[row.id]) {
        obrigacoesMap[row.id] = {
          ...row,
          obrigacaoId: row.id,
          particularidadesE: [],
          particularidadesOU: [],
          particularidadesEXCETO: []
        };
      }

      if (row.tipoPart === "E") {
        obrigacoesMap[row.id].particularidadesE.push(row.particularidadeId);
      } else if (row.tipoPart === "OU") {
        obrigacoesMap[row.id].particularidadesOU.push(row.particularidadeId);
      } else if (row.tipoPart === "EXCETO") {
        obrigacoesMap[row.id].particularidadesEXCETO.push(row.particularidadeId);
      }
    }

    // 4. Validar match para cada obriga√ß√£o
    let obrigacoesValidas = Object.values(obrigacoesMap).filter(o => {
      const temTodasE = o.particularidadesE.every(p => particularidadesCliente.includes(p));
      const temAlgumaOU = o.particularidadesOU.length === 0 || o.particularidadesOU.some(p => particularidadesCliente.includes(p));
      const temAlgumExceto = o.particularidadesEXCETO.length > 0 && o.particularidadesEXCETO.some(p => particularidadesCliente.includes(p));
      return temTodasE && temAlgumaOU && !temAlgumExceto;
    });

    // 5. Filtrar por obriga√ß√µes aptas se solicitado
    if (apenasAptas === "true") {
      const obrigacoesAptas = [];
      
      for (const obrigacao of obrigacoesValidas) {
        // Verificar se j√° existe obriga√ß√£o gerada para este cliente/ano
        const [existentes] = await db.query(`
          SELECT id FROM obrigacoes_clientes 
          WHERE clienteId = ? AND obrigacaoId = ? AND ano_referencia = ?
        `, [clienteId, obrigacao.id, ano]);
        
        if (existentes.length === 0) {
          obrigacoesAptas.push(obrigacao);
        }
      }
      
      obrigacoesValidas = obrigacoesAptas;
    }



    res.json(obrigacoesValidas);
  } catch (err) {
    console.error("Erro ao buscar obriga√ß√µes para gerar tarefas:", err);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√µes." });
  }
});

/**
 * GET /api/obrigacoes/buscar-avancada
 * Busca avan√ßada para a√ß√µes em lote
 */
router.get("/buscar-avancada", autenticarToken, async (req, res) => {
  try {
    const {
      empresaId,
      tipoTarefa,
      departamento,
      status,
      data,
      periodoInicial,
      periodoFinal,
      cliente,
      tipoUsuario,
      usuario,
      time,
      grupo,
      obrigacoes,
      responsavelExclusivo,
      frequencia,
      publicacao,
      comUltimoAndamento,
      comAtividades,
      comResponsaveis,
      comConvidados
    } = req.query;

    // NOVO: Se tipoTarefa === 'tarefas', buscar na tabela de tarefas
    if (tipoTarefa === "tarefas") {
      let whereClause = "WHERE t.empresaId = ?";
      const params = [empresaId];

      if (departamento) {
        whereClause += " AND t.departamentoId = ?";
        params.push(departamento);
      }
      if (status) {
        whereClause += " AND t.status = ?";
        params.push(status);
      }
      if (cliente) {
        whereClause += " AND t.clienteId = ?";
        params.push(cliente);
      }
      if (usuario) {
        whereClause += " AND t.responsavelId = ?";
        params.push(usuario);
      }
      if (periodoInicial && data) {
        whereClause += ` AND t.${data} >= ?`;
        params.push(periodoInicial);
      }
      if (periodoFinal && data) {
        whereClause += ` AND t.${data} <= ?`;
        params.push(periodoFinal);
      }
      // Outros filtros podem ser adicionados conforme necess√°rio

      const [tarefas] = await db.query(
        `SELECT t.*, d.nome as departamentoNome, u.nome as responsavelNome, c.nome as cliente_nome
         FROM tarefas t
         LEFT JOIN departamentos d ON t.departamentoId = d.id
         LEFT JOIN usuarios u ON t.responsavelId = u.id
         LEFT JOIN clientes c ON t.clienteId = c.id
         ${whereClause}
         ORDER BY t.dataPrazo DESC`,
        params
      );
      return res.json(tarefas);
    }

    let whereClause = "WHERE 1=1";
    const params = [];

    // Filtros b√°sicos
    if (empresaId) {
      whereClause += " AND o.empresaId = ?";
      params.push(empresaId);
    }

    if (departamento) {
      // Verificar se √© um ID num√©rico ou nome
      if (/^\d+$/.test(departamento)) {
        // √â um ID num√©rico
        whereClause += " AND d.id = ?";
        params.push(parseInt(departamento));
      } else {
        // √â um nome, fazer busca LIKE
        whereClause += " AND d.nome LIKE ?";
        params.push(`%${departamento}%`);
      }
    }

    if (status) {
      whereClause += " AND oc.status = ?";
      params.push(status);
    }

    if (cliente) {
      // Verificar se √© um ID num√©rico ou nome
      if (/^\d+$/.test(cliente)) {
        // √â um ID num√©rico
        whereClause += " AND c.id = ?";
        params.push(parseInt(cliente));
      } else {
        // √â um nome, fazer busca LIKE
        whereClause += " AND c.nome LIKE ?";
        params.push(`%${cliente}%`);
      }
    }

    if (obrigacoes) {
      // Verificar se √© um ID num√©rico ou nome
      if (/^\d+$/.test(obrigacoes)) {
        // √â um ID num√©rico
        whereClause += " AND o.id = ?";
        params.push(parseInt(obrigacoes));
      } else {
        // √â um nome, fazer busca LIKE
        whereClause += " AND o.nome LIKE ?";
        params.push(`%${obrigacoes}%`);
      }
    }

    if (frequencia) {
      whereClause += " AND o.frequencia = ?";
      params.push(frequencia);
    }

    // Filtros de data
    if (periodoInicial && data) {
      whereClause += ` AND oc.${data} >= ?`;
      params.push(periodoInicial);
    }

    if (periodoFinal && data) {
      whereClause += ` AND oc.${data} <= ?`;
      params.push(periodoFinal);
    }

    // Filtros de usu√°rio
    if (usuario) {
      whereClause += " AND oc.responsavelId = ?";
      params.push(usuario);
    }

    if (responsavelExclusivo) {
      whereClause += " AND oc.responsavelId = ?";
      params.push(responsavelExclusivo);
    }

    // Filtro por grupo de clientes
    if (grupo) {
      console.log(`üîç Aplicando filtro por grupo: ${grupo}`);
      whereClause += ` AND EXISTS (
        SELECT 1 FROM clientes_grupos_vinculo cgv 
        WHERE cgv.clienteId = c.id AND cgv.grupoId = ?
      )`;
      params.push(parseInt(grupo));
    }

    // Filtros booleanos
    if (comUltimoAndamento === "true") {
      whereClause += " AND oc.ultimoAndamento IS NOT NULL";
    }

    if (comAtividades === "true") {
      whereClause += " AND EXISTS (SELECT 1 FROM obrigacoes_atividades_clientes oac WHERE oac.obrigacaoClienteId = oc.id)";
    }

    if (comResponsaveis === "true") {
      whereClause += " AND oc.responsavelId IS NOT NULL";
    }

    if (comConvidados === "true") {
      whereClause += " AND EXISTS (SELECT 1 FROM convidados_obrigacao co WHERE co.obrigacaoClienteId = oc.id)";
    }

    const query = `
      SELECT 
        oc.id,
        oc.status,
        oc.acao,
        oc.meta,
        oc.vencimento,
        oc.dataBaixa,
        o.nome AS obrigacaoNome,
        o.frequencia,
        o.acaoQtdDias,
        o.metaQtdDias,
        o.vencimentoDia,
        d.nome AS departamentoNome,
        c.nome AS clienteNome,
        c.cnpjCpf AS clienteCnpj,
        u.nome AS responsavelNome
      FROM obrigacoes_clientes oc
      JOIN obrigacoes o ON o.id = oc.obrigacaoId
      JOIN departamentos d ON d.id = o.departamentoId
      JOIN clientes c ON c.id = oc.clienteId
      LEFT JOIN usuarios u ON u.id = oc.responsavelId
      ${whereClause}
      ORDER BY oc.vencimento ASC
    `;

    console.log(`üîç Query final: ${query}`);
    console.log(`üîç Par√¢metros: ${JSON.stringify(params)}`);

    const [rows] = await db.execute(query, params);
    res.json(rows);
  } catch (error) {
    console.error("Erro na busca avan√ßada:", error);
    res.status(500).json({ error: "Erro interno na busca avan√ßada" });
  }
});

/**
 * POST /api/obrigacoes/buscar-por-filtros
 * Busca obriga√ß√µes por filtros espec√≠ficos para prorroga√ß√£o
 * 
 * Par√¢metros esperados:
 * - competenciaInicial: { ano: number, mes: number } - Ex: { ano: 2024, mes: 1 }
 * - competenciaFinal: { ano: number, mes: number } - Ex: { ano: 2024, mes: 12 }
 */
router.post("/buscar-por-filtros", autenticarToken, async (req, res) => {
  try {
          const {
        empresaId,
        tipoTarefa,
        departamento,
        status,
        obrigacaoId,
        clienteId,
        competenciaInicial,
        competenciaFinal,
        competenciaExata
      } = req.body;

    if (!empresaId) {
      return res.status(400).json({ error: "Empresa ID √© obrigat√≥rio" });
    }

    let whereClause = "WHERE o.empresaId = ?";
    const params = [empresaId];

    // Filtro por departamento
    if (departamento) {
      whereClause += " AND d.nome = ?";
      params.push(departamento);
    }

    // Filtro por status (se aplic√°vel)
    if (status) {
      whereClause += " AND oc.status = ?";
      params.push(status);
    }

    // Filtro por obriga√ß√£o espec√≠fica
    if (obrigacaoId && obrigacaoId !== "todas") {
      whereClause += " AND o.id = ?";
      params.push(parseInt(obrigacaoId));
    }

    // Filtro por cliente
    if (clienteId) {
      whereClause += " AND c.id = ?";
      params.push(parseInt(clienteId));
    }

    // Filtro por compet√™ncia exata (mesmo m√™s e ano)
    if (competenciaExata) {
      whereClause += " AND oc.ano_referencia = ? AND oc.mes_referencia = ?";
      params.push(competenciaExata.ano, competenciaExata.mes);
    } else {
      // Filtro por compet√™ncia inicial (ano + m√™s de refer√™ncia)
      if (competenciaInicial) {
        whereClause += " AND (oc.ano_referencia > ? OR (oc.ano_referencia = ? AND oc.mes_referencia >= ?))";
        params.push(competenciaInicial.ano, competenciaInicial.ano, competenciaInicial.mes);
      }

      // Filtro por compet√™ncia final (ano + m√™s de refer√™ncia)
      if (competenciaFinal) {
        whereClause += " AND (oc.ano_referencia < ? OR (oc.ano_referencia = ? AND oc.mes_referencia <= ?))";
        params.push(competenciaFinal.ano, competenciaFinal.ano, competenciaFinal.mes);
      }
    }

    const query = `
      SELECT 
        oc.id,
        oc.status,
        oc.acao,
        oc.meta,
        oc.vencimento,
        oc.mes_referencia,
        oc.ano_referencia,
        oc.dataBaixa,
        o.id as obrigacaoId,
        o.nome as nome,
        o.frequencia,
        o.acaoQtdDias,
        o.metaQtdDias,
        o.vencimentoDia,
        o.fatoGerador,
        o.orgao,
        d.id as departamentoId,
        d.nome as departamentoNome,
        c.id as clienteId,
        c.nome as clienteNome,
        c.cnpjCpf as clienteDocumento,
        u.id as responsavelId,
        u.nome as responsavelNome
      FROM obrigacoes_clientes oc
      JOIN obrigacoes o ON o.id = oc.obrigacaoId
      JOIN departamentos d ON d.id = o.departamentoId
      JOIN clientes c ON c.id = oc.clienteId
      LEFT JOIN usuarios u ON u.id = oc.responsavelId
      ${whereClause}
      ORDER BY oc.vencimento ASC
    `;

    const [rows] = await db.execute(query, params);
    res.json(rows);
  } catch (error) {
    console.error("Erro na busca por filtros:", error);
    res.status(500).json({ error: "Erro interno na busca por filtros" });
  }
});


/**
 * GET /api/obrigacoes/variaveis-disponiveis
 * Retorna lista de vari√°veis dispon√≠veis para templates
 */
router.get('/variaveis-disponiveis', autenticarToken, async (req, res) => {
  const variaveis = {
    // Vari√°veis para o assunto (dropdown simples)
    assunto: {
      'empresa.apelido': 'Apelido da empresa',
      'cliente.apelido': 'Apelido do cliente', 
      'cliente.nome': 'Nome do cliente',
      'obrigacao.nome': 'Nome da obriga√ß√£o',
      'tarefa.competencia': 'Compet√™ncia da tarefa',
      'tarefa.vencimento': 'Vencimento da tarefa'
    },
    // Vari√°veis completas para o corpo do e-mail
    cliente: {
      'cliente.nome': 'Nome do cliente',
      'cliente.cnpjCpf': 'CNPJ/CPF do cliente',
      'cliente.email': 'E-mail do cliente',
      'cliente.telefone': 'Telefone do cliente',
      'cliente.endereco': 'Endere√ßo do cliente',
      'cliente.apelido': 'Apelido do cliente'
    },
    obrigacao: {
      'obrigacao.nome': 'Nome da obriga√ß√£o',
      'obrigacao.departamento': 'Departamento da obriga√ß√£o',
      'obrigacao.vencimento': 'Data de vencimento',
      'obrigacao.descricao': 'Descri√ß√£o da obriga√ß√£o'
    },
    tarefa: {
      'tarefa.competencia': 'Compet√™ncia da tarefa',
      'tarefa.vencimento': 'Vencimento da tarefa',
      'tarefa.descricao': 'Descri√ß√£o da tarefa'
    },
    competencia: {
      'competencia.mes': 'M√™s de refer√™ncia (ex: Janeiro)',
      'competencia.ano': 'Ano de refer√™ncia',
      'competencia.mesAno': 'M√™s/Ano (ex: JAN/2024)',
      'competencia.mesNumero': 'N√∫mero do m√™s (ex: 01)'
    },
    responsavel: {
      'responsavel.nome': 'Nome do respons√°vel',
      'responsavel.email': 'E-mail do respons√°vel',
      'responsavel.telefone': 'Telefone do respons√°vel'
    },
    datas: {
      'datas.meta': 'Data meta calculada',
      'datas.acao': 'Data a√ß√£o calculada',
      'datas.vencimento': 'Data de vencimento formatada',
      'datas.hoje': 'Data atual'
    },
    empresa: {
      'empresa.nome': 'Nome da empresa',
      'empresa.cnpj': 'CNPJ da empresa',
      'empresa.razaoSocial': 'Raz√£o social da empresa',
      'empresa.apelido': 'Apelido da empresa'
    }
  };
  
  res.json(variaveis);
});

/**
 * POST /api/obrigacoes/processar-template/:obrigacaoClienteId/:atividadeId
 * Processa template de e-mail com vari√°veis reais
 */
router.post('/processar-template/:obrigacaoClienteId/:atividadeId', autenticarToken, async (req, res) => {
  const { obrigacaoClienteId, atividadeId } = req.params;
  
  try {
    // Buscar template
    const [[template]] = await db.query(`
      SELECT * FROM obrigacoes_email_templates WHERE atividadeId = ?
    `, [atividadeId]);
    
    if (!template) {
      return res.status(404).json({ error: 'Template n√£o encontrado.' });
    }
    
    // Buscar dados da obriga√ß√£o
    const [[obrigacao]] = await db.query(`
      SELECT 
        oc.*, c.nome as clienteNome, c.cnpjCpf as clienteCnpj, c.email as clienteEmail,
        o.nome as obrigacaoNome, o.metaQtdDias, o.metaTipoDias, o.acaoQtdDias, o.acaoTipoDias,
        d.nome as departamentoNome, u.nome as responsavelNome, u.email as responsavelEmail,
        e.razaoSocial as empresaNome, e.cnpj as empresaCnpj
      FROM obrigacoes_clientes oc
      JOIN clientes c ON oc.clienteId = c.id
      JOIN obrigacoes o ON oc.obrigacaoId = o.id
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN empresas e ON c.empresaId = e.id
      LEFT JOIN usuarios u ON oc.responsavelId = u.id
      WHERE oc.id = ?
    `, [obrigacaoClienteId]);
    
    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada.' });
    }
    
    // Calcular datas
    const vencimento = new Date(obrigacao.vencimento);
    const meta = obrigacao.metaQtdDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias) : null;
    const acao = meta && obrigacao.acaoQtdDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias) : null;
    
    // ‚úÖ Mapear apenas as vari√°veis que est√£o no template
    const variaveisTemplate = template.variaveis ? JSON.parse(template.variaveis) : {};
    const variaveis = {};
    
    // Processar apenas as vari√°veis que est√£o no template
    for (const categoria in variaveisTemplate) {
      for (const variavel in variaveisTemplate[categoria]) {
        // Mapear valores reais baseado no tipo de vari√°vel
        switch (variavel) {
          case 'cliente.nome':
            variaveis[variavel] = obrigacao.clienteNome;
            break;
          case 'cliente.cnpjCpf':
            variaveis[variavel] = obrigacao.clienteCnpj;
            break;
          case 'cliente.email':
            variaveis[variavel] = obrigacao.clienteEmail;
            break;
          case 'obrigacao.nome':
            variaveis[variavel] = obrigacao.obrigacaoNome;
            break;
          case 'obrigacao.departamento':
            variaveis[variavel] = obrigacao.departamentoNome;
            break;
          case 'obrigacao.vencimento':
            variaveis[variavel] = formatarData(obrigacao.vencimento);
            break;
          case 'tarefa.competencia':
            variaveis[variavel] = `${String(obrigacao.mes_referencia).padStart(2, '0')}/${obrigacao.ano_referencia}`;
            break;
          case 'tarefa.vencimento':
            variaveis[variavel] = formatarData(obrigacao.vencimento);
            break;
          case 'competencia.mes':
            variaveis[variavel] = getMesNome(obrigacao.mes_referencia);
            break;
          case 'competencia.ano':
            variaveis[variavel] = obrigacao.ano_referencia;
            break;
          case 'competencia.mesAno':
            variaveis[variavel] = `${getMesAbrev(obrigacao.mes_referencia)}/${obrigacao.ano_referencia}`;
            break;
          case 'competencia.mesNumero':
            variaveis[variavel] = String(obrigacao.mes_referencia).padStart(2, '0');
            break;
          case 'responsavel.nome':
            variaveis[variavel] = obrigacao.responsavelNome || 'N√£o definido';
            break;
          case 'responsavel.email':
            variaveis[variavel] = obrigacao.responsavelEmail || '';
            break;
          case 'datas.meta':
            variaveis[variavel] = meta ? formatarData(meta) : 'N√£o calculada';
            break;
          case 'datas.acao':
            variaveis[variavel] = acao ? formatarData(acao) : 'N√£o calculada';
            break;
          case 'datas.vencimento':
            variaveis[variavel] = formatarData(obrigacao.vencimento);
            break;
          case 'datas.hoje':
            variaveis[variavel] = formatarData(new Date());
            break;
          case 'empresa.nome':
            variaveis[variavel] = obrigacao.empresaNome;
            break;
          case 'empresa.cnpj':
            variaveis[variavel] = obrigacao.empresaCnpj;
            break;
          case 'empresa.razaoSocial':
            variaveis[variavel] = obrigacao.empresaNome;
            break;
          default:
            // Para vari√°veis n√£o mapeadas, usar valor padr√£o
            variaveis[variavel] = `[${variavel}]`;
            break;
        }
      }
    }
    
    // Processar template
    let assuntoProcessado = template.assunto;
    let corpoProcessado = template.corpo;
    let destinatarioProcessado = template.destinatario;
    
    // ‚úÖ Log das vari√°veis que est√£o sendo processadas
    console.log('üîç Vari√°veis do template:', Object.keys(variaveisTemplate));
    console.log('üì¶ Vari√°veis mapeadas:', Object.keys(variaveis));
    
    // ‚úÖ Fun√ß√£o para substituir vari√°veis preservando formata√ß√£o HTML
    const substituirVariaveisPreservandoHTML = (html, variaveis) => {
      if (!html) return html;
      
      let resultado = html;
      
      Object.entries(variaveis).forEach(([variavel, valor]) => {
        // Regex simples que substitui a vari√°vel
        const regex = new RegExp(`\\[${variavel.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\]`, 'g');
        resultado = resultado.replace(regex, valor || '');
      });
      
      return resultado;
    };
    
    // ‚úÖ Substituir vari√°veis preservando formata√ß√£o HTML
    assuntoProcessado = substituirVariaveisPreservandoHTML(template.assunto, variaveis);
    corpoProcessado = substituirVariaveisPreservandoHTML(template.corpo, variaveis);
    destinatarioProcessado = substituirVariaveisPreservandoHTML(template.destinatario, variaveis);
    
    // ‚úÖ Log para debug da formata√ß√£o HTML
    console.log('üîç [DEBUG] Corpo original:', template.corpo?.substring(0, 200));
    console.log('üîç [DEBUG] Corpo processado:', corpoProcessado?.substring(0, 200));
    
    res.json({
      assunto: assuntoProcessado,
      corpo: corpoProcessado,
      destinatario: destinatarioProcessado,
      cc: template.cc,
      co: template.co,
      variaveis
    });
    
  } catch (err) {
    console.error('Erro ao processar template:', err);
    res.status(500).json({ error: 'Erro ao processar template.' });
  }
});

// Fun√ß√µes auxiliares para formata√ß√£o
function formatarData(data) {
  if (!data) return '';
  const d = new Date(data);
  return d.toLocaleDateString('pt-BR');
}

// ‚úÖ Fun√ß√£o para extrair vari√°veis de um texto
function extrairVariaveis(texto) {
  if (!texto) return [];
  const regex = /\[([^\]]+)\]/g;
  const variaveis = [];
  let match;
  
  while ((match = regex.exec(texto)) !== null) {
    variaveis.push(match[1]);
  }
  
  return [...new Set(variaveis)]; // Remove duplicatas
}

// ‚úÖ Fun√ß√£o para validar se uma vari√°vel existe
function validarVariavel(variavel, variaveisDisponiveis) {
  // Verifica se a vari√°vel existe em qualquer categoria
  for (const categoria in variaveisDisponiveis) {
    if (variaveisDisponiveis[categoria] && variaveisDisponiveis[categoria][variavel]) {
      return true;
    }
  }
  return false;
}

function getMesNome(mes) {
  const meses = [
    'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
  ];
  return meses[mes - 1] || '';
}

function getMesAbrev(mes) {
  const meses = [
    'JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN',
    'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'
  ];
  return meses[mes - 1] || '';
}



// Fun√ß√£o utilit√°ria para gerar data/hora do servidor (com ajuste para Bras√≠lia UTC-3)
function getDataHoraServidor() {
  const agora = new Date();
  agora.setHours(agora.getHours() - 3); // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
  const pad = n => String(n).padStart(2, "0");
  return {
    dataHora: agora.getFullYear() + "-" +
      pad(agora.getMonth() + 1) + "-" +
      pad(agora.getDate()) + " " +
      pad(agora.getHours()) + ":" +
      pad(agora.getMinutes()) + ":" +
      pad(agora.getSeconds()),
    data: agora.getFullYear() + "-" +
      pad(agora.getMonth() + 1) + "-" +
      pad(agora.getDate()),
    hora: pad(agora.getHours()) + ":" +
      pad(agora.getMinutes()) + ":" +
      pad(agora.getSeconds())
  };
}

// ‚úÖ Criar nova obriga√ß√£o
router.post("/criar", async (req, res) => {
  try {
    const {
      empresaId, departamentoId, nome, frequencia, diaSemana, acaoQtdDias, acaoTipoDias,
      metaQtdDias, metaTipoDias, vencimentoTipo, vencimentoDia, fatoGerador,
      orgao, aliasValidacao, geraMulta, usarRelatorio, reenviarEmail
    } = req.body;

    // Se o valor de 'fatoGerador' for vazio ou 0, substitua por NULL
    const fatoGeradorValue = fatoGerador === "" || fatoGerador === "0" ? null : fatoGerador;

    // Inserir no banco com o valor ajustado de fatoGerador
    const [resultado] = await db.query(`
      INSERT INTO obrigacoes (
        empresaId, departamentoId, nome, frequencia, diaSemana, acaoQtdDias, acaoTipoDias,
        metaQtdDias, metaTipoDias, vencimentoTipo, vencimentoDia, fatoGerador,
        orgao, aliasValidacao, geraMulta, usarRelatorio, reenviarEmail
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        empresaId, departamentoId, nome, frequencia, diaSemana, acaoQtdDias, acaoTipoDias,
        metaQtdDias, metaTipoDias, vencimentoTipo, vencimentoDia, fatoGeradorValue,  // Use o valor ajustado de fatoGerador
        orgao, aliasValidacao, geraMulta, usarRelatorio, reenviarEmail
      ]
    );

    res.status(201).json({ success: true, obrigacaoId: resultado.insertId });
  } catch (error) {
    console.error("Erro ao criar obriga√ß√£o:", error);
    res.status(500).json({ error: "Erro ao criar obriga√ß√£o." });
  }
});

// ‚úÖ Importar obriga√ß√µes por planilha
router.post('/importar-planilha',
  autenticarToken,
  verificarPermissao('obrigacoes.criar'),
  upload.single('file'),
  async (req, res) => {
    try {
      console.log('==== [IMPORTA√á√ÉO DE OBRIGA√á√ïES] ====');
      console.log('req.body:', req.body);
      console.log('req.file:', req.file ? req.file.originalname : null);

      if (!req.file) {
        return res.status(400).json({ error: 'Arquivo n√£o recebido.' });
      }

      // Buscar empresaId do usu√°rio autenticado
      const empresaId = req.usuario?.empresaId || req.body.empresaId;

      if (!empresaId) {
        return res.status(400).json({ error: 'empresaId n√£o fornecido.' });
      }

      const arquivo = req.file.path;

      // Ler planilha
      const wb = xlsx.readFile(arquivo);
      const planilha = wb.Sheets[wb.SheetNames[0]];
      const dados = xlsx.utils.sheet_to_json(planilha, { defval: '' });

      if (!dados.length) {
        fs.unlinkSync(arquivo);
        return res.status(400).json({ error: 'Planilha vazia ou n√£o reconhecida.' });
      }

      console.log(`üìä Total de linhas na planilha: ${dados.length}`);

      // Normalizar chaves do cabe√ßalho
      const rawKeys = Object.keys(dados[0] || {});
      const keyMap = {};
      rawKeys.forEach(orig => {
        keyMap[orig.trim().toLowerCase()] = orig;
      });

      function getField(linha, key) {
        return linha[keyMap[key]] ?? null;
      }

      // Fun√ß√£o para buscar m√∫ltiplas varia√ß√µes de nome de campo
      function getFieldMulti(linha, keys) {
        for (const key of keys) {
          const val = getField(linha, key);
          if (val) return val;
        }
        return null;
      }

      // Fun√ß√£o auxiliar para verificar similaridade de nomes (evitar duplicatas)
      function nomeSimilar(nome1, nome2) {
        if (!nome1 || !nome2) return false;
        const n1 = nome1.toLowerCase().trim().replace(/\s+/g, ' ');
        const n2 = nome2.toLowerCase().trim().replace(/\s+/g, ' ');
        return n1 === n2;
      }

      let inseridos = 0;
      let pulados = 0;
      let erros = [];

      // Buscar todos os departamentos da empresa de uma vez
      const [departamentos] = await db.query(
        'SELECT id, nome FROM departamentos WHERE empresaId = ?',
        [empresaId]
      );
      
      // Fun√ß√£o para encontrar departamento por similaridade
      function encontrarDepartamentoPorSimilaridade(nomeInput) {
        if (!nomeInput) return null;
        const nomeLower = nomeInput.toLowerCase().trim();
        
        // Mapeamento de nomes comuns para departamentos padr√£o
        const mapeamentoDepartamentos = {
          'departame': 'departamento pessoal',
          'financeiro': 'cont√°bil', // Mapear Financeiro para Cont√°bil
          'diretoria': 'cont√°bil', // Mapear Diretoria para Cont√°bil
          'cnd': 'cont√°bil', // Mapear CND para Cont√°bil
          'contabilida': 'cont√°bil', // Corrigir truncamento
          'comercial': 'comercial',
          'fiscal': 'fiscal',
          'departamento pessoal': 'departamento pessoal',
          'cont√°bil': 'cont√°bil',
          'legaliza√ß√£o': 'legaliza√ß√£o',
          'marketing': 'marketing',
          'ti': 'ti'
        };
        
        // Verificar mapeamento direto primeiro
        const nomeMapeado = mapeamentoDepartamentos[nomeLower];
        if (nomeMapeado) {
          for (const dept of departamentos) {
            if (dept.nome.toLowerCase().trim() === nomeMapeado) {
              return dept.id;
            }
          }
        }
        
        // Busca exata primeiro
        for (const dept of departamentos) {
          if (dept.nome.toLowerCase().trim() === nomeLower) {
            return dept.id;
          }
        }
        
        // Busca por inclus√£o/parcial
        for (const dept of departamentos) {
          const deptLower = dept.nome.toLowerCase().trim();
          // Se o nome do banco cont√©m o nome da planilha ou vice-versa
          if (deptLower.includes(nomeLower) || nomeLower.includes(deptLower)) {
            return dept.id;
          }
        }
        
        // Busca por similaridade (remover acentos e comparar)
        const removerAcentos = (str) => str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        const nomeInputSemAcento = removerAcentos(nomeLower);
        
        for (const dept of departamentos) {
          const deptSemAcento = removerAcentos(dept.nome.toLowerCase().trim());
          if (deptSemAcento === nomeInputSemAcento || 
              deptSemAcento.includes(nomeInputSemAcento) || 
              nomeInputSemAcento.includes(deptSemAcento)) {
            return dept.id;
          }
        }
        
        return null;
      }

      // Buscar obriga√ß√µes existentes para validar duplicatas
      const [obrigacoesExistentes] = await db.query(
        'SELECT nome FROM obrigacoes WHERE empresaId = ?',
        [empresaId]
      );
      const nomesExistentes = obrigacoesExistentes.map(o => o.nome);

      for (let idx = 0; idx < dados.length; idx++) {
        const linha = dados[idx];

        // Extrair dados da planilha
        const departamentoNome = getFieldMulti(linha, ['departamento', 'setor', 'dept']);
        const nome = getFieldMulti(linha, ['nome', 'obriga√ß√£o', 'obrigacao']);
        const frequencia = getFieldMulti(linha, ['frequ√™ncia', 'frequencia', 'periodicidade']);
        const acaoQtdDias = getFieldMulti(linha, ['a√ß√£o(qtd dias)', 'acao(qtd dias)', 'acaoqtddias', 'qtd dias acao']);
        const diaMeta = getFieldMulti(linha, ['dia meta', 'meta', 'diameta', 'meta(qtd di', 'metaqtddias', 'meta qtd dias']);
        const diaVencimento = getFieldMulti(linha, ['dia vencimento', 'vencimento', 'diavencimento']);
        const fatoGerador = getFieldMulti(linha, ['fato gerador', 'fato gerador (compet√™ncia)', 'fatogerador', 'competencia']);
        const orgao = getFieldMulti(linha, ['√≥rg√£o', 'orgao']);
        const reenvio = getFieldMulti(linha, ['re-envio', 'reenvio', 'reenviar']);

        // Log da primeira linha para debug
        if (idx === 0) {
          console.log('üîç Primeira linha extra√≠da:', {
            departamentoNome,
            nome,
            frequencia,
            acaoQtdDias,
            diaMeta,
            diaVencimento,
            fatoGerador,
            orgao,
            reenvio
          });
        }

        // Valida√ß√µes obrigat√≥rias
        if (!nome || !departamentoNome) {
          pulados++;
          erros.push(`Linha ${idx + 2}: Nome ou Departamento ausente.`);
          continue;
        }

        // Buscar departamentoId pelo nome com similaridade
        const departamentoId = encontrarDepartamentoPorSimilaridade(departamentoNome);
        if (!departamentoId) {
          pulados++;
          const deptsDisponiveis = departamentos.map(d => d.nome).join(', ');
          erros.push(`Linha ${idx + 2}: Departamento "${departamentoNome}" n√£o encontrado. Dispon√≠veis: ${deptsDisponiveis}`);
          continue;
        }

        // Verificar se j√° existe obriga√ß√£o com nome similar
        const jaExiste = nomesExistentes.some(nomeExist => nomeSimilar(nomeExist, nome));
        if (jaExiste) {
          pulados++;
          erros.push(`Linha ${idx + 2}: Obriga√ß√£o "${nome}" j√° existe (nome similar encontrado).`);
          continue;
        }

        // Processar campos opcionais
        const acaoQtdDiasNum = acaoQtdDias ? parseInt(acaoQtdDias) : null;
        const metaQtdDiasNum = diaMeta ? parseInt(diaMeta) : 0; // Valor padr√£o 0 quando null
        const vencimentoDiaNum = diaVencimento ? parseInt(diaVencimento) : null;
        const reenviarEmail = reenvio ? (reenvio.toString().toLowerCase() === 'sim' || reenvio === '1' || reenvio === 1 ? 1 : 0) : 0;

        // Valores padr√£o - sempre "Antecipar" para vencimentoTipo
        const diaSemana = null;
        const acaoTipoDias = null;  // Ignorar tipo de dias
        const metaTipoDias = null;  // Ignorar tipo de dias
        const vencimentoTipo = 'Antecipar';
        const aliasValidacao = null;
        const geraMulta = 0;
        const usarRelatorio = 0;

        try {
          // Inserir obriga√ß√£o
          await db.query(`
            INSERT INTO obrigacoes (
              empresaId, departamentoId, nome, frequencia, diaSemana, acaoQtdDias, acaoTipoDias,
              metaQtdDias, metaTipoDias, vencimentoTipo, vencimentoDia, fatoGerador,
              orgao, aliasValidacao, geraMulta, usarRelatorio, reenviarEmail
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              empresaId, departamentoId, nome, frequencia, diaSemana, acaoQtdDiasNum, acaoTipoDias,
              metaQtdDiasNum, metaTipoDias, vencimentoTipo, vencimentoDiaNum, fatoGerador,
              orgao, aliasValidacao, geraMulta, usarRelatorio, reenviarEmail
            ]
          );
          
          inseridos++;
          // Adicionar √† lista de nomes existentes para evitar duplicatas dentro da mesma importa√ß√£o
          nomesExistentes.push(nome);
        } catch (err) {
          pulados++;
          erros.push(`Linha ${idx + 2}: Erro ao inserir - ${err.message}`);
        }
      }

      // Limpar arquivo tempor√°rio
      fs.unlinkSync(arquivo);

      res.json({
        inseridos,
        pulados,
        erros: erros.length > 0 ? erros : null,
        mensagem: `Importa√ß√£o conclu√≠da: ${inseridos} obriga√ß√µes inseridas, ${pulados} puladas.`
      });

    } catch (err) {
      console.error('ERRO na importa√ß√£o de obriga√ß√µes:', err);
      if (req.file && fs.existsSync(req.file.path)) {
        fs.unlinkSync(req.file.path);
      }
      res.status(500).json({ error: 'Erro ao importar planilha', detalhes: err.message });
    }
  }
);


// üìã Listar obriga√ß√µes - todas ou filtradas por empresa
+ router.get("/empresa/:empresaId", autenticarToken, async (req, res) => {
  try {
    const { empresaId } = req.params; // Agora a empresaId vem dos par√¢metros da URL
    const { clienteId } = req.query; // Se necess√°rio filtrar por clienteId tamb√©m

    let query = `
      SELECT o.*, d.nome as departamentoNome, e.razaoSocial as empresaNome
      FROM obrigacoes o
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN empresas e ON o.empresaId = e.id
      WHERE o.empresaId = ?
    `;

    const params = [empresaId]; // A empresaId vem diretamente de req.params

    if (clienteId) {
      query += " AND o.clienteId = ?";
      params.push(clienteId); // Se voc√™ tamb√©m quiser filtrar pelo clienteId
    }

    const [dados] = await db.query(query, params);
    res.json(dados);
  } catch (error) {
    console.error("Erro ao buscar obriga√ß√µes:", error);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√µes." });
  }
});


// üîç Buscar obriga√ß√£o individual por ID
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const [dados] = await db.query(`
        SELECT o.*, d.nome as departamentoNome, e.razaoSocial as empresaNome
        FROM obrigacoes o
        JOIN departamentos d ON o.departamentoId = d.id
        JOIN empresas e ON o.empresaId = e.id
        WHERE o.id = ?`, [id]);

    if (dados.length === 0) {
      return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });
    }

    console.log("üìå Frequ√™ncia recebida:", dados[0].frequencia);


    res.json(dados[0]);
  } catch (error) {
    console.error("Erro ao buscar obriga√ß√£o:", error);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√£o." });
  }
});

// üìù Atualizar
router.put("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const campos = req.body;

    // ‚ö†Ô∏è Remove campos que n√£o existem no banco
    delete campos.departamentoNome;
    delete campos.empresaNome;
    delete campos.dataCriacao;

    await db.query(`UPDATE obrigacoes SET ? WHERE id = ?`, [campos, id]);
    res.json({ success: true });
  } catch (error) {
    console.error("Erro ao atualizar:", error);
    res.status(500).json({ error: "Erro ao atualizar obriga√ß√£o." });
  }
});


// ‚ùå Deletar
router.delete("/:id", autenticarToken, verificarPermissao('obrigacoes.excluir'), async (req, res) => {
  try {
    const { id } = req.params;
    await db.query(`DELETE FROM obrigacoes WHERE id = ?`, [id]);
    res.json({ success: true });
  } catch (error) {
    console.error("Erro ao deletar:", error);
    res.status(500).json({ error: "Erro ao deletar obriga√ß√£o." });
  }
});

/** ------------------ OBRIGA√á√ïES PARTICULARIDADES ------------------ **/

// ‚úÖ Vincular uma particularidade √† obriga√ß√£o
router.post('/:obrigacaoId/particularidades', async (req, res) => {
  const { obrigacaoId } = req.params;
  const { tipo, particularidadeId } = req.body;

  try {
    await db.query(`
            INSERT INTO obrigacoes_particularidades (obrigacaoId, tipo, particularidadeId) 
            VALUES (?, ?, ?)`,
      [obrigacaoId, tipo, particularidadeId]
    );
    res.json({ success: true });
  } catch (error) {
    console.error('Erro ao adicionar particularidade:', error);
    res.status(500).json({ error: 'Erro ao adicionar particularidade.' });
  }
});

// ‚úÖ Listar todas particularidades vinculadas a uma obriga√ß√£o
router.get('/:obrigacaoId/particularidades', async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    const [dados] = await db.query(`
            SELECT op.id, op.tipo, op.particularidadeId, p.nome, p.descricao, p.categoria 
            FROM obrigacoes_particularidades op
            JOIN particularidades p ON op.particularidadeId = p.id
            WHERE op.obrigacaoId = ?`,
      [obrigacaoId]
    );
    res.json(dados);
  } catch (error) {
    console.error('Erro ao buscar particularidades:', error);
    res.status(500).json({ error: 'Erro ao buscar particularidades.' });
  }
});

// ‚úÖ Remover v√≠nculo de particularidade
router.delete('/particularidades/:id', autenticarToken, verificarPermissao('obrigacoes.excluir'), async (req, res) => {
  const { id } = req.params;

  try {
    await db.query(`DELETE FROM obrigacoes_particularidades WHERE id = ?`, [id]);
    res.json({ success: true });
  } catch (error) {
    console.error('Erro ao remover particularidade:', error);
    res.status(500).json({ error: 'Erro ao remover particularidade.' });
  }
});

router.get("/cliente/:clienteId", async (req, res) => {
  const { clienteId } = req.params;

  try {
    // 1. Buscar respostas do cliente
    const [respostas] = await db.query(`
      SELECT r.particularidadeId
      FROM cliente_respostas cr
      JOIN enquete_respostas r ON cr.respostaId = r.id
      WHERE cr.clienteId = ?
    `, [clienteId]);
    const particularidadesCliente = respostas.map(r => r.particularidadeId);

    // 2. Buscar obriga√ß√µes com suas particularidades
    const [obrigacoes] = await db.query(`
      SELECT 
        o.*, 
        d.nome as departamentoNome,
        op.tipo as tipoPart,
        op.particularidadeId
      FROM obrigacoes o
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN obrigacoes_particularidades op ON op.obrigacaoId = o.id
    `);

    // 3. Agrupar particularidades por obriga√ß√£o
    const obrigacoesMap = {};

    for (const row of obrigacoes) {
      if (!obrigacoesMap[row.id]) {
        obrigacoesMap[row.id] = {
          ...row,
          obrigacaoId: row.id,
          particularidadesE: [],
          particularidadesOU: [],
          particularidadesEXCETO: []
        };
      }

      if (row.tipoPart === "E") {
        obrigacoesMap[row.id].particularidadesE.push(row.particularidadeId);
      } else if (row.tipoPart === "OU") {
        obrigacoesMap[row.id].particularidadesOU.push(row.particularidadeId);
      } else if (row.tipoPart === "EXCETO") {
        obrigacoesMap[row.id].particularidadesEXCETO.push(row.particularidadeId);
      }
    }

    // 4. Validar match para cada obriga√ß√£o (com debug)
    const obrigacoesValidas = Object.values(obrigacoesMap).filter(o => {
      const temTodasE = o.particularidadesE.every(p => particularidadesCliente.includes(p));
      const temAlgumaOU = o.particularidadesOU.length === 0 || o.particularidadesOU.some(p => particularidadesCliente.includes(p));
      const temAlgumExceto = o.particularidadesEXCETO.length > 0 && o.particularidadesEXCETO.some(p => particularidadesCliente.includes(p));
      // üîç LOG DE DEBUG AQUI:
      console.log({
        obrigacaoId: o.id,
        nomeObrigacao: o.nome,
        particularidadesE: o.particularidadesE,
        particularidadesOU: o.particularidadesOU,
        particularidadesEXCETO: o.particularidadesEXCETO,
        clientePossui: particularidadesCliente,
        temTodasE,
        temAlgumaOU,
        temAlgumExceto,
        vaiEntrar: temTodasE && temAlgumaOU && !temAlgumExceto
      });
      return temTodasE && temAlgumaOU && !temAlgumExceto;
    });

    res.json(obrigacoesValidas);
  } catch (err) {
    console.error("Erro ao filtrar obriga√ß√µes por cliente:", err);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√µes filtradas." });
  }
});


router.get("/cliente/:clienteId/com-departamentos", async (req, res) => {
  const { clienteId } = req.params;

  try {
    // 1. Buscar respostas do cliente
    const [respostas] = await db.query(`
      SELECT r.particularidadeId
      FROM cliente_respostas cr
      JOIN enquete_respostas r ON cr.respostaId = r.id
      WHERE cr.clienteId = ?
    `, [clienteId]);
    const particularidadesCliente = respostas.map(r => r.particularidadeId);

    // 2. Buscar departamentos da empresa
    const [departamentos] = await db.query(`
      SELECT d.* FROM departamentos d
      JOIN empresas e ON d.empresaId = e.id
      JOIN clientes c ON c.empresaId = e.id AND c.id = ?
      ORDER BY d.nome
    `, [clienteId]);

    // 3. Buscar obriga√ß√µes com suas particularidades
    const [obrigacoes] = await db.query(`
      SELECT 
        o.*, 
        d.nome as departamentoNome,
        op.tipo as tipoPart,
        op.particularidadeId
      FROM obrigacoes o
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN obrigacoes_particularidades op ON op.obrigacaoId = o.id
      JOIN empresas e ON o.empresaId = e.id
      JOIN clientes c ON c.empresaId = e.id AND c.id = ?
    `, [clienteId]);

    // 4. Agrupar particularidades por obriga√ß√£o
    const obrigacoesMap = {};

    for (const row of obrigacoes) {
      if (!obrigacoesMap[row.id]) {
        obrigacoesMap[row.id] = {
          ...row,
          obrigacaoId: row.id,
          particularidadesE: [],
          particularidadesOU: [],
          particularidadesEXCETO: []
        };
      }

      if (row.tipoPart === "E") {
        obrigacoesMap[row.id].particularidadesE.push(row.particularidadeId);
      } else if (row.tipoPart === "OU") {
        obrigacoesMap[row.id].particularidadesOU.push(row.particularidadeId);
      } else if (row.tipoPart === "EXCETO") {
        obrigacoesMap[row.id].particularidadesEXCETO.push(row.particularidadeId);
      }
    }

    // 4. Validar match para cada obriga√ß√£o (com debug)
    const obrigacoesValidas = Object.values(obrigacoesMap).filter(o => {
      const temTodasE = o.particularidadesE.every(p => particularidadesCliente.includes(p));
      const temAlgumaOU = o.particularidadesOU.length === 0 || o.particularidadesOU.some(p => particularidadesCliente.includes(p));
      const temAlgumExceto = o.particularidadesEXCETO.length > 0 && o.particularidadesEXCETO.some(p => particularidadesCliente.includes(p));
      // üîç LOG DE DEBUG AQUI:
      console.log({
        obrigacaoId: o.id,
        nomeObrigacao: o.nome,
        particularidadesE: o.particularidadesE,
        particularidadesOU: o.particularidadesOU,
        particularidadesEXCETO: o.particularidadesEXCETO,
        clientePossui: particularidadesCliente,
        temTodasE,
        temAlgumaOU,
        temAlgumExceto,
        vaiEntrar: temTodasE && temAlgumaOU && !temAlgumExceto
      });
      return temTodasE && temAlgumaOU && !temAlgumExceto;
    });


    res.json({ departamentos, obrigacoes: obrigacoesValidas });
  } catch (err) {
    console.error("Erro ao buscar obriga√ß√µes e departamentos:", err);
    res.status(500).json({ error: "Erro ao buscar dados." });
  }
});



router.get('/:id/clientes', autenticarToken, async (req, res) => {
  const { id } = req.params;

  try {
    // 1. Buscar todas particularidades da obriga√ß√£o com tipo (E, OU)
    const [particularidades] = await db.query(`
      SELECT tipo, particularidadeId
      FROM obrigacoes_particularidades
      WHERE obrigacaoId = ?
    `, [id]);

    if (particularidades.length === 0) {
      return res.json([]); // Nenhum crit√©rio vinculado
    }

    const obrigatorias = particularidades
      .filter(p => p.tipo === 'E')
      .map(p => p.particularidadeId);

    const alternativas = particularidades
      .filter(p => p.tipo === 'OU')
      .map(p => p.particularidadeId);

    // 2. Buscar todos os clientes
    const [clientes] = await db.query(`
      SELECT c.id, c.nome, c.cnpjCpf
      FROM clientes c
    `);

    // 3. Buscar todas as respostas dos clientes de uma s√≥ vez
    const [respostasClientes] = await db.query(`
      SELECT cr.clienteId, r.particularidadeId
      FROM cliente_respostas cr
      JOIN enquete_respostas r ON cr.respostaId = r.id
    `);

    // 4. Organizar respostas em um Map: clienteId => Set de particularidades
    const respostasMap = new Map();
    for (const linha of respostasClientes) {
      if (!respostasMap.has(linha.clienteId)) {
        respostasMap.set(linha.clienteId, new Set());
      }
      respostasMap.get(linha.clienteId).add(linha.particularidadeId);
    }

    // 5. Filtrar os clientes v√°lidos com base nas regras
    const clientesValidos = clientes.filter(cliente => {
      const clienteParticularidades = respostasMap.get(cliente.id) || new Set();

      const atendeObrigatorias = obrigatorias.every(p => clienteParticularidades.has(p));
      const atendeAlgumaOU = alternativas.length === 0 || alternativas.some(p => clienteParticularidades.has(p));

      return atendeObrigatorias && atendeAlgumaOU;
    });

    res.json(clientesValidos);
  } catch (err) {
    console.error("Erro ao buscar clientes da obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro interno ao buscar clientes." });
  }
});



// üìå Criar nova atividade para obriga√ß√£o
router.post("/:obrigacaoId/atividades", autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  const { tipo, texto, descricao, tipoCancelamento, ordem, pdf_layout_id, titulo_documento } = req.body;

  try {
    await db.query(
      `INSERT INTO atividades_obrigacao 
       (obrigacaoId, tipo, texto, descricao, tipoCancelamento, ordem, pdf_layout_id, titulo_documento) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        obrigacaoId, 
        tipo, 
        texto, 
        descricao, 
        tipoCancelamento || "Com justificativa", 
        ordem || 1, 
        pdf_layout_id || null,
        titulo_documento || null
      ]
    );
    res.status(201).json({ success: true });
  } catch (error) {
    console.error("Erro ao criar atividade da obriga√ß√£o:", error);
    res.status(500).json({ error: "Erro ao criar atividade." });
  }
});

// üìå Listar atividades por obriga√ß√£o
router.get("/:obrigacaoId/atividades", autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    const [atividades] = await db.query(
      `SELECT * FROM atividades_obrigacao 
       WHERE obrigacaoId = ? 
       ORDER BY ordem`,
      [obrigacaoId]
    );
    res.json(atividades);
  } catch (error) {
    console.error("Erro ao listar atividades da obriga√ß√£o:", error);
    res.status(500).json({ error: "Erro ao listar atividades." });
  }
});

// üìå Atualizar ordem
router.put("/atividades/:id/ordem", autenticarToken, async (req, res) => {
  const { id } = req.params;
  const { novaOrdem } = req.body;

  try {
    await db.query(
      `UPDATE atividades_obrigacao SET ordem = ? WHERE id = ?`,
      [novaOrdem, id]
    );
    res.json({ success: true });
  } catch (error) {
    console.error("Erro ao atualizar ordem:", error);
    res.status(500).json({ error: "Erro ao atualizar ordem." });
  }
});

// üìå Deletar atividade
router.delete("/atividades/:id", autenticarToken, verificarPermissao('obrigacoes.excluir'), async (req, res) => {
  const { id } = req.params;
  try {
    await db.query(`DELETE FROM atividades_obrigacao WHERE id = ?`, [id]);
    res.json({ success: true });
  } catch (error) {
    console.error("Erro ao deletar atividade:", error);
    res.status(500).json({ error: "Erro ao deletar atividade." });
  }
});

function calcularVencimento(ano, mes, tipo, dia, fatoGerador) {
  // Fun√ß√£o para obter o √∫ltimo dia do m√™s
  function getUltimoDiaMes(ano, mes) {
    return new Date(ano, mes, 0).getDate();
  }

  // Fun√ß√£o para verificar se o dia existe no m√™s
  function diaExisteNoMes(ano, mes, dia) {
    const ultimoDia = getUltimoDiaMes(ano, mes);
    return dia <= ultimoDia;
  }

  // Fun√ß√£o para ajustar dia para √∫ltimo dia do m√™s se necess√°rio
  function ajustarDiaParaMes(ano, mes, dia) {
    if (diaExisteNoMes(ano, mes, dia)) {
      return dia;
    }
    return getUltimoDiaMes(ano, mes);
  }

  // Ajustar o dia se n√£o existir no m√™s
  const diaAjustado = ajustarDiaParaMes(ano, mes, dia);
  let data = new Date(ano, mes - 1, diaAjustado);

  if (fatoGerador === 'Pr√≥ximo m√™s') {
    data.setMonth(data.getMonth() + 1);
    // Reajustar o dia ap√≥s mudar o m√™s
    const novoMes = data.getMonth() + 1;
    const novoAno = data.getFullYear();
    const diaAjustadoNovoMes = ajustarDiaParaMes(novoAno, novoMes, dia);
    data = new Date(novoAno, novoMes - 1, diaAjustadoNovoMes);
  }

  // Aplicar regras de antecipa√ß√£o/posterga√ß√£o para fins de semana
  if (tipo === 'Antecipar') {
    while (data.getDay() === 0 || data.getDay() === 6) {
      data = subDays(data, 1);
    }
  } else if (tipo === 'Postergar') {
    while (data.getDay() === 0 || data.getDay() === 6) {
      data = addDays(data, 1);
    }
  }

  const resultado = data.toISOString().split('T')[0];
  
  // Log para debug (pode ser removido em produ√ß√£o)
  if (dia !== diaAjustado) {
    console.log(`üîß Ajuste de data: dia ${dia} n√£o existe no m√™s ${mes}/${ano}, ajustado para ${diaAjustado}`);
  }
  
  return resultado;
}

// üìå Atualizar uma atividade da obriga√ß√£o
router.put("/atividades/:id", autenticarToken, async (req, res) => {
  const { id } = req.params;
  const {
    tipo,
    texto,
    descricao,
    tipoCancelamento,
    ordem,
    pdf_layout_id,
    titulo_documento
  } = req.body;

  try {
    await db.query(`
      UPDATE atividades_obrigacao 
      SET tipo = ?, texto = ?, descricao = ?, tipoCancelamento = ?, ordem = ?, pdf_layout_id = ?, titulo_documento = ?
      WHERE id = ?`,
      [
        tipo, 
        texto, 
        descricao, 
        tipoCancelamento, 
        ordem, 
        pdf_layout_id || null, 
        titulo_documento || null,
        id
      ]
    );

    res.json({ success: true });
  } catch (error) {
    console.error("Erro ao atualizar atividade:", error);
    res.status(500).json({ error: "Erro ao atualizar atividade." });
  }
});

exports.gerarAtividades = async (req, res) => {
  const obrigacaoId = Number(req.params.id);
  const { ano, mesInicio, mesFim } = req.body;

  try {
    const obrigacao = await db('obrigacoes').where({ id: obrigacaoId }).first();
    if (!obrigacao) return res.status(404).json({ erro: 'Obrigacao n√£o encontrada' });

    // CORRETA: usando cliente_respostas e enquete_respostas
    const [vinculados] = await db.query(`
  SELECT DISTINCT cr.clienteId
  FROM obrigacoes_particularidades op
  JOIN enquete_respostas er ON op.particularidadeId = er.particularidadeId
  JOIN cliente_respostas cr ON cr.respostaId = er.id
  WHERE op.obrigacaoId = ?
`, [obrigacaoId]);


    const clientes = vinculados.map(v => v.cliente_id);

    for (let mes = mesInicio; mes <= mesFim; mes++) {
      for (const clienteId of clientes) {
        try {
          await db.query(`
  INSERT INTO obrigacoes_atividades 
    (cliente_id, obrigacao_id, nome, descricao, ano_referencia, mes_referencia, vencimento) 
  VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [clienteId, obrigacaoId, obrigacao.nome, `Obrigacao ${obrigacao.nome} de ${mes}/${ano}`, ano, mes, vencimento]
          );
        } catch (err) {
          if (!err.message.includes('Duplicate')) {
            console.error(err);
          }
        }
      }
    }

  } catch (err) {
    console.error(err);
    res.status(500).json({ erro: 'Erro ao gerar atividades' });
  }
};

// üìå Gerar tarefas (atividades) para uma obriga√ß√£o com base nos filtros de ano e m√™s
router.post("/:id/gerar-atividades", autenticarToken, async (req, res) => {
  const obrigacaoId = Number(req.params.id);
  const { ano, mesInicio, mesFim, clienteIds } = req.body;

  // Fun√ß√£o para inserir as atividades base em batch
  async function clonarAtividadesBase(clienteId, obrigacaoClienteId, atividadesBase) {
    if (atividadesBase.length === 0) return;
    
    // Verificar se j√° existem atividades para esta obriga√ß√£o do cliente
    const [atividadesExistentes] = await db.query(`
      SELECT id FROM obrigacoes_atividades_clientes 
      WHERE clienteId = ? AND obrigacaoClienteId = ?
    `, [clienteId, obrigacaoClienteId]);
    
    // Se j√° existem atividades, n√£o inserir novamente
    if (atividadesExistentes.length > 0) {
      console.log(`‚ö†Ô∏è Atividades j√° existem para cliente ${clienteId}, obriga√ß√£o ${obrigacaoClienteId}. Pulando inser√ß√£o.`);
      return;
    }
    
    const values = atividadesBase.map(atv => [
      clienteId,
      obrigacaoClienteId,
      atv.tipo,
      atv.texto,
      atv.descricao,
      atv.tipoCancelamento,
      atv.ordem,
    ]);
    const placeholders = values.map(() => "(?, ?, ?, ?, ?, ?, ?)").join(", ");
    const flatValues = values.flat();
    await db.query(`
      INSERT INTO obrigacoes_atividades_clientes
      (clienteId, obrigacaoClienteId, tipo, texto, descricao, tipoCancelamento, ordem)
      VALUES ${placeholders}
    `, flatValues);
    
    console.log(`‚úÖ Inseridas ${atividadesBase.length} atividades para cliente ${clienteId}, obriga√ß√£o ${obrigacaoClienteId}`);
  }

  function calcularAnoReferencia(anoAtual, fatoGerador) {
    switch (fatoGerador) {
      case "6 anos anteriores": return anoAtual - 6;
      case "5 anos anteriores": return anoAtual - 5;
      case "4 anos anteriores": return anoAtual - 4;
      case "3 anos anteriores": return anoAtual - 3;
      case "2 anos anteriores": return anoAtual - 2;
      case "Ano anterior": return anoAtual - 1;
      case "Pr√≥ximo ano": return anoAtual + 1;
      case "Mesmo ano":
      default: return anoAtual;
    }
  }

  function calcularMesReferencia(mesVencimento, fatoGerador) {
    switch (fatoGerador) {
      case "M√™s anterior":
        const mesAnterior = mesVencimento - 1;
        return mesAnterior < 1 ? 12 : mesAnterior;
      case "Pr√≥ximo m√™s":
        const proximoMes = mesVencimento + 1;
        return proximoMes > 12 ? 1 : proximoMes;
      case "Mesmo m√™s":
      default:
        return mesVencimento;
    }
  }

  const MAX_PARALLEL = 10;
  async function processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsavelGlobalId) {
            await Promise.all(lote.map(async ({ clienteId, anoCalc, mesReferencia, vencimento, nomeObrigacao, acao, meta }) => {
          try {
            const [existentes] = await db.query(`
              SELECT id FROM obrigacoes_clientes
              WHERE clienteId = ? AND obrigacaoId = ? AND ano_referencia = ? AND mes_referencia = ?
            `, [clienteId, obrigacao.id, anoCalc, mesReferencia]);
            if (existentes.length > 0) {
              return;
            }

        // Buscar respons√°vel individual
        const responsavelId = responsaveisIndividuaisMap.get(clienteId) || responsavelGlobalId || null;

        const [res] = await db.query(`
          INSERT INTO obrigacoes_clientes
          (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
          VALUES (?, ?, ?, ?, 'pendente', ?, ?, ?, NOW(), ?, ?, ?)
        `, [
          clienteId,
          obrigacao.id,
          obrigacao.nome, // <-- nome base, sem compet√™ncia
          `Obriga√ß√£o ${obrigacao.nome} de ${String(mesReferencia).padStart(2, "0")}/${anoCalc}`,
          anoCalc,
          mesReferencia,
          vencimento,
          responsavelId,
          acao,
          meta,
        ]);
        
        console.log("‚úÖ Tarefa gerada! obrigacaoClienteId:", res.insertId, "| clienteId:", clienteId, "| responsavelId:", responsavelId);
        // NOVO: Popular obrigacoes_clientes_responsaveis
        console.log(`üîç Inserindo m√∫ltiplos respons√°veis para obrigacaoClienteId: ${res.insertId}, obrigacaoId: ${obrigacao.id}, clienteId: ${clienteId}`);
        
        // Buscar respons√°veis individuais do cliente
        const [multiResponsaveisIndividuais] = await db.query(`
          SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?
        `, [obrigacao.id, clienteId]);
        
        // Buscar respons√°veis globais (clienteId = null)
        const [multiResponsaveisGlobais] = await db.query(`
          SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
        `, [obrigacao.id]);
        
        console.log(`üîç Respons√°veis individuais encontrados:`, multiResponsaveisIndividuais);
        console.log(`üîç Respons√°veis globais encontrados:`, multiResponsaveisGlobais);
        
        // Se h√° respons√°veis individuais, usar apenas eles
        // Se n√£o h√° individuais, usar os globais
        const responsaveisParaInserir = multiResponsaveisIndividuais.length > 0 
          ? multiResponsaveisIndividuais 
          : multiResponsaveisGlobais;
        
        if (responsaveisParaInserir.length > 0) {
          console.log(`üîç Inserindo ${responsaveisParaInserir.length} respons√°veis`);
          for (const resp of responsaveisParaInserir) {
            console.log(`üîç Inserindo respons√°vel: ${resp.usuarioId}`);
            await db.query(`
              INSERT IGNORE INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
              VALUES (?, ?)
            `, [res.insertId, resp.usuarioId]);
          }
        } else {
          console.log(`üîç Nenhum respons√°vel encontrado para inserir`);
        }
        await clonarAtividadesBase(clienteId, res.insertId, atividadesBase);
      } catch (err) {
        if (!err.message.includes("Duplicate")) console.error("Erro ao inserir tarefa:", err);
      }
    }));
  }

  try {
    const [obrigacoes] = await db.query(`SELECT * FROM obrigacoes WHERE id = ?`, [obrigacaoId]);
    const obrigacao = obrigacoes[0];
    if (!obrigacao) return res.status(404).json({ erro: 'Obrigacao nao encontrada' });

    const [atividadesBase] = await db.query(`SELECT * FROM atividades_obrigacao WHERE obrigacaoId = ?`, [obrigacaoId]);

    // ‚úÖ NOVO: Usar apenas os clientes selecionados pelo usu√°rio
    if (!clienteIds || !Array.isArray(clienteIds) || clienteIds.length === 0) {
      return res.status(400).json({ erro: 'clienteIds √© obrigat√≥rio e deve ser um array n√£o vazio.' });
    }
    
    // Buscar respons√°veis individuais para os clientes selecionados
    const [clientesTodos] = await db.query(`SELECT c.id FROM clientes c WHERE c.id IN (?)`, [clienteIds]);
    const clienteIdsValidados = clientesTodos.map(c => c.id);
    let responsaveisIndividuais = [];
    if (clienteIdsValidados.length > 0) {
      const [rows] = await db.query(`
        SELECT rc.clienteId, rc.usuarioId
        FROM obrigacoes_responsaveis_cliente rc
        WHERE rc.obrigacaoId = ? AND rc.clienteId IN (?)
      `, [obrigacaoId, clienteIdsValidados]);
      responsaveisIndividuais = rows;
    }
    const responsaveisIndividuaisMap = new Map();
    for (const r of responsaveisIndividuais) {
      responsaveisIndividuaisMap.set(r.clienteId, r.usuarioId);
    }
    // Buscar respons√°vel global (clienteId = null)
    const [[globalResp]] = await db.query(`
      SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
    `, [obrigacaoId]);
    const responsavelGlobalId = globalResp ? globalResp.usuarioId : null;

    // Particularidades (mantido)
    const [particularidadesE] = await db.query(`
      SELECT particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ? AND tipo = 'E'
    `, [obrigacaoId]);
    const [particularidadesOU] = await db.query(`
      SELECT particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ? AND tipo = 'OU'
    `, [obrigacaoId]);
    const [particularidadesEXCETO] = await db.query(`
      SELECT particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ? AND tipo = 'EXCETO'
    `, [obrigacaoId]);
    const partE = particularidadesE.map(p => p.particularidadeId);
    const partOU = particularidadesOU.map(p => p.particularidadeId);
    const partEXCETO = particularidadesEXCETO.map(p => p.particularidadeId);

    const [respostasClientes] = await db.query(`
      SELECT cr.clienteId, er.particularidadeId
      FROM cliente_respostas cr
      JOIN enquete_respostas er ON cr.respostaId = er.id
    `);

    const respostasMap = new Map();
    for (const linha of respostasClientes) {
      if (!respostasMap.has(linha.clienteId)) {
        respostasMap.set(linha.clienteId, new Set());
      }
      respostasMap.get(linha.clienteId).add(linha.particularidadeId);
    }

        // ‚úÖ NOVO: Filtrar apenas os clientes selecionados que atendem √†s particularidades
        const clientes = clienteIdsValidados.filter(clienteId => {
          const clienteParticularidades = respostasMap.get(clienteId) || new Set();
          const atendeTodasE = partE.every(pid => clienteParticularidades.has(pid));
          const atendeAlgumaOU = partOU.length === 0 || partOU.some(pid => clienteParticularidades.has(pid));
          const temAlgumExceto = partEXCETO.length > 0 && partEXCETO.some(pid => clienteParticularidades.has(pid));
          return atendeTodasE && atendeAlgumaOU && !temAlgumExceto;
        });
    
    // ‚úÖ NOVO: Log detalhado dos clientes selecionados vs eleg√≠veis
    console.log("üü¢ Clientes selecionados vs eleg√≠veis:", {
      selecionados: clienteIdsValidados.length,
      elegiveis: clientes.length,
      naoElegiveis: clienteIdsValidados.length - clientes.length,
      clientesElegiveis: clientes
    });

    // Simula√ß√£o (mantido)
    if (req.query.simular === "1") {
      const [nomes] = await db.query(
        `SELECT id, nome FROM clientes WHERE id IN (${clientes.join(',')})`
      );
      return res.json({ quantidade: clientes.length, clientes: nomes });
    }
    if (clientes.length === 0) {
      return res.status(200).json({ 
        ok: true, 
        mensagem: `Nenhum dos ${clienteIdsValidados.length} clientes selecionados atende √†s particularidades da obriga√ß√£o.`,
        clientesSelecionados: clienteIdsValidados.length,
        clientesElegiveis: 0
      });
    }

    // Frequ√™ncias (mantido)
    let meses = [];
    console.log(`üìå Frequ√™ncia recebida: ${obrigacao.frequencia}`);
    console.log(`üìå Per√≠odo: ${mesInicio} a ${mesFim}`);
    
    switch (obrigacao.frequencia) {
      case "Mensal":        for (let i = mesInicio; i <= mesFim; i++) meses.push(i); break;
      case "Bimestral":     for (let i = mesInicio; i <= mesFim; i += 2) meses.push(i); break;
      case "Trimestral":
      case "Trimestral 2 Cotas":
      case "Trimestral 3 Cotas": 
        for (let i = mesInicio; i <= mesFim; i += 3) meses.push(i); 
        console.log(`üìå Meses trimestrais calculados: ${meses.join(', ')}`);
        break;
      case "Quadrimestral": for (let i = mesInicio; i <= mesFim; i += 4) meses.push(i); break;
      case "Semestral":     for (let i = mesInicio; i <= mesFim; i += 6) meses.push(i); break;
      case "Anual":
        // üéØ CORRE√á√ÉO: Obriga√ß√µes anuais devem usar o campo diaSemana como m√™s
        const mesAnual = obterMesDoDiaSemana(obrigacao.diaSemana);
        if (mesAnual) {
          // L√≥gica inteligente: verificar se o m√™s ainda cabe no ano atual
          const mesAtual = new Date().getMonth() + 1; // M√™s atual (1-12)
          
          if (mesAnual >= mesInicio && mesAnual <= mesFim) {
            // M√™s est√° dentro do per√≠odo selecionado
            meses = [mesAnual];
            console.log(`üìå Obriga√ß√£o anual configurada para m√™s: ${mesAnual} (${obrigacao.diaSemana}) - dentro do per√≠odo`);
          } else if (mesAnual < mesAtual && mesInicio <= 12) {
            // M√™s j√° passou no ano atual, mas usu√°rio pode querer gerar para o pr√≥ximo ano
            // Verificar se o m√™s cabe no per√≠odo estendido (at√© dezembro)
            const mesProximoAno = mesAnual;
            if (mesProximoAno >= 1 && mesProximoAno <= 12) {
              meses = [mesProximoAno];
              console.log(`üìå Obriga√ß√£o anual configurada para m√™s: ${mesProximoAno} (${obrigacao.diaSemana}) - pr√≥ximo ano`);
            } else {
              meses = [];
              console.log(`‚ö†Ô∏è M√™s anual ${mesAnual} (${obrigacao.diaSemana}) n√£o pode ser processado`);
            }
          } else {
            meses = [];
            console.log(`‚ö†Ô∏è M√™s anual ${mesAnual} (${obrigacao.diaSemana}) fora do per√≠odo ${mesInicio}-${mesFim}`);
          }
        } else {
          console.log(`‚ö†Ô∏è M√™s anual inv√°lido: ${obrigacao.diaSemana}`);
          meses = [];
        }
        break;
      case "Esporadica":    meses = [mesInicio]; break;
      case "Di√°rio":
        const hoje = new Date();
        hoje.setHours(0, 0, 0, 0);
        // Buscar todas as obriga√ß√µes j√° existentes para o per√≠odo, clientes e obriga√ß√£o
        const [existentesDiario] = await db.query(`
          SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia, vencimento
          FROM obrigacoes_clientes
          WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ?
            AND clienteId IN (${clientes.map(() => '?').join(',')})
        `, [obrigacaoId, ano, mesInicio, mesFim, ...clientes]);
        const existeSetDiario = new Set(existentesDiario.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}|${e.vencimento.toISOString().slice(0,10)}`));
        const novasDiario = [];
        for (let mes = mesInicio; mes <= mesFim; mes++) {
          const diasNoMes = new Date(ano, mes, 0).getDate();
          for (let dia = 1; dia <= diasNoMes; dia++) {
            const data = new Date(ano, mes - 1, dia);
            data.setHours(0, 0, 0, 0);
            if (data < hoje) continue;
            const weekday = data.getDay();
            if (weekday === 0 || weekday === 6) continue;
            for (const clienteId of clientes) {
              const chave = `${clienteId}|${obrigacaoId}|${ano}|${mes}|${data.toISOString().slice(0,10)}`;
              if (existeSetDiario.has(chave)) continue;
              // Calcular acao/meta
              const vencimento = data.toISOString().split("T")[0];
              const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
              const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
              const responsavelId = responsaveisIndividuaisMap.get(clienteId) || responsavelGlobalId || null;
              novasDiario.push([
                clienteId,
                obrigacaoId,
                obrigacao.nome,
                `Obrigacao ${obrigacao.nome} de ${String(mes).padStart(2, "0")}/${ano}`,
                'pendente',
                ano,
                mes,
                vencimento,
                responsavelId,
                acao,
                meta
              ]);
            }
          }
        }
        if (novasDiario.length) {
          const placeholders = novasDiario.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(",");
          const flat = novasDiario.flat();
          const [result] = await db.query(`
            INSERT INTO obrigacoes_clientes
            (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
            VALUES ${placeholders}
          `, flat);
          // Buscar os IDs inseridos
          const insertedIds = [];
          const [ultimos] = await db.query('SELECT id, clienteId FROM obrigacoes_clientes WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? AND clienteId IN (' + clientes.map(() => '?').join(',') + ')', [obrigacaoId, ano, mesInicio, mesFim, ...clientes]);
          for (const row of ultimos) insertedIds.push({ id: row.id, clienteId: row.clienteId });
          
          // NOVO: Popular obrigacoes_clientes_responsaveis para inser√ß√µes em lote (Di√°rio)
          console.log(`üîç Processando ${insertedIds.length} tarefas inseridas em lote (Di√°rio)`);
          for (const { id: obrigacaoClienteId, clienteId } of insertedIds) {
            console.log(`üîç Inserindo m√∫ltiplos respons√°veis para obrigacaoClienteId: ${obrigacaoClienteId}, clienteId: ${clienteId}`);
            
            // Buscar respons√°veis individuais do cliente
            const [multiResponsaveisIndividuais] = await db.query(`
              SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?
            `, [obrigacaoId, clienteId]);
            
            // Buscar respons√°veis globais (clienteId = null)
            const [multiResponsaveisGlobais] = await db.query(`
              SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
            `, [obrigacaoId]);
            
            console.log(`üîç Respons√°veis individuais encontrados para cliente ${clienteId}:`, multiResponsaveisIndividuais);
            console.log(`üîç Respons√°veis globais encontrados:`, multiResponsaveisGlobais);
            
            // Se h√° respons√°veis individuais, usar apenas eles
            // Se n√£o h√° individuais, usar os globais
            const responsaveisParaInserir = multiResponsaveisIndividuais.length > 0 
              ? multiResponsaveisIndividuais 
              : multiResponsaveisGlobais;
            
            if (responsaveisParaInserir.length > 0) {
              console.log(`üîç Inserindo ${responsaveisParaInserir.length} respons√°veis`);
              for (const resp of responsaveisParaInserir) {
                console.log(`üîç Inserindo respons√°vel: ${resp.usuarioId}`);
                await db.query(`
                  INSERT INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
                  VALUES (?, ?)
                `, [obrigacaoClienteId, resp.usuarioId]);
              }
            } else {
              console.log(`üîç Nenhum respons√°vel encontrado para inserir`);
            }
          }
          
          // Clonar atividades base para cada nova obriga√ß√£o
          for (const { id, clienteId } of insertedIds) {
            await clonarAtividadesBase(clienteId, id, atividadesBase);
          }
        }
        return res.status(200).json({ ok: true });
      case "Semanal":
        const hojeSemanal = new Date();
        hojeSemanal.setHours(0, 0, 0, 0);
        const diaSemanaMap = {
          Domingo: 0, Segunda: 1, Terca: 2, Ter√ßa: 2, Quarta: 3, Quinta: 4, Sexta: 5, Sabado: 6,
        };
        const diaAlvo = diaSemanaMap[obrigacao.diaSemana];
        if (diaAlvo === undefined) return res.status(400).json({ error: "Dia da semana inv√°lido" });
        // Buscar todas as obriga√ß√µes j√° existentes para o per√≠odo, clientes e obriga√ß√£o
        const [existentesSemanal] = await db.query(`
          SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia, vencimento
          FROM obrigacoes_clientes
          WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ?
            AND clienteId IN (${clientes.map(() => '?').join(',')})
        `, [obrigacaoId, ano, mesInicio, mesFim, ...clientes]);
        const existeSetSemanal = new Set(existentesSemanal.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}|${e.vencimento.toISOString().slice(0,10)}`));
        const novasSemanal = [];
        for (let mes = mesInicio; mes <= mesFim; mes++) {
          const diasNoMes = new Date(ano, mes, 0).getDate();
          for (let dia = 1; dia <= diasNoMes; dia++) {
            const data = new Date(ano, mes - 1, dia);
            data.setHours(0, 0, 0, 0);
            if (data < hojeSemanal) continue;
            if (data.getDay() !== diaAlvo) continue;
            for (const clienteId of clientes) {
              const chave = `${clienteId}|${obrigacaoId}|${ano}|${mes}|${data.toISOString().slice(0,10)}`;
              if (existeSetSemanal.has(chave)) continue;
              // Calcular acao/meta
              const vencimento = data.toISOString().split("T")[0];
              const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
              const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
              const responsavelId = responsaveisIndividuaisMap.get(clienteId) || responsavelGlobalId || null;
              novasSemanal.push([
                clienteId,
                obrigacaoId,
                obrigacao.nome,
                `Obrigacao ${obrigacao.nome} de ${String(mes).padStart(2, "0")}/${ano}`,
                'pendente',
                ano,
                mes,
                vencimento,
                responsavelId,
                acao,
                meta
              ]);
            }
          }
        }
        if (novasSemanal.length) {
          const placeholders = novasSemanal.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(",");
          const flat = novasSemanal.flat();
          const [result] = await db.query(`
            INSERT INTO obrigacoes_clientes
            (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
            VALUES ${placeholders}
          `, flat);
          // Buscar os IDs inseridos
          const insertedIds = [];
          const [ultimos] = await db.query('SELECT id, clienteId FROM obrigacoes_clientes WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? AND clienteId IN (' + clientes.map(() => '?').join(',') + ')', [obrigacaoId, ano, mesInicio, mesFim, ...clientes]);
          for (const row of ultimos) insertedIds.push({ id: row.id, clienteId: row.clienteId });
          
          // NOVO: Popular obrigacoes_clientes_responsaveis para inser√ß√µes em lote (Semanal)
          console.log(`üîç Processando ${insertedIds.length} tarefas inseridas em lote (Semanal)`);
          for (const { id: obrigacaoClienteId, clienteId } of insertedIds) {
            console.log(`üîç Inserindo m√∫ltiplos respons√°veis para obrigacaoClienteId: ${obrigacaoClienteId}, clienteId: ${clienteId}`);
            
            // Buscar respons√°veis individuais do cliente
            const [multiResponsaveisIndividuais] = await db.query(`
              SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?
            `, [obrigacaoId, clienteId]);
            
            // Buscar respons√°veis globais (clienteId = null)
            const [multiResponsaveisGlobais] = await db.query(`
              SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
            `, [obrigacaoId]);
            
            console.log(`üîç Respons√°veis individuais encontrados para cliente ${clienteId}:`, multiResponsaveisIndividuais);
            console.log(`üîç Respons√°veis globais encontrados:`, multiResponsaveisGlobais);
            
            // Se h√° respons√°veis individuais, usar apenas eles
            // Se n√£o h√° individuais, usar os globais
            const responsaveisParaInserir = multiResponsaveisIndividuais.length > 0 
              ? multiResponsaveisIndividuais 
              : multiResponsaveisGlobais;
            
            if (responsaveisParaInserir.length > 0) {
              console.log(`üîç Inserindo ${responsaveisParaInserir.length} respons√°veis`);
              for (const resp of responsaveisParaInserir) {
                console.log(`üîç Inserindo respons√°vel: ${resp.usuarioId}`);
                await db.query(`
                  INSERT INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
                  VALUES (?, ?)
                `, [obrigacaoClienteId, resp.usuarioId]);
              }
            } else {
              console.log(`üîç Nenhum respons√°vel encontrado para inserir`);
            }
          }
          
          // Clonar atividades base para cada nova obriga√ß√£o
          for (const { id, clienteId } of insertedIds) {
            await clonarAtividadesBase(clienteId, id, atividadesBase);
          }
        }
        return res.status(200).json({ ok: true });
      default: return res.status(400).json({ error: "Frequencia invalida ou nao suportada." });
    }

    // L√≥gica de fato gerador - define o ano e m√™s de refer√™ncia baseado no fato gerador
    const anoReferencia = calcularAnoReferencia(ano, obrigacao.fatoGerador);
    const tarefasParaCriar = [];
    
    console.log(`üìå Total de meses para processar: ${meses.length}`);
    console.log(`üìå Clientes eleg√≠veis: ${clientes.length}`);
    
    for (const mesVencimento of meses) {
      console.log(`üìå Processando m√™s de vencimento: ${mesVencimento}`);
      // Calcular m√™s de refer√™ncia baseado no fato gerador
      let mesCompetencia = calcularMesReferencia(mesVencimento, obrigacao.fatoGerador);
      let anoCompetencia = anoReferencia;
  
      // Ajustar ano se necess√°rio quando o m√™s muda
      if (obrigacao.fatoGerador === 'M√™s anterior' && mesCompetencia === 12 && mesVencimento === 1) {
        anoCompetencia = anoReferencia - 1;
      } else if (obrigacao.fatoGerador === 'Pr√≥ximo m√™s' && mesCompetencia === 1 && mesVencimento === 12) {
        anoCompetencia = anoReferencia + 1;
      }
      
      const vencimento = calcularVencimento(
        ano, // ano de vencimento sempre √© o ano atual
        mesVencimento,
        obrigacao.vencimentoTipo,
        obrigacao.vencimentoDia,
        obrigacao.fatoGerador
      );
      
      // Calcular acao/meta
      const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
      const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
      
      for (const clienteId of clientes) {
        tarefasParaCriar.push({
          clienteId,
          anoCalc: anoCompetencia, // ano de refer√™ncia baseado no fato gerador
          mesReferencia: mesCompetencia,
          vencimento,
          nomeObrigacao: `${obrigacao.nome} de ${String(mesCompetencia).padStart(2, "0")}/${anoCompetencia}`,
          acao,
          meta,
        });
      }
    }
    

    console.log(`üìå Total de tarefas a serem criadas: ${tarefasParaCriar.length}`);
    
    for (let i = 0; i < tarefasParaCriar.length; i += MAX_PARALLEL) {
      const lote = tarefasParaCriar.slice(i, i + MAX_PARALLEL);
      console.log(`üìå Processando lote ${Math.floor(i/MAX_PARALLEL) + 1} com ${lote.length} tarefas`);
      await processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsavelGlobalId);
    }
    
    // ‚úÖ NOVO: Retorno com informa√ß√µes detalhadas
    res.status(200).json({ 
      ok: true, 
      mensagem: `Tarefas geradas com sucesso para ${clientes.length} de ${clienteIdsValidados.length} clientes selecionados.`,
      clientesSelecionados: clienteIdsValidados.length,
      clientesElegiveis: clientes.length,
      tarefasGeradas: tarefasParaCriar.length
    });
  } catch (err) {
    console.error("Erro ao gerar atividades:", err);
    res.status(500).json({ erro: 'Erro ao gerar atividades' });
  }
});



router.get("/empresa/:empresaId/com-atividades", autenticarToken, async (req, res) => {
  const { empresaId } = req.params;

  try {
    const [obriga√ß√µes] = await db.query(
      `SELECT o.*, d.nome AS departamentoNome
       FROM obrigacoes o
       LEFT JOIN departamentos d ON o.departamentoId = d.id
       WHERE o.empresaId = ?`,
      [empresaId]
    );

    const obriga√ß√µesComAtividades = await Promise.all(
      obriga√ß√µes.map(async (ob) => {
        const [atividades] = await db.query(
          `SELECT id, tipo, texto, descricao, tipoCancelamento, ordem 
           FROM atividades_obrigacao 
           WHERE obrigacaoId = ?
           ORDER BY ordem`,
          [ob.id]
        );
        return { ...ob, atividades };
      })
    );

    res.json(obriga√ß√µesComAtividades);
  } catch (err) {
    console.error("Erro ao buscar obriga√ß√µes com atividades:", err);
    res.status(500).json({ erro: "Erro ao buscar obriga√ß√µes." });
  }
});

router.get("/cliente/:clienteId/atividades", autenticarToken, async (req, res) => {
  const { clienteId } = req.params;

  try {
    const [atividades] = await db.query(`
      SELECT a.*, o.nome AS nomeObrigacao
      FROM obrigacoes_atividades_clientes a
      JOIN obrigacoes_clientes oc ON a.obrigacaoClienteId = oc.id
      JOIN obrigacoes o ON oc.obrigacaoId = o.id
      WHERE a.clienteId = ? AND oc.status != 'cancelada'
      ORDER BY a.obrigacaoClienteId, a.ordem
    `, [clienteId]);

    res.json(atividades);
  } catch (err) {
    console.error("Erro ao buscar atividades do cliente:", err);
    res.status(500).json({ erro: "Erro ao buscar atividades do cliente." });
  }
});

router.get("/empresa/:empresaId/geradas", autenticarToken, async (req, res) => {
  const { empresaId } = req.params;
  const { mes, ano } = req.query;

  console.log("üìå Empresa:", empresaId, "Ano:", ano, "M√™s:", mes);

  try {
    const [dados] = await db.query(
      `SELECT 
  oc.*, 
  c.nome AS cliente_nome, 
  c.status AS status_cliente,  -- üëà Aqui est√° o novo campo
  d.nome AS departamento_nome
FROM obrigacoes_clientes oc
JOIN clientes c ON c.id = oc.clienteId
JOIN obrigacoes o ON o.id = oc.obrigacaoId
LEFT JOIN departamentos d ON o.departamentoId = d.id
WHERE c.empresaId = ? AND oc.status != 'cancelada' AND (
  oc.ano_referencia > ? OR 
  (oc.ano_referencia = ? AND oc.mes_referencia >= ?)
)`, [empresaId, ano, ano, mes]);

    res.json(dados);
  } catch (error) {
    console.error("Erro ao buscar obriga√ß√µes geradas:", error);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√µes geradas." });
  }
});



router.get("/empresa/:empresaId/geradas/painel", autenticarToken, async (req, res) => {
  const { empresaId } = req.params;
  const { usuarioId, filtrosAtivos, mes, ano } = req.query; // ‚úÖ Par√¢metros para filtrar por responsabilidade e m√™s/ano
  
  // ‚úÖ Verificar se usu√°rio √© superadmin
  const isSuperadmin = req.usuario?.permissoes?.adm?.includes('superadmin');
  
  // ‚úÖ N√£o aplicar filtro de responsabilidade se:
  // 1. Usu√°rio √© superadmin OU
  // 2. H√° filtros de grupos/clientes/departamentos ativos
  const aplicarFiltroResponsabilidade = usuarioId && !isSuperadmin && filtrosAtivos !== 'true';
  

  // Fun√ß√£o para subtrair dias (√∫teis ou corridos)

  function addDias(data, dias) {
    const dt = new Date(data);
    dt.setDate(dt.getDate() + dias);
    return dt;
  }

  try {
    // ‚úÖ QUERY DIN√ÇMICA: Filtra por responsabilidade quando usuarioId √© fornecido
    let query = `
      SELECT 
        oc.id,
        oc.nome AS assunto,
        oc.status,
        oc.vencimento,
        oc.dataBaixa,
        oc.baixadaAutomaticamente,
        c.nome AS cliente_nome, 
        c.cnpjCpf AS cliente_cnpj,
        c.status AS status_cliente,
        o.nome AS nomeObrigacao,
        o.metaQtdDias,
        o.metaTipoDias,
        o.acaoQtdDias,
        o.acaoTipoDias,
        d.nome AS departamento_nome,
        oc.ano_referencia,
        oc.mes_referencia
      FROM obrigacoes_clientes oc
      JOIN clientes c ON c.id = oc.clienteId
      JOIN obrigacoes o ON o.id = oc.obrigacaoId
      LEFT JOIN departamentos d ON o.departamentoId = d.id`;
    
    let params = [empresaId];
    
    if (aplicarFiltroResponsabilidade) {
      // ‚úÖ LEFT JOIN para incluir obriga√ß√µes sem respons√°veis + filtro por usu√°rio
      query += `
      LEFT JOIN obrigacoes_clientes_responsaveis ocr ON ocr.obrigacaoClienteId = oc.id`;
    }
    
    query += `
      WHERE c.empresaId = ? AND oc.status != 'cancelada'`;
    
    // ‚úÖ Filtro por m√™s e ano para obriga√ß√µes conclu√≠das
    if (mes && ano) {
      const mesNum = parseInt(mes) + 1; // JavaScript usa 0-11, SQL usa 1-12
      const anoNum = parseInt(ano);
      query += ` AND (
        oc.status != 'concluida' OR 
        (oc.status = 'concluida' AND MONTH(oc.dataBaixa) = ? AND YEAR(oc.dataBaixa) = ?)
      )`;
      params.push(mesNum, anoNum);
    }
    
    if (aplicarFiltroResponsabilidade) {
      // ‚úÖ Buscar departamento do usu√°rio logado
      const [usuarioDept] = await db.query(`
        SELECT re.departamentoId 
        FROM relacao_empresas re 
        WHERE re.usuarioId = ? AND re.empresaId = ?
      `, [usuarioId, empresaId]);
      
      const departamentoUsuario = usuarioDept[0]?.departamentoId;
      
      if (departamentoUsuario) {
        // ‚úÖ Filtro: responsabilidade do usu√°rio OU obriga√ß√µes sem respons√°veis do mesmo departamento OU obriga√ß√µes espor√°dicas com respons√°vel direto
        query += ` AND (ocr.usuarioId = ? OR (ocr.usuarioId IS NULL AND o.departamentoId = ?) OR (o.frequencia = 'Espor√°dica' AND oc.responsavelId = ?))`;
        params.push(usuarioId, departamentoUsuario, usuarioId);
        console.log(`üë• [Obriga√ß√µes Painel] Usu√°rio departamento: ${departamentoUsuario}, incluindo obriga√ß√µes √≥rf√£s do mesmo dept e espor√°dicas`);
      } else {
        // ‚úÖ Usu√°rio sem departamento: suas responsabilidades OU obriga√ß√µes espor√°dicas com respons√°vel direto
        query += ` AND (ocr.usuarioId = ? OR (o.frequencia = 'Espor√°dica' AND oc.responsavelId = ?))`;
        params.push(usuarioId, usuarioId);
        console.log(`üë§ [Obriga√ß√µes Painel] Usu√°rio sem departamento, responsabilidades diretas e espor√°dicas`);
      }
    }
    
    query += `
      ORDER BY d.nome, oc.vencimento`;

    if (aplicarFiltroResponsabilidade) {
      console.log(`üë§ [Obriga√ß√µes Painel] Filtro aplicado para usu√°rio ID: ${usuarioId}`);
    }

    const [obr] = await db.query(query, params);

    const hoje = new Date();
    hoje.setHours(0, 0, 0, 0);

    const painel = {};

    for (const ob of obr) {
      const depto = ob.departamento_nome || "Sem Departamento";
      const vencimento = new Date(ob.vencimento);
      vencimento.setHours(0, 0, 0, 0);

      // Para obriga√ß√µes espor√°dicas, usar os valores salvos diretamente
      let meta, dataAcao;
      if (ob.acao && ob.meta) {
        meta = new Date(ob.meta);
        dataAcao = new Date(ob.acao);
      } else {
        // Para obriga√ß√µes regulares, calcular baseado nos par√¢metros
        meta = subtrairDias(vencimento, ob.metaQtdDias || 0, ob.metaTipoDias || "Dias √∫teis");
        dataAcao = subtrairDias(meta, ob.acaoQtdDias || 0, ob.acaoTipoDias || "Dias √∫teis");
      }
      meta.setHours(0, 0, 0, 0);
      dataAcao.setHours(0, 0, 0, 0);

      const status = (ob.status || "pendente").trim().toLowerCase();
      const baixadaAutomaticamente = ob.baixadaAutomaticamente === 1;
      const dataConclusao = ob.dataBaixa ? new Date(ob.dataBaixa) : null;
      if (dataConclusao) dataConclusao.setHours(0, 0, 0, 0);

      // Painel est√°tico: processa todas as obriga√ß√µes
      const isMesSelecionado = true; // Sempre true para processar todas

      // Adiciona dataMeta e dataAcao ao objeto da tarefa para o frontend
      const tarefaDetalhada = {
        ...ob,
        dataMeta: meta.toISOString().slice(0, 10),
        dataAcao: dataAcao.toISOString().slice(0, 10),
        cliente_cnpj: ob.cliente_cnpj || "",
      };

      if (!painel[depto]) {
        painel[depto] = {
          departamento: depto,
          acao: { proximos15dias: 0, programadoHoje: 0, foraProgramado: 0, tarefas: [] },
          atencao: { aposMeta: 0, venceHoje: 0, aposPrazo: 0, tarefas: [] },
          concluidas: { finalizada: 0, naProgramacao: 0, concluidasAposMetaPrazo: 0, tarefas: [] },
        };
      }

      // -- CATEGORIZA√á√ÉO --

      // Finalizada autom√°tica (s√≥ do m√™s selecionado)
      if (baixadaAutomaticamente && isMesSelecionado) {
        painel[depto].concluidas.finalizada++;
        painel[depto].concluidas.tarefas.push({ ...tarefaDetalhada, categoria: "Finalizada" });
        continue;
      }

      // CONCLU√çDAS (s√≥ do m√™s selecionado)
      if (status === "concluida" && isMesSelecionado) {
        if (dataConclusao) {
          // Nova l√≥gica: "Na Programa√ß√£o" se conclus√£o <= dataAcao OU (conclus√£o > dataAcao e <= meta)
          if (
            (dataConclusao.getTime() === dataAcao.getTime() &&
             dataConclusao.getTime() === meta.getTime() &&
             dataConclusao.getTime() === vencimento.getTime())
            ||
            (dataConclusao <= dataAcao && dataConclusao <= meta && dataConclusao <= vencimento)
            ||
            (dataConclusao > dataAcao && dataConclusao <= meta)
          ) {
            painel[depto].concluidas.naProgramacao++;
            painel[depto].concluidas.tarefas.push({ ...tarefaDetalhada, categoria: "Na Programa√ß√£o" });
          } else if (
            dataConclusao > meta &&
            dataConclusao <= vencimento
          ) {
            painel[depto].concluidas.concluidasAposMetaPrazo++;
            painel[depto].concluidas.tarefas.push({ ...tarefaDetalhada, categoria: "Conclu√≠da Ap√≥s Meta" });
          } else if (dataConclusao > vencimento) {
            painel[depto].concluidas.concluidasAposMetaPrazo++;
            painel[depto].concluidas.tarefas.push({ ...tarefaDetalhada, categoria: "Conclu√≠da Ap√≥s Prazo" });
          } else {
            painel[depto].concluidas.finalizada++;
            painel[depto].concluidas.tarefas.push({ ...tarefaDetalhada, categoria: "Finalizada" });
          }
        } else {
          painel[depto].concluidas.finalizada++;
          painel[depto].concluidas.tarefas.push({ ...tarefaDetalhada, categoria: "Finalizada" });
        }
        continue;
      }

      // ATEN√á√ÉO (TODAS as obriga√ß√µes)
      if (vencimento.getTime() === hoje.getTime()) {
        painel[depto].atencao.venceHoje++;
        painel[depto].atencao.tarefas.push({ ...tarefaDetalhada, categoria: "Vence Hoje" });
        continue;
      }
      if (hoje > vencimento) {
        painel[depto].atencao.aposPrazo++;
        painel[depto].atencao.tarefas.push({ ...tarefaDetalhada, categoria: "Ap√≥s Prazo" });
        continue;
      }
      if (hoje > meta && hoje < vencimento) {
        painel[depto].atencao.aposMeta++;
        painel[depto].atencao.tarefas.push({ ...tarefaDetalhada, categoria: "Ap√≥s Meta" });
        continue;
      }

      // A√á√ÉO (TODAS as obriga√ß√µes n√£o vencidas)
      // S√≥ classifica na se√ß√£o A√á√ÉO se N√ÉO estiver vencida
      if (hoje <= vencimento) {
        if (dataAcao.getTime() === hoje.getTime()) {
          painel[depto].acao.programadoHoje++;
          painel[depto].acao.tarefas.push({ ...tarefaDetalhada, categoria: "Programado Hoje" });
        } else if (
          dataAcao > hoje &&
          dataAcao <= addDias(hoje, 15)
        ) {
          painel[depto].acao.proximos15dias++;
          painel[depto].acao.tarefas.push({ ...tarefaDetalhada, categoria: "Pr√≥ximos 15 dias" });
        } else if (hoje > dataAcao) {
          painel[depto].acao.foraProgramado++;
          painel[depto].acao.tarefas.push({ ...tarefaDetalhada, categoria: "Fora do Programado" });
        }
      }
    }

    res.json(Object.values(painel));
  } catch (err) {
    console.error("Erro ao montar painel de obriga√ß√µes:", err);
    res.status(500).json({ erro: "Erro interno ao montar painel de obriga√ß√µes." });
  }
});




// Fun√ß√£o para subtrair dias √∫teis (mant√©m a mesma)
function subtrairDiasUteisAteData(dataBase, qtd, cacheDiasUteis) {
  let idx = cacheDiasUteis.findIndex(d => d.toDateString() === new Date(dataBase).toDateString());
  if (idx === -1) idx = cacheDiasUteis.length - 1;
  const novoIdx = idx - qtd;
  return novoIdx >= 0 ? cacheDiasUteis[novoIdx] : cacheDiasUteis[0];
}



// Fun√ß√µes auxiliares (iguais ao seu c√≥digo)
function getDiasUteisDoAno(ano) {
  const dias = [];
  let date = new Date(ano, 0, 1);
  while (date.getFullYear() === ano) {
    if (date.getDay() !== 0 && date.getDay() !== 6) dias.push(new Date(date));
    date.setDate(date.getDate() + 1);
  }
  return dias;
}

function subtrairDiasUteisAteData(dataBase, qtd, cacheDiasUteis) {
  let idx = cacheDiasUteis.findIndex(d => d.toDateString() === new Date(dataBase).toDateString());
  if (idx === -1) idx = cacheDiasUteis.length - 1;
  const novoIdx = idx - qtd;
  return novoIdx >= 0 ? cacheDiasUteis[novoIdx] : cacheDiasUteis[0];
}




// ROTAS NOVAS PARA PAINEL [ID] OBRIGA√á√ïES!!

router.get("/cliente-obrigacao/:id", autenticarToken, async (req, res) => {
  const { id } = req.params;

  try {
    const [dados] = await db.query(`
      SELECT 
        oc.*, 
        o.nome AS nomeObrigacao, 
        o.departamentoId,
        o.acaoQtdDias,
        o.acaoTipoDias,
        o.metaQtdDias,
        o.metaTipoDias,
        o.vencimentoTipo,
        o.vencimentoDia,
        o.fatoGerador,
        o.orgao,
        o.aliasValidacao,
        o.geraMulta,
        o.usarRelatorio,
        o.reenviarEmail,
        d.nome AS departamentoNome,
        c.nome AS clienteNome,
        c.cnpjCpf AS clienteCnpjCpf,
        c.email AS clienteEmail,
        u.nome AS responsavelNome,
        u.email AS responsavelEmail,
        uc.nome AS concluidoPorNome,
        uc.email AS concluidoPorEmail
      FROM obrigacoes_clientes oc
      JOIN obrigacoes o ON oc.obrigacaoId = o.id
      JOIN departamentos d ON o.departamentoId = d.id
      JOIN clientes c ON oc.clienteId = c.id
      LEFT JOIN usuarios u ON oc.responsavelId = u.id
      LEFT JOIN usuarios uc ON oc.concluido_por = uc.id
      WHERE oc.id = ?
    `, [id]);

    if (dados.length === 0) {
      return res.status(404).json({ error: "Obriga√ß√£o gerada n√£o encontrada." });
    }

    res.json(dados[0]);
  } catch (error) {
    console.error("Erro ao buscar obriga√ß√£o do cliente:", error);
    res.status(500).json({ error: "Erro ao buscar dados da obriga√ß√£o gerada." });
  }
});

// ‚úÖ NOVO: Buscar compet√™ncias adjacentes para navega√ß√£o
router.get("/cliente/:clienteId/obrigacao/:obrigacaoId/competencias", autenticarToken, async (req, res) => {
  const { clienteId, obrigacaoId } = req.params;

  try {
    const [competencias] = await db.query(`
      SELECT 
        oc.id,
        oc.ano_referencia,
        oc.mes_referencia,
        oc.vencimento,
        oc.status,
        oc.dataBaixa,
        CONCAT(oc.mes_referencia, '/', oc.ano_referencia) as competencia
      FROM obrigacoes_clientes oc
      WHERE oc.clienteId = ? AND oc.obrigacaoId = ?
      ORDER BY oc.ano_referencia ASC, oc.mes_referencia ASC
    `, [clienteId, obrigacaoId]);

    res.json(competencias);
  } catch (error) {
    console.error("Erro ao buscar compet√™ncias adjacentes:", error);
    res.status(500).json({ error: "Erro ao buscar compet√™ncias adjacentes." });
  }
});


router.get("/atividades-cliente/:obrigacaoClienteId", autenticarToken, async (req, res) => {
  const { obrigacaoClienteId } = req.params;

  try {
    const [atividades] = await db.query(`
  SELECT 
    oac.*, 
    u1.nome AS concluidoPorNome,
    u2.nome AS canceladoPorNome,
    CASE 
      WHEN TRIM(oac.texto) = '0' THEN NULL 
      ELSE oac.texto 
    END AS texto
  FROM obrigacoes_atividades_clientes oac
  LEFT JOIN usuarios u1 ON oac.concluidoPor = u1.id
  LEFT JOIN usuarios u2 ON oac.canceladoPor = u2.id
  WHERE oac.obrigacaoClienteId = ?
  ORDER BY oac.ordem
`, [obrigacaoClienteId]);


    res.json(atividades);
  } catch (err) {
    console.error("Erro ao buscar atividades da obriga√ß√£o cliente:", err);
    res.status(500).json({ error: "Erro ao buscar atividades." });
  }
});


// üìå Concluir obriga√ß√£o GERADA (obrigacoes_clientes)
router.patch("/:id/concluir", autenticarToken, async (req, res) => {
  const { id } = req.params;
  const userId = req.usuario?.id; // ID do usu√°rio que est√° concluindo

  try {
    // Verifica se a obriga√ß√£o gerada existe
    const [obrigacaoRows] = await db.query(`SELECT * FROM obrigacoes_clientes WHERE id = ?`, [id]);
    const obrigacao = obrigacaoRows[0];

    if (!obrigacao) {
      return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });
    }

    // Busca as atividades vinculadas a essa obriga√ß√£o gerada
    const [atividades] = await db.query(
      `SELECT * FROM obrigacoes_atividades_clientes WHERE obrigacaoClienteId = ?`,
      [id]
    );

    const todasFinalizadas = atividades.every((a) => a.concluida === 1 || a.cancelada === 1);

    if (!todasFinalizadas) {
      return res.status(400).json({ error: "Ainda existem atividades em aberto." });
    }

    // Marca a obriga√ß√£o como conclu√≠da, incluindo quem concluiu
    const { dataHora } = getDataHoraServidor();

    await db.query(
      `UPDATE obrigacoes_clientes SET status = 'conclu√≠da', dataBaixa = ?, concluido_por = ? WHERE id = ?`,
      [dataHora, userId, id]
    );

    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("Erro ao concluir obriga√ß√£o:", error);
    return res.status(500).json({ error: "Erro interno ao concluir obriga√ß√£o." });
  }
});



router.patch("/atividade/:atividadeId/concluir", autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  const userId = req.usuario?.id; // vem do middleware de autentica√ß√£o

  try {
    const { dataHora } = getDataHoraServidor();

    await db.query(`
      UPDATE obrigacoes_atividades_clientes
      SET concluida = 1, dataConclusao = ?, concluidoPor = ?
      WHERE id = ?
    `, [dataHora, userId, atividadeId]);

    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao concluir atividade da obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro ao concluir atividade da obriga√ß√£o." });
  }
});


router.patch("/:id/datas", async (req, res) => {
  const { id } = req.params;
  const {
    acaoQtdDias, acaoTipoDias,
    metaQtdDias, metaTipoDias,
    vencimentoTipo, vencimentoDia
  } = req.body;

  try {
    await db.query(`
      UPDATE obrigacoes
      SET acaoQtdDias = ?, acaoTipoDias = ?, metaQtdDias = ?, metaTipoDias = ?, vencimentoTipo = ?, vencimentoDia = ?
      WHERE id = ?`,
      [acaoQtdDias, acaoTipoDias, metaQtdDias, metaTipoDias, vencimentoTipo, vencimentoDia, id]
    );
    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao atualizar datas:", err);
    res.status(500).json({ error: "Erro ao atualizar datas." });
  }
});



router.post("/:obrigacaoId/comentario", autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  const { comentario, anexos, tipo } = req.body;
  const usuarioId = req.usuario?.id;

  if (!comentario?.trim() && (!anexos || anexos.length === 0)) {
    return res.status(400).json({ error: "Coment√°rio ou anexo √© obrigat√≥rio." });
  }

  try {
    // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
    const agora = new Date();
    agora.setHours(agora.getHours() - 3); // Ajuste UTC-3
    const pad = n => String(n).padStart(2, "0");
    const criadoEm =
      agora.getFullYear() + "-" +
      pad(agora.getMonth() + 1) + "-" +
      pad(agora.getDate()) + " " +
      pad(agora.getHours()) + ":" +
      pad(agora.getMinutes()) + ":" +
      pad(agora.getSeconds());

    await db.query(`
  INSERT INTO comentarios_obrigacao (obrigacaoId, usuarioId, comentario, anexos, tipo, criadoEm)
  VALUES (?, ?, ?, ?, ?, ?)
`, [obrigacaoId, usuarioId, comentario || null, JSON.stringify(anexos || []), tipo || "usuario", criadoEm]);


    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao adicionar coment√°rio na obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro ao salvar coment√°rio." });
  }
});


router.get("/:obrigacaoId/comentarios", autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    const [rows] = await db.query(`
     SELECT 
  co.id,
  co.comentario,
  co.criadoEm,
  co.anexos,
  co.tipo,
  u.nome AS autor,
  u.imagem AS avatar
      FROM comentarios_obrigacao co
      JOIN usuarios u ON co.usuarioId = u.id
      WHERE co.obrigacaoId = ?
      ORDER BY co.criadoEm DESC
    `, [obrigacaoId]);

    // Parse do campo JSON
    const comentarios = rows.map(row => ({
      ...row,
      anexos: (() => {
        try {
          return row.anexos ? JSON.parse(row.anexos) : [];
        } catch (e) {
          console.warn("‚ö†Ô∏è Anexo inv√°lido no coment√°rio ID", row.id, ":", row.anexos);
          return [];
        }
      })()
    }));

    res.json(comentarios);
  } catch (err) {
    console.error("Erro ao buscar coment√°rios:", err);
    res.status(500).json({ error: "Erro ao buscar coment√°rios." });
  }
});


router.patch("/atividade/:atividadeId/cancelar", autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  const { justificativa } = req.body;
  const userId = req.usuario?.id;

  try {
    const [[atividade]] = await db.query(`
      SELECT tipoCancelamento FROM obrigacoes_atividades_clientes WHERE id = ?
    `, [atividadeId]);

    if (!atividade) {
      return res.status(404).json({ error: "Atividade n√£o encontrada." });
    }

    if (atividade.tipoCancelamento === "Com justificativa" && (!justificativa || justificativa.trim() === "")) {
      return res.status(400).json({ error: "Justificativa obrigat√≥ria para esse tipo de atividade." });
    }

    // Data/hora padr√£o do servidor (Bras√≠lia)
    const { dataHora } = getDataHoraServidor();

    await db.query(`
      UPDATE obrigacoes_atividades_clientes
      SET cancelada = 1, dataCancelamento = ?, canceladoPor = ?, justificativa = ?
      WHERE id = ?
    `, [dataHora, userId, justificativa || null, atividadeId]);

    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao cancelar atividade da obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro ao cancelar atividade." });
  }
});

router.get("/empresa/:empresaId/todas", autenticarToken, async (req, res) => {
  const { empresaId } = req.params;
  const { usuarioId, filtrosAtivos } = req.query; // ‚úÖ Par√¢metros para filtrar por responsabilidade
  
  // ‚úÖ Verificar se usu√°rio √© superadmin
  const isSuperadmin = req.usuario?.permissoes?.adm?.includes('superadmin');
  
  // ‚úÖ N√£o aplicar filtro de responsabilidade se:
  // 1. Usu√°rio √© superadmin OU
  // 2. H√° filtros de grupos/clientes/departamentos ativos
  const aplicarFiltroResponsabilidade = usuarioId && !isSuperadmin && filtrosAtivos !== 'true';
  
  
  try {
    // 1. ‚úÖ BUSCA OBRIGA√á√ïES COM FILTRO OPCIONAL POR RESPONSABILIDADE
    let query = `
      SELECT 
        oc.*, 
        c.nome AS cliente_nome, 
        c.status AS status_cliente,
        o.nome AS nomeObrigacao,
        o.departamentoId,
        d.nome AS departamento_nome,
        o.metaQtdDias, o.metaTipoDias, o.acaoQtdDias, o.acaoTipoDias
      FROM obrigacoes_clientes oc
      JOIN clientes c ON oc.clienteId = c.id
      JOIN obrigacoes o ON oc.obrigacaoId = o.id
      LEFT JOIN departamentos d ON o.departamentoId = d.id`;
    
    let params = [empresaId];
    
    if (aplicarFiltroResponsabilidade) {
      // ‚úÖ LEFT JOIN para incluir obriga√ß√µes sem respons√°veis + filtro por usu√°rio
      query += `
      LEFT JOIN obrigacoes_clientes_responsaveis ocr ON ocr.obrigacaoClienteId = oc.id`;
    }
    
    query += `
      WHERE c.empresaId = ? AND oc.status != 'cancelada'`;
    
    if (aplicarFiltroResponsabilidade) {
      // ‚úÖ Buscar departamento do usu√°rio logado
      const [usuarioDept] = await db.query(`
        SELECT re.departamentoId 
        FROM relacao_empresas re 
        WHERE re.usuarioId = ? AND re.empresaId = ?
      `, [usuarioId, empresaId]);
      
      const departamentoUsuario = usuarioDept[0]?.departamentoId;
      
      if (departamentoUsuario) {
        // ‚úÖ Filtro: responsabilidade do usu√°rio OU obriga√ß√µes sem respons√°veis do mesmo departamento OU obriga√ß√µes espor√°dicas com respons√°vel direto
        query += ` AND (ocr.usuarioId = ? OR (ocr.usuarioId IS NULL AND o.departamentoId = ?) OR (o.frequencia = 'Espor√°dica' AND oc.responsavelId = ?))`;
        params.push(usuarioId, departamentoUsuario, usuarioId);
        console.log(`üë• [Obriga√ß√µes Todas] Usu√°rio departamento: ${departamentoUsuario}, incluindo obriga√ß√µes √≥rf√£s do mesmo dept e espor√°dicas`);
      } else {
        // ‚úÖ Usu√°rio sem departamento: suas responsabilidades OU obriga√ß√µes espor√°dicas com respons√°vel direto
        query += ` AND (ocr.usuarioId = ? OR (o.frequencia = 'Espor√°dica' AND oc.responsavelId = ?))`;
        params.push(usuarioId, usuarioId);
        console.log(`üë§ [Obriga√ß√µes Todas] Usu√°rio sem departamento, responsabilidades diretas e espor√°dicas`);
      }
    }

    if (aplicarFiltroResponsabilidade) {
      console.log(`üë§ [Obriga√ß√µes Todas] Filtro aplicado para usu√°rio ID: ${usuarioId}`);
    }

    const [obr] = await db.query(query, params);

    // Se n√£o tem obriga√ß√µes, retorna vazio
    if (obr.length === 0) return res.json([]);

    // 2. BUSCA TODAS AS ATIVIDADES EM LOTES (caso haja muitos registros)
    const idsObrigacao = obr.map(o => o.id);
    const lote = 500;
    const lotes = [];
    for (let i = 0; i < idsObrigacao.length; i += lote) {
      const idsLote = idsObrigacao.slice(i, i + lote);
      lotes.push(
        db.query(`
          SELECT id, concluida, cancelada, dataConclusao, obrigacaoClienteId
          FROM obrigacoes_atividades_clientes
          WHERE obrigacaoClienteId IN (?)
        `, [idsLote])
      );
    }
    const allResults = await Promise.all(lotes);
    let todasAtividades = allResults.flatMap(([ativLote]) => ativLote);

    // 3. BUSCA TODOS OS RESPONS√ÅVEIS DAS OBRIGA√á√ïES
    // Primeiro busca da tabela obrigacoes_clientes_responsaveis
    const [responsaveisTabelaRelacao] = await db.query(`
      SELECT 
        ocr.obrigacaoClienteId,
        ocr.usuarioId,
        u.nome AS responsavelNome,
        u.email AS responsavelEmail
      FROM obrigacoes_clientes_responsaveis ocr
      JOIN usuarios u ON u.id = ocr.usuarioId
      WHERE ocr.obrigacaoClienteId IN (?)
    `, [idsObrigacao]);

    // Buscar obriga√ß√µes com frequ√™ncia "Espor√°dica" que n√£o t√™m respons√°veis na tabela de rela√ß√£o
    const [obrigacoesEsporadicas] = await db.query(`
      SELECT oc.id as obrigacaoClienteId
      FROM obrigacoes_clientes oc
      JOIN obrigacoes o ON o.id = oc.obrigacaoId
      WHERE oc.id IN (?) AND o.frequencia = 'Espor√°dica' AND oc.responsavelId IS NOT NULL
    `, [idsObrigacao]);

    // Buscar respons√°veis diretos das obriga√ß√µes espor√°dicas
    let responsaveisEsporadicos = [];
    if (obrigacoesEsporadicas.length > 0) {
      const idsEsporadicas = obrigacoesEsporadicas.map(o => o.obrigacaoClienteId);
      const [responsaveisDiretos] = await db.query(`
        SELECT 
          oc.id as obrigacaoClienteId,
          oc.responsavelId as usuarioId,
          u.nome AS responsavelNome,
          u.email AS responsavelEmail
        FROM obrigacoes_clientes oc
        JOIN usuarios u ON u.id = oc.responsavelId
        WHERE oc.id IN (?)
      `, [idsEsporadicas]);
      responsaveisEsporadicos = responsaveisDiretos;
    }

    // Combinar os dois resultados
    const responsaveis = [...responsaveisTabelaRelacao, ...responsaveisEsporadicos];

    // 4. MAPEIA AS ATIVIDADES PELO obrigacaoClienteId
    const atividadesPorObrigacao = {};
    for (const atv of todasAtividades) {
      if (!atividadesPorObrigacao[atv.obrigacaoClienteId]) {
        atividadesPorObrigacao[atv.obrigacaoClienteId] = [];
      }
      atividadesPorObrigacao[atv.obrigacaoClienteId].push(atv);
    }

    // 5. MAPEIA OS RESPONS√ÅVEIS PELO obrigacaoClienteId
    const responsaveisPorObrigacao = {};
    for (const resp of responsaveis) {
      if (!responsaveisPorObrigacao[resp.obrigacaoClienteId]) {
        responsaveisPorObrigacao[resp.obrigacaoClienteId] = [];
      }
      responsaveisPorObrigacao[resp.obrigacaoClienteId].push(resp);
    }

    // 6. MONTA O OBJETO FINAL COM O C√ÅLCULO DE META/A√á√ÉO
    const obrigacoesComAtividades = obr.map(ob => {
      const atividades = atividadesPorObrigacao[ob.id] || [];
      const responsaveisObrigacao = responsaveisPorObrigacao[ob.id] || [];
      let concluida = false;
      let dataEntregaFinal = null;

      if (ob.baixadaAutomaticamente === 1) {
        concluida = true;
      } else {
        concluida = atividades.length === 0 || atividades.every(a => a.concluida === 1);
        // Pega a maior dataConclusao das conclu√≠das
        const datasEntrega = atividades
          .filter(a => a.concluida === 1 && a.dataConclusao)
          .map(a => new Date(a.dataConclusao));
        if (datasEntrega.length) {
          dataEntregaFinal = datasEntrega.sort((a, b) => b - a)[0];
        }
      }

      // C√°lculo das datas meta/a√ß√£o baseadas no vencimento e nos par√¢metros
      const vencimento = ob.vencimento || ob.data_vencimento;
      let dataMeta = null, dataAcao = null;
      
      // Verificar se tem acao e meta preenchidos (n√£o null, n√£o vazio, n√£o undefined)
      const temAcaoPreenchida = ob.acao && ob.acao !== null && ob.acao !== '' && ob.acao !== 'null';
      const temMetaPreenchida = ob.meta && ob.meta !== null && ob.meta !== '' && ob.meta !== 'null';
      
      if (temAcaoPreenchida && temMetaPreenchida) {
        // Usar os valores salvos diretamente
        dataAcao = ob.acao;
        dataMeta = ob.meta;
      } else if (vencimento && ob.metaQtdDias != null && ob.metaTipoDias) {
        // Calcular baseado nos par√¢metros
        const metaDate = subtrairDias(new Date(vencimento), Number(ob.metaQtdDias), ob.metaTipoDias);
        dataMeta = metaDate.toISOString().slice(0, 10);
        if (ob.acaoQtdDias != null && ob.acaoTipoDias) {
          const acaoDate = subtrairDias(metaDate, Number(ob.acaoQtdDias), ob.acaoTipoDias);
          dataAcao = acaoDate.toISOString().slice(0, 10);
        }
      }

      // --- CLASSIFICA√á√ÉO DE CATEGORIA ---
      let categoria = "N√£o Conclu√≠da";
      const dataVencimento = vencimento ? new Date(vencimento) : null;
      if (concluida) {
        if (dataEntregaFinal && dataVencimento && dataEntregaFinal > dataVencimento) {
          categoria = "Conclu√≠da Ap√≥s Prazo";
        } else {
          categoria = "Na Programa√ß√£o";
        }
      }
      else if (dataEntregaFinal && dataMeta && dataEntregaFinal > new Date(dataMeta) && dataEntregaFinal <= dataVencimento) {
        categoria = "Conclu√≠da Ap√≥s Meta";
      }

      // --- CLASSIFICA√á√ÉO VENCE HOJE ---
      const hoje = new Date();
      hoje.setHours(0,0,0,0);
      if (!concluida && dataVencimento) {
        const dataVenc = new Date(dataVencimento);
        dataVenc.setHours(0,0,0,0);
        if (dataVenc.getTime() === hoje.getTime()) {
          categoria = "Vence Hoje";
        }
      }

      return {
        ...ob,
        atividades,
        responsaveis: responsaveisObrigacao,
        concluida,
        dataEntregaFinal,
        categoria,
        tipo: "obrigacao",
        dataMeta,
        dataAcao,
        // Se quiser um boolean:
        venceHoje: categoria === "Vence Hoje",
      };
    });

    res.json(obrigacoesComAtividades);
  } catch (err) {
    console.error("Erro ao buscar todas as obriga√ß√µes:", err);
    res.status(500).json({ erro: "Erro ao buscar obriga√ß√µes." });
  }
});


// üìå DESCANCELAR atividade
router.patch("/atividade/:atividadeId/descancelar", autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  const userId = req.usuario?.id;

  try {
    const [result] = await db.query(
      `UPDATE obrigacoes_atividades_clientes 
       SET cancelada = 0, justificativa = NULL, concluidoPor = NULL, dataCancelamento = NULL
       WHERE id = ?`,
      [atividadeId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Atividade n√£o encontrada." });
    }

    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao descancelar atividade da obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro ao descancelar atividade." });
  }
});


router.patch("/:id/desconcluir", autenticarToken, async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.query(`
  UPDATE obrigacoes_clientes
  SET dataBaixa = NULL
  WHERE id = ?
`, [id]);

    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao desconcluir obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro ao desconcluir obriga√ß√£o." });
  }
});

router.patch("/atividade/:atividadeId/anexo", autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  const { base64, nomeArquivo } = req.body;

  try {
    // Se ainda n√£o existir, crie essa coluna no banco:
    // ALTER TABLE obrigacoes_atividades_clientes ADD COLUMN anexo TEXT;
    // ALTER TABLE obrigacoes_atividades_clientes ADD COLUMN nomeArquivo TEXT;

    await db.query(`
      UPDATE obrigacoes_atividades_clientes
      SET anexo = ?, nomeArquivo = ?
      WHERE id = ?
    `, [base64, nomeArquivo, atividadeId]);

    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao salvar anexo na atividade:", err);
    res.status(500).json({ error: "Erro ao salvar anexo na atividade." });
  }
});

router.get("/empresa/:empresaId/esporadicas", autenticarToken, async (req, res) => {
  const { empresaId } = req.params;

  try {
    const [dados] = await db.query(`
      SELECT o.*, d.nome as departamentoNome
      FROM obrigacoes o
      JOIN departamentos d ON o.departamentoId = d.id
      WHERE o.empresaId = ? AND o.frequencia = 'Esporadica'
    `, [empresaId]);

    res.json(dados);
  } catch (error) {
    console.error("Erro ao buscar obriga√ß√µes espor√°dicas:", error);
    res.status(500).json({ error: "Erro ao buscar obriga√ß√µes espor√°dicas." });
  }
});

router.post("/esporadica/criar-tarefa", autenticarToken, async (req, res) => {
  const {
    obrigacaoId,
    clienteId,
    dataAcao,
    dataMeta,
    dataVencimento,
    parcelas,
    fatoGerador,
    andamento,
    responsavelId,
    convidados = []
  } = req.body;

  const userId = req.usuario?.id;



  try {
    // Buscar a obriga√ß√£o base
    const [[obrigacao]] = await db.query(
      `SELECT nome FROM obrigacoes WHERE id = ?`,
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });
    }

    const dtVenc = new Date(dataVencimento);
    const parcelasCount = Number(parcelas) || 1;

    let ultimaObrigacaoId = null;
    
    for (let i = 0; i < parcelasCount; i++) {
      const venc = new Date(dtVenc);
      venc.setMonth(venc.getMonth() + i);

      const ano = venc.getFullYear();
      const mes = venc.getMonth() + 1;



      const [resInsert] = await db.query(
        `INSERT INTO obrigacoes_clientes 
  (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, 
   vencimento, responsavelId, acao, meta)
   VALUES (?, ?, ?, ?, 'pendente', ?, ?, ?, ?, ?, ?)`,
        [
          clienteId,
          obrigacaoId,
          obrigacao.nome, // <-- nome base
          `Obriga√ß√£o espor√°dica ${obrigacao.nome} - ${mes}/${ano}`,
          ano,
          mes,
          venc.toISOString().split("T")[0],
          responsavelId || null,
          dataAcao,
          dataMeta,
        ]
      );

      const obrigacaoClienteId = resInsert.insertId;
      ultimaObrigacaoId = obrigacaoClienteId; // Armazena o ID da √∫ltima obriga√ß√£o criada

      // Clonar atividades base
      const [atividadesBase] = await db.query(
        `SELECT * FROM atividades_obrigacao WHERE obrigacaoId = ? ORDER BY ordem`,
        [obrigacaoId]
      );

      // Verificar se j√° existem atividades para esta obriga√ß√£o do cliente
      const [atividadesExistentes] = await db.query(`
        SELECT id FROM obrigacoes_atividades_clientes 
        WHERE clienteId = ? AND obrigacaoClienteId = ?
      `, [clienteId, obrigacaoClienteId]);
      
      // Se j√° existem atividades, n√£o inserir novamente
      if (atividadesExistentes.length > 0) {
        console.log(`‚ö†Ô∏è Atividades j√° existem para cliente ${clienteId}, obriga√ß√£o ${obrigacaoClienteId}. Pulando inser√ß√£o.`);
      } else {
        for (const atv of atividadesBase) {
          await db.query(
            `INSERT INTO obrigacoes_atividades_clientes 
            (clienteId, obrigacaoClienteId, tipo, texto, descricao, tipoCancelamento, ordem)
            VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              clienteId,
              obrigacaoClienteId,
              atv.tipo,
              atv.texto,
              atv.descricao,
              atv.tipoCancelamento,
              atv.ordem
            ]
          );
        }
        console.log(`‚úÖ Inseridas ${atividadesBase.length} atividades para cliente ${clienteId}, obriga√ß√£o ${obrigacaoClienteId}`);
      }

      // Inserir convidados, se houver
      for (const convidadoId of convidados) {
        await db.query(
          `INSERT INTO obrigacoes_clientes_convidados 
           (obrigacaoClienteId, usuarioId)
           VALUES (?, ?)`,
          [obrigacaoClienteId, convidadoId]
        );
      }

      // Inserir coment√°rio de andamento, se fornecido
      if (andamento && andamento.trim()) {
        await db.query(
          `INSERT INTO comentarios_obrigacao 
           (obrigacaoId, usuarioId, comentario, tipo)
           VALUES (?, ?, ?, 'usuario')`,
          [obrigacaoClienteId, userId, andamento.trim()]
        );
      }
    }

    res.status(201).json({ 
      success: true, 
      obrigacaoClienteId: ultimaObrigacaoId 
    });
  } catch (err) {
    console.error("Erro ao criar tarefa espor√°dica:", err);
    res.status(500).json({ error: "Erro ao criar tarefa espor√°dica." });
  }
});








// Rota para disparar a baixa autom√°tica da DCTFWeb para um cliente e empresa espec√≠ficos
router.post("/baixar/dctfweb", autenticarToken, async (req, res) => {
  const { empresaId, clienteId, ano, mes } = req.body;

  if (!empresaId || !clienteId || !ano || !mes) {
    return res.status(400).json({ error: "empresaId, clienteId, ano e mes s√£o obrigat√≥rios." });
  }

  try {
    // Chama a fun√ß√£o que faz a consulta/transmiss√£o da DCTFWeb
    const sucesso = await consultarDCTFWeb(empresaId, clienteId, "40", ano, mes); // "40" pode ser categoria fixa ou vari√°vel conforme necess√°rio

    if (sucesso) {
      // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
      const agora = new Date();
      agora.setHours(agora.getHours() - 3); // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
      const pad = n => String(n).padStart(2, "0");
      const dataBaixa =
        agora.getFullYear() + "-" +
        pad(agora.getMonth() + 1) + "-" +
        pad(agora.getDate()) + " " +
        pad(agora.getHours()) + ":" +
        pad(agora.getMinutes()) + ":" +
        pad(agora.getSeconds());

      // Atualize no banco a obriga√ß√£o_clientes para refletir baixa autom√°tica
      await db.query(`
        UPDATE obrigacoes_clientes 
        SET status = 'concluida', baixadaAutomaticamente = 1, dataBaixa = ? 
        WHERE empresaId = ? AND clienteId = ? AND ano_referencia = ? AND mes_referencia = ?
      `, [dataBaixa, empresaId, clienteId, ano, mes]);

      return res.json({ message: "Baixa autom√°tica DCTFWeb realizada com sucesso." });
    } else {
      return res.status(500).json({ error: "Falha na baixa autom√°tica da DCTFWeb." });
    }
  } catch (error) {
    console.error("Erro na baixa autom√°tica DCTFWeb:", error);
    res.status(500).json({ error: "Erro interno ao realizar baixa autom√°tica." });
  }
});


router.post("/:id/gerar-atividades-cliente", autenticarToken, async (req, res) => {
  const obrigacaoId = Number(req.params.id);
  const { ano, mesInicio, mesFim, clienteId } = req.body;
  if (!clienteId) return res.status(400).json({ error: "clienteId √© obrigat√≥rio" });

  // 1. Buscar a obriga√ß√£o e atividades base
  const [[obrigacao]] = await db.query(`SELECT * FROM obrigacoes WHERE id = ?`, [obrigacaoId]);
  if (!obrigacao) return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });

  const [atividadesBase] = await db.query(
    `SELECT * FROM atividades_obrigacao WHERE obrigacaoId = ?`,
    [obrigacaoId]
  );

  // 2. S√≥ roda para o cliente informado
  for (let mes = mesInicio; mes <= mesFim; mes++) {
    const diasNoMes = new Date(ano, mes, 0).getDate();
    for (let dia = 1; dia <= diasNoMes; dia++) {
      const data = new Date(ano, mes - 1, dia);
      const weekday = data.getDay();
      if (weekday === 0 || weekday === 6) continue; // s√≥ dias √∫teis

      try {
        // Checa se j√° existe, se quiser evitar duplicidade
        const [existe] = await db.query(`
          SELECT id FROM obrigacoes_clientes
          WHERE clienteId = ? AND obrigacaoId = ? AND ano_referencia = ? AND mes_referencia = ? AND vencimento = ?
        `, [clienteId, obrigacaoId, ano, mes, data.toISOString().split("T")[0]]);
        if (existe.length) continue;

        // Cria a obriga√ß√£o do cliente
        // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
        const agora = new Date();
        agora.setHours(agora.getHours() - 3); // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
        const pad = n => String(n).padStart(2, "0");
        const dataCriacao =
          agora.getFullYear() + "-" +
          pad(agora.getMonth() + 1) + "-" +
          pad(agora.getDate()) + " " +
          pad(agora.getHours()) + ":" +
          pad(agora.getMinutes()) + ":" +
          pad(agora.getSeconds());

        const [res] = await db.query(`
          INSERT INTO obrigacoes_clientes
          (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao)
          VALUES (?, ?, ?, ?, 'pendente', ?, ?, ?, ?)`,
          [
            clienteId,
            obrigacaoId,
            obrigacao.nome, // <-- nome base
            `Obrigacao ${obrigacao.nome} de ${dia}/${mes}/${ano}`,
            ano,
            mes,
            data.toISOString().split("T")[0],
            dataCriacao,
          ]
        );

        // Clona as atividades base para o cliente
        if (atividadesBase.length > 0) {
          // Verificar se j√° existem atividades para esta obriga√ß√£o do cliente
          const [atividadesExistentes] = await db.query(`
            SELECT id FROM obrigacoes_atividades_clientes 
            WHERE clienteId = ? AND obrigacaoClienteId = ?
          `, [clienteId, res.insertId]);
          
          // Se j√° existem atividades, n√£o inserir novamente
          if (atividadesExistentes.length > 0) {
            console.log(`‚ö†Ô∏è Atividades j√° existem para cliente ${clienteId}, obriga√ß√£o ${res.insertId}. Pulando inser√ß√£o.`);
          } else {
            const values = atividadesBase.map(atv => [
              clienteId,
              res.insertId,
              atv.tipo,
              atv.texto,
              atv.descricao,
              atv.tipoCancelamento,
              atv.ordem,
            ]);
            const placeholders = values.map(() => "(?, ?, ?, ?, ?, ?, ?)").join(", ");
            const flatValues = values.flat();

            await db.query(`
              INSERT INTO obrigacoes_atividades_clientes
              (clienteId, obrigacaoClienteId, tipo, texto, descricao, tipoCancelamento, ordem)
              VALUES ${placeholders}
            `, flatValues);
            
            console.log(`‚úÖ Inseridas ${atividadesBase.length} atividades para cliente ${clienteId}, obriga√ß√£o ${res.insertId}`);
          }
        }
      } catch (err) {
        if (!err.message?.includes("Duplicate")) {
          console.error("Erro ao inserir tarefa di√°ria:", err);
        }
      }
    }
  }
  res.status(200).json({ ok: true });
});


// ================= RESPONS√ÅVEL FIXO GLOBAL =================

/**
 * GET respons√°vel fixo global de uma obriga√ß√£o
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/responsavel-fixo
 */
router.get('/:obrigacaoId/responsavel-fixo', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  try {
    const [[resp]] = await db.query(
      `SELECT DISTINCT orc.usuarioId, u.nome, u.email FROM obrigacoes_responsaveis_cliente orc
       JOIN usuarios u ON u.id = orc.usuarioId
       WHERE orc.obrigacaoId = ? AND orc.clienteId IS NULL`,
      [obrigacaoId]
    );
    if (!resp) return res.json(null);
    res.json(resp);
  } catch (err) {
    console.error('Erro ao buscar respons√°vel fixo global:', err);
    res.status(500).json({ error: 'Erro ao buscar respons√°vel fixo global.' });
  }
});

/**
 * POST respons√°vel fixo global de uma obriga√ß√£o
 * Exemplo: POST /api/obrigacoes/:obrigacaoId/responsavel-fixo { usuarioId }
 */
router.post('/:obrigacaoId/responsavel-fixo', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  const { usuarioId } = req.body;
  if (!usuarioId) return res.status(400).json({ error: 'usuarioId √© obrigat√≥rio.' });
  try {
    // Upsert: remove se j√° existe, insere novo
    await db.query('DELETE FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL', [obrigacaoId]);
    await db.query('INSERT INTO obrigacoes_responsaveis_cliente (obrigacaoId, clienteId, usuarioId) VALUES (?, NULL, ?)', [obrigacaoId, usuarioId]);
    res.json({ success: true, message: 'Respons√°vel fixo global definido.' });
  } catch (err) {
    console.error('Erro ao definir respons√°vel fixo global:', err);
    res.status(500).json({ error: 'Erro ao definir respons√°vel fixo global.' });
  }
});

/**
 * DELETE respons√°vel fixo global de uma obriga√ß√£o
 * Exemplo: DELETE /api/obrigacoes/:obrigacaoId/responsavel-fixo
 */
router.delete('/:obrigacaoId/responsavel-fixo', autenticarToken, verificarPermissao('obrigacoes.excluir'), async (req, res) => {
  const { obrigacaoId } = req.params;
  try {
    await db.query('DELETE FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL', [obrigacaoId]);
    res.json({ success: true, message: 'Respons√°vel fixo global removido.' });
  } catch (err) {
    console.error('Erro ao remover respons√°vel fixo global:', err);
    res.status(500).json({ error: 'Erro ao remover respons√°vel fixo global.' });
  }
});

// ================= RESPONS√ÅVEL FIXO POR CLIENTE =================

/**
 * GET respons√°vel fixo de um cliente para uma obriga√ß√£o
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/clientes/:clienteId/responsavel-fixo
 */
router.get('/:obrigacaoId/clientes/:clienteId/responsavel-fixo', autenticarToken, async (req, res) => {
  const { obrigacaoId, clienteId } = req.params;
  try {
    const [[resp]] = await db.query(
      `SELECT DISTINCT rc.usuarioId, u.nome, u.email FROM obrigacoes_responsaveis_cliente rc
       JOIN usuarios u ON u.id = rc.usuarioId
       WHERE rc.obrigacaoId = ? AND rc.clienteId = ?`,
      [obrigacaoId, clienteId]
    );
    if (!resp) return res.json(null);
    res.json(resp);
  } catch (err) {
    console.error('Erro ao buscar respons√°vel fixo do cliente:', err);
    res.status(500).json({ error: 'Erro ao buscar respons√°vel fixo do cliente.' });
  }
});

/**
 * POST respons√°vel fixo de um cliente para uma obriga√ß√£o
 * Exemplo: POST /api/obrigacoes/:obrigacaoId/clientes/:clienteId/responsavel-fixo { usuarioId }
 */
router.post('/:obrigacaoId/clientes/:clienteId/responsavel-fixo', autenticarToken, async (req, res) => {
  const { obrigacaoId, clienteId } = req.params;
  const { usuarioId } = req.body;
  if (!usuarioId) return res.status(400).json({ error: 'usuarioId √© obrigat√≥rio.' });
  try {
    // Usando INSERT ... ON DUPLICATE KEY UPDATE para evitar duplicatas
    await db.query(
      `INSERT INTO obrigacoes_responsaveis_cliente (obrigacaoId, clienteId, usuarioId) 
       VALUES (?, ?, ?) 
       ON DUPLICATE KEY UPDATE usuarioId = ?`,
      [obrigacaoId, clienteId, usuarioId, usuarioId]
    );
    res.json({ success: true, message: 'Respons√°vel fixo do cliente definido.' });
  } catch (err) {
    console.error('Erro ao definir respons√°vel fixo do cliente:', err);
    res.status(500).json({ error: 'Erro ao definir respons√°vel fixo do cliente.' });
  }
});

/**
 * DELETE respons√°vel fixo de um cliente para uma obriga√ß√£o
 * Exemplo: DELETE /api/obrigacoes/:obrigacaoId/clientes/:clienteId/responsavel-fixo
 */
router.delete('/:obrigacaoId/clientes/:clienteId/responsavel-fixo', autenticarToken, verificarPermissao('obrigacoes.excluir'), async (req, res) => {
  const { obrigacaoId, clienteId } = req.params;
  try {
    await db.query('DELETE FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?', [obrigacaoId, clienteId]);
    res.json({ success: true, message: 'Respons√°vel fixo do cliente removido.' });
  } catch (err) {
    console.error('Erro ao remover respons√°vel fixo do cliente:', err);
    res.status(500).json({ error: 'Erro ao remover respons√°vel fixo do cliente.' });
  }
});

// ================= CLIENTES COM RESPONS√ÅVEL (GLOBAL OU INDIVIDUAL) =================

/**
 * GET /api/obrigacoes/:obrigacaoId/clientes-com-responsavel
 * Retorna todos os clientes vinculados √† obriga√ß√£o, com respons√°vel resolvido (individual > global > null)
 */
router.get('/:obrigacaoId/clientes-com-responsavel', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  try {
    // Buscar particularidades da obriga√ß√£o
    const [partRows] = await db.query(`
      SELECT particularidadeId, tipo FROM obrigacoes_particularidades WHERE obrigacaoId = ?
    `, [obrigacaoId]);
    const partE = partRows.filter(p => p.tipo === 'E').map(p => p.particularidadeId);
    const partOU = partRows.filter(p => p.tipo === 'OU').map(p => p.particularidadeId);
    const partEXCETO = partRows.filter(p => p.tipo === 'EXCETO').map(p => p.particularidadeId);

    // Buscar todos os clientes que responderam alguma particularidade dessa obriga√ß√£o
    const particularidadeIds = partRows.map(p => p.particularidadeId);
    
    // Se n√£o h√° particularidades, retorna array vazio
    if (particularidadeIds.length === 0) {
      return res.json([]);
    }
    
    const [clientes] = await db.query(`
      SELECT c.id, c.nome, c.cnpjCpf
      FROM clientes c
      JOIN cliente_respostas cr ON cr.clienteId = c.id
      JOIN enquete_respostas er ON er.id = cr.respostaId
      WHERE er.particularidadeId IN (?)
      GROUP BY c.id
    `, [particularidadeIds]);

    if (clientes.length === 0) return res.json([]);

    // Buscar todas as particularidades respondidas por cada cliente
    const clienteIds = clientes.map(c => c.id);
    const [respostas] = await db.query(`
      SELECT c.id as clienteId, er.particularidadeId
      FROM clientes c
      JOIN cliente_respostas cr ON cr.clienteId = c.id
      JOIN enquete_respostas er ON er.id = cr.respostaId
      WHERE c.id IN (?) AND er.particularidadeId IN (?)
    `, [clienteIds, particularidadeIds]);

    // Mapear particularidades por cliente
    const partPorCliente = {};
    for (const r of respostas) {
      if (!partPorCliente[r.clienteId]) partPorCliente[r.clienteId] = new Set();
      partPorCliente[r.clienteId].add(r.particularidadeId);
    }

    // Filtrar clientes v√°lidos
    const clientesValidos = clientes.filter(c => {
      const parts = partPorCliente[c.id] || new Set();
      // EXCETO: se tiver qualquer EXCETO, exclui
      if (partEXCETO.some(pid => parts.has(pid))) return false;
      // E: se n√£o tiver todas as E, exclui
      if (partE.length > 0 && !partE.every(pid => parts.has(pid))) return false;
      // OU: se houver OU, precisa ter pelo menos uma
      if (partOU.length > 0 && !partOU.some(pid => parts.has(pid))) return false;
      return true;
    });

    // Buscar respons√°veis individuais para esses clientes
    let responsaveisIndividuais = [];
    if (clientesValidos.length > 0) {
      const [rows] = await db.query(`
        SELECT rc.clienteId, u.id as usuarioId, u.nome, u.email
        FROM obrigacoes_responsaveis_cliente rc
        JOIN usuarios u ON u.id = rc.usuarioId
        WHERE rc.obrigacaoId = ? AND rc.clienteId IN (?)
      `, [obrigacaoId, clientesValidos.map(c => c.id)]);
      responsaveisIndividuais = rows;
    }
    const responsavelIndMap = new Map();
    for (const r of responsaveisIndividuais) {
      responsavelIndMap.set(r.clienteId, { id: r.usuarioId, nome: r.nome, email: r.email });
    }

    // Buscar respons√°vel global (se houver) - clienteId = null
    const [[globalResp]] = await db.query(`
      SELECT u.id, u.nome, u.email
      FROM obrigacoes_responsaveis_cliente orc
      JOIN usuarios u ON u.id = orc.usuarioId
      WHERE orc.obrigacaoId = ? AND orc.clienteId IS NULL
    `, [obrigacaoId]);
    const responsavelGlobal = globalResp ? { id: globalResp.id, nome: globalResp.nome, email: globalResp.email } : null;

    // Montar resposta
    const resultado = clientesValidos.map(c => ({
      id: c.id,
      nome: c.nome,
      cnpjCpf: c.cnpjCpf,
      responsavel: responsavelIndMap.get(c.id) || responsavelGlobal || null
    }));

    res.json(resultado);
  } catch (err) {
    console.error('Erro ao buscar clientes com respons√°vel:', err);
    res.status(500).json({ error: 'Erro ao buscar clientes com respons√°vel.' });
  }
});

// Cancelar obriga√ß√£o principal
router.patch('/:id/cancelar', autenticarToken, async (req, res) => {
  const { id } = req.params;
  const { justificativa } = req.body;

  try {
    // Verifica se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      `SELECT id, status FROM obrigacoes_clientes WHERE id = ?`,
      [id]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });
    }

    if (obrigacao.status === 'cancelada') {
      return res.status(400).json({ error: "Obriga√ß√£o j√° est√° cancelada." });
    }

    // Ajusta para hor√°rio de Bras√≠lia (UTC-3)
    const agora = new Date();
    agora.setHours(agora.getHours() - 3);
    const pad = n => String(n).padStart(2, "0");
    const dataCancelamento =
      agora.getFullYear() + "-" +
      pad(agora.getMonth() + 1) + "-" +
      pad(agora.getDate()) + " " +
      pad(agora.getHours()) + ":" +
      pad(agora.getMinutes()) + ":" +
      pad(agora.getSeconds());

    await db.query(
      `UPDATE obrigacoes_clientes 
       SET status = 'cancelada', dataCancelamento = ?
       WHERE id = ?`,
      [dataCancelamento || null, id]
    );

    res.json({ success: true, message: "Obriga√ß√£o cancelada com sucesso." });
  } catch (err) {
    console.error("Erro ao cancelar obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro interno ao cancelar obriga√ß√£o." });
  }
});

// Reabrir obriga√ß√£o cancelada
router.patch('/:id/reabrir', autenticarToken, async (req, res) => {
  const { id } = req.params;

  try {
    // Verifica se a obriga√ß√£o existe e est√° cancelada
    const [[obrigacao]] = await db.query(
      `SELECT id, status FROM obrigacoes_clientes WHERE id = ?`,
      [id]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });
    }

    if (obrigacao.status !== 'cancelada') {
      return res.status(400).json({ error: "Obriga√ß√£o n√£o est√° cancelada." });
    }

    await db.query(
      `UPDATE obrigacoes_clientes 
       SET status = 'pendente', dataCancelamento = NULL
       WHERE id = ?`,
      [id]
    );

    res.json({ success: true, message: "Obriga√ß√£o reaberta com sucesso." });
  } catch (err) {
    console.error("Erro ao reabrir obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro interno ao reabrir obriga√ß√£o." });
  }
});

// üìå DISCONCLUIR atividade (desfazer conclus√£o)
router.patch("/atividade/:atividadeId/disconcluir", autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  const userId = req.usuario?.id;

  try {
    const [result] = await db.query(
      `UPDATE obrigacoes_atividades_clientes 
       SET concluida = 0, dataConclusao = NULL, concluidoPor = NULL
       WHERE id = ?`,
      [atividadeId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Atividade n√£o encontrada." });
    }

    res.json({ success: true });
  } catch (err) {
    console.error("Erro ao desconcluir atividade da obriga√ß√£o:", err);
    res.status(500).json({ error: "Erro ao desconcluir atividade." });
  }
});

// ================= TEMPLATES DE E-MAIL =================

/**
 * GET /api/obrigacoes/atividades/:atividadeId/email-template
 * Busca template de e-mail de uma atividade
 */
router.get('/atividades/:atividadeId/email-template', autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  
  console.log("üîç [BACKEND] Buscando template para atividadeId:", atividadeId);
  
  try {
    // ‚úÖ PRIMEIRO: Verificar se o ID √© da atividade base (atividades_obrigacao) ou da atividade cliente
    let atividadeBaseId = null;
    let atividadeCliente = null;
    
    // Tentar buscar como atividade base primeiro
    const [[atividadeBaseCheck]] = await db.query(`
      SELECT id, tipo, texto FROM atividades_obrigacao WHERE id = ?
    `, [atividadeId]);
    
    if (atividadeBaseCheck) {
      console.log("‚úÖ [BACKEND] ID √© da atividade base:", atividadeBaseCheck);
      atividadeBaseId = atividadeBaseCheck.id;
      atividadeCliente = { tipo: atividadeBaseCheck.tipo, texto: atividadeBaseCheck.texto };
    } else {
      // Se n√£o for atividade base, buscar como atividade cliente
      const [[atividadeClienteCheck]] = await db.query(`
        SELECT tipo, texto FROM obrigacoes_atividades_clientes WHERE id = ?
      `, [atividadeId]);
      
      console.log("üîç [BACKEND] Atividade cliente encontrada:", atividadeClienteCheck);
      
      if (!atividadeClienteCheck) {
        console.log("‚ùå [BACKEND] Atividade n√£o encontrada nem como base nem como cliente");
        return res.json(null);
      }
      
      atividadeCliente = atividadeClienteCheck;
    }
    
    // Se ainda n√£o temos o atividadeBaseId, precisamos buscar
    if (!atividadeBaseId) {
      // Buscar a obriga√ß√£o do cliente para obter o obrigacaoId
      const [[obrigacaoCliente]] = await db.query(`
        SELECT obrigacaoId FROM obrigacoes_clientes oc
        JOIN obrigacoes_atividades_clientes oac ON oc.id = oac.obrigacaoClienteId
        WHERE oac.id = ?
      `, [atividadeId]);
      
      console.log("üîç [BACKEND] Obriga√ß√£o cliente encontrada:", obrigacaoCliente);
      
      if (!obrigacaoCliente) {
        console.log("‚ùå [BACKEND] Obriga√ß√£o cliente n√£o encontrada");
        return res.json(null);
      }
      
      // Buscar todas as atividades base que correspondem e verificar qual √© a correta
      const [atividadesBase] = await db.query(`
        SELECT id, ordem FROM atividades_obrigacao 
        WHERE obrigacaoId = ? AND tipo = ? AND texto = ?
        ORDER BY ordem
      `, [obrigacaoCliente.obrigacaoId, atividadeCliente.tipo, atividadeCliente.texto]);
      
      console.log("üîç [BACKEND] Atividades base encontradas:", atividadesBase);
      console.log("üîç [BACKEND] Buscando com obrigacaoId:", obrigacaoCliente.obrigacaoId);
      console.log("üîç [BACKEND] Buscando com tipo:", atividadeCliente.tipo);
      console.log("üîç [BACKEND] Buscando com texto:", atividadeCliente.texto);
      
      if (atividadesBase.length === 0) {
        console.log("‚ùå [BACKEND] Nenhuma atividade base encontrada");
        return res.json(null);
      }
      
      // SELE√á√ÉO DA ATIVIDADE BASE CORRETA: 
      // Se h√° m√∫ltiplas atividades base, precisamos identificar qual corresponde a esta atividade do cliente
      let atividadeBase = atividadesBase[0]; // Por padr√£o, pegar a primeira
      
      // Se h√° m√∫ltiplas atividades base, tentar encontrar a correta baseada na ordem
      if (atividadesBase.length > 1) {
        // Buscar a ordem da atividade do cliente para tentar fazer match
        const [[atividadeClienteComOrdem]] = await db.query(`
          SELECT ordem FROM obrigacoes_atividades_clientes WHERE id = ?
        `, [atividadeId]);
        
        if (atividadeClienteComOrdem && atividadeClienteComOrdem.ordem) {
          // Tentar encontrar atividade base com ordem similar
          const atividadeBaseCorrespondente = atividadesBase.find(ab => ab.ordem === atividadeClienteComOrdem.ordem);
          if (atividadeBaseCorrespondente) {
            atividadeBase = atividadeBaseCorrespondente;
          }
        }
      }
      
      atividadeBaseId = atividadeBase.id;
    }
    
    // Buscar template usando o ID da atividade base
    const [[template]] = await db.query(`
      SELECT * FROM obrigacoes_email_templates WHERE atividadeId = ?
    `, [atividadeBaseId]);
    
    console.log("üîç [BACKEND] Template encontrado:", template);
    console.log("üîç [BACKEND] Buscando template para atividadeBaseId:", atividadeBaseId);
    
    // VERIFICA√á√ÉO FINAL: S√≥ retornar template se realmente existir
    if (!template) {
      console.log("‚ùå [BACKEND] Template n√£o encontrado na tabela obrigacoes_email_templates");
      return res.json(null);
    }
    
    console.log("‚úÖ [BACKEND] Template retornado com sucesso");
    res.json(template);
  } catch (err) {
    console.error('Erro ao buscar template de e-mail:', err);
    res.status(500).json({ error: 'Erro ao buscar template de e-mail.' });
  }
});

/**
 * POST /api/obrigacoes/atividades/:atividadeId/email-template
 * Cria/atualiza template de e-mail de uma atividade
 */
router.post('/atividades/:atividadeId/email-template', autenticarToken, async (req, res) => {
  const { atividadeId } = req.params;
  const { nome, assunto, corpo, destinatario, cc, co, variaveis } = req.body;
  
  console.log("üîç [BACKEND POST] Salvando template para atividadeId:", atividadeId);
  console.log("üîç [BACKEND POST] Dados recebidos:", { nome, assunto, corpo, destinatario, cc, co, variaveis });
  
  try {
    // ‚úÖ PRIMEIRO: Verificar se o ID √© da atividade base (atividades_obrigacao) ou da atividade cliente
    let atividadeBaseId = null;
    let atividadeCliente = null;
    
    // Tentar buscar como atividade base primeiro
    const [[atividadeBaseCheck]] = await db.query(`
      SELECT id, tipo, texto FROM atividades_obrigacao WHERE id = ?
    `, [atividadeId]);
    
    if (atividadeBaseCheck) {
      console.log("‚úÖ [BACKEND POST] ID √© da atividade base:", atividadeBaseCheck);
      atividadeBaseId = atividadeBaseCheck.id;
      atividadeCliente = { tipo: atividadeBaseCheck.tipo, texto: atividadeBaseCheck.texto };
    } else {
      // Se n√£o for atividade base, buscar como atividade cliente
      const [[atividadeClienteCheck]] = await db.query(`
        SELECT tipo, texto FROM obrigacoes_atividades_clientes WHERE id = ?
      `, [atividadeId]);
      
      console.log("üîç [BACKEND POST] Atividade cliente encontrada:", atividadeClienteCheck);
      
      if (!atividadeClienteCheck) {
        console.log("‚ùå [BACKEND POST] Atividade n√£o encontrada nem como base nem como cliente");
        return res.status(404).json({ error: 'Atividade n√£o encontrada.' });
      }
      
      atividadeCliente = atividadeClienteCheck;
    }
    
    // Se ainda n√£o temos o atividadeBaseId, precisamos buscar
    if (!atividadeBaseId) {
      // Buscar a obriga√ß√£o do cliente para obter o obrigacaoId
      const [[obrigacaoCliente]] = await db.query(`
        SELECT obrigacaoId FROM obrigacoes_clientes oc
        JOIN obrigacoes_atividades_clientes oac ON oc.id = oac.obrigacaoClienteId
        WHERE oac.id = ?
      `, [atividadeId]);
      
      if (!obrigacaoCliente) {
        return res.status(404).json({ error: 'Obriga√ß√£o do cliente n√£o encontrada.' });
      }
      
      // Buscar diretamente o ID da atividade base usando obrigacaoId + tipo + texto
      const [[atividadeBase]] = await db.query(`
        SELECT id FROM atividades_obrigacao 
        WHERE obrigacaoId = ? AND tipo = ? AND texto = ?
      `, [obrigacaoCliente.obrigacaoId, atividadeCliente.tipo, atividadeCliente.texto]);
      
      console.log("üîç [BACKEND POST] Atividade base encontrada:", atividadeBase);
      console.log("üîç [BACKEND POST] Buscando com obrigacaoId:", obrigacaoCliente.obrigacaoId);
      console.log("üîç [BACKEND POST] Buscando com tipo:", atividadeCliente.tipo);
      console.log("üîç [BACKEND POST] Buscando com texto:", atividadeCliente.texto);
      
      if (!atividadeBase) {
        console.log("‚ùå [BACKEND POST] Atividade base n√£o encontrada");
        return res.status(404).json({ error: 'Atividade base n√£o encontrada.' });
      }
      
      atividadeBaseId = atividadeBase.id;
    }
    
    console.log("üîç [BACKEND POST] Usando atividadeBaseId para salvar:", atividadeBaseId);
    
    // ‚úÖ Validar vari√°veis usadas no template
    const todasVariaveis = [];
    if (assunto) todasVariaveis.push(...extrairVariaveis(assunto));
    if (corpo) todasVariaveis.push(...extrairVariaveis(corpo));
    if (destinatario) todasVariaveis.push(...extrairVariaveis(destinatario));
    if (cc) todasVariaveis.push(...extrairVariaveis(cc));
    if (co) todasVariaveis.push(...extrairVariaveis(co));
    
    const variaveisUnicas = [...new Set(todasVariaveis)];
    const variaveisInvalidas = [];
    
    // Verificar se todas as vari√°veis usadas s√£o v√°lidas
    for (const variavel of variaveisUnicas) {
      if (!validarVariavel(variavel, variaveis)) {
        variaveisInvalidas.push(variavel);
      }
    }
    
    // Se h√° vari√°veis inv√°lidas, retornar erro
    if (variaveisInvalidas.length > 0) {
      return res.status(400).json({ 
        error: 'Vari√°veis inv√°lidas encontradas no template',
        variaveisInvalidas,
        message: `As seguintes vari√°veis n√£o s√£o v√°lidas: ${variaveisInvalidas.join(', ')}`
      });
    }
    
    // Verificar se j√° existe template
    const [[existente]] = await db.query(`
      SELECT id FROM obrigacoes_email_templates WHERE atividadeId = ?
    `, [atividadeBaseId]);
    
    if (existente) {
      // Atualizar
      console.log("üîÑ [BACKEND POST] Atualizando template existente para atividadeBaseId:", atividadeBaseId);
      await db.query(`
        UPDATE obrigacoes_email_templates 
        SET nome = ?, assunto = ?, corpo = ?, destinatario = ?, cc = ?, co = ?, variaveis = ?
        WHERE atividadeId = ?
      `, [nome, assunto, corpo, destinatario, cc, co, JSON.stringify(variaveis), atividadeBaseId]);
    } else {
      // Criar novo
      console.log("‚ûï [BACKEND POST] Criando novo template para atividadeBaseId:", atividadeBaseId);
      await db.query(`
        INSERT INTO obrigacoes_email_templates 
        (atividadeId, nome, assunto, corpo, destinatario, cc, co, variaveis)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `, [atividadeBaseId, nome, assunto, corpo, destinatario, cc, co, JSON.stringify(variaveis)]);
    }
    
    console.log("‚úÖ [BACKEND POST] Template salvo com sucesso para atividadeBaseId:", atividadeBaseId);
    
    res.json({ 
      success: true,
      message: 'Template salvo com sucesso',
      variaveisUsadas: variaveisUnicas,
      totalVariaveis: variaveisUnicas.length
    });
  } catch (err) {
    console.error('Erro ao salvar template de e-mail:', err);
    res.status(500).json({ error: 'Erro ao salvar template de e-mail.' });
  }
});



/**
 * POST /api/obrigacoes/excluir-em-lote
 * Exclus√£o em lote de obriga√ß√µes
 */
router.post("/excluir-em-lote", autenticarToken, verificarPermissao('obrigacoes.excluir'), async (req, res) => {
  try {
    const { ids } = req.body;

    if (!ids || !Array.isArray(ids) || ids.length === 0) {
      return res.status(400).json({ error: "IDs das obriga√ß√µes s√£o obrigat√≥rios" });
    }

    // Excluir obriga√ß√µes em lote
    const placeholders = ids.map(() => "?").join(",");
    const [result] = await db.execute(
      `DELETE FROM obrigacoes_clientes WHERE id IN (${placeholders})`,
      ids
    );

    console.log(`‚úÖ ${result.affectedRows} obriga√ß√µes exclu√≠das em lote`);

    res.json({ 
      success: true, 
      message: `${result.affectedRows} obriga√ß√£o(√µes) exclu√≠da(s) com sucesso`,
      excluidas: result.affectedRows
    });
  } catch (error) {
    console.error("Erro ao excluir obriga√ß√µes em lote:", error);
    res.status(500).json({ error: "Erro interno ao excluir obriga√ß√µes" });
  }
});

/**
 * POST /api/obrigacoes/atualizar-responsavel-em-lote
 * Atualizar respons√°vel exclusivo em lote
 */
router.post("/atualizar-responsavel-em-lote", autenticarToken, verificarPermissao('obrigacoes.editar'), async (req, res) => {
  const { ids, responsavelId } = req.body;
  
  if (!ids || !Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ error: 'IDs s√£o obrigat√≥rios e devem ser um array n√£o vazio.' });
  }
  
  if (!responsavelId) {
    return res.status(400).json({ error: 'responsavelId √© obrigat√≥rio.' });
  }

  try {
    // Verificar se o respons√°vel existe
    const [[responsavel]] = await db.query('SELECT id, nome FROM usuarios WHERE id = ?', [responsavelId]);
    if (!responsavel) {
      return res.status(404).json({ error: 'Respons√°vel n√£o encontrado.' });
    }

    // Obter uma conex√£o para transa√ß√£o
    const connection = await db.getConnection();
    
    try {
      // Iniciar transa√ß√£o
      await connection.beginTransaction();

      // 1. Atualizar respons√°vel exclusivo em obrigacoes_clientes
      const placeholders = ids.map(() => "?").join(",");
      const [resultObrigacoes] = await connection.execute(
        `UPDATE obrigacoes_clientes SET responsavelId = ? WHERE id IN (${placeholders})`,
        [responsavelId, ...ids]
      );

      // 2. ATUALIZAR (n√£o inserir) obrigacoes_clientes_responsaveis
      const [resultResponsaveis] = await connection.execute(
        `UPDATE obrigacoes_clientes_responsaveis SET usuarioId = ? WHERE obrigacaoClienteId IN (${placeholders})`,
        [responsavelId, ...ids]
      );

      // Commit da transa√ß√£o
      await connection.commit();

      console.log(`‚úÖ Respons√°vel atualizado em ambas as tabelas:`);
      console.log(`   - obrigacoes_clientes: ${resultObrigacoes.affectedRows} registros`);
      console.log(`   - obrigacoes_clientes_responsaveis: ${resultResponsaveis.affectedRows} registros atualizados`);

      res.json({ 
        success: true, 
        message: `Respons√°vel atualizado com sucesso para ${resultObrigacoes.affectedRows} obriga√ß√£o(√µes).`,
        responsavel: responsavel.nome,
        atualizadas: resultObrigacoes.affectedRows,
        responsaveisAtualizados: resultResponsaveis.affectedRows
      });

    } catch (err) {
      // Rollback em caso de erro
      await connection.rollback();
      throw err;
    } finally {
      // Sempre liberar a conex√£o
      connection.release();
    }

  } catch (err) {
    console.error('Erro ao atualizar respons√°vel em lote:', err);
    res.status(500).json({ error: 'Erro ao atualizar respons√°vel em lote.' });
  }
});

// Listar modelo PDF Layout vinculado √† atividade
router.get("/atividades/:id/pdf-layouts", autenticarToken, async (req, res) => {
  const { id } = req.params;
  console.log("[BACK PDF Vincular][GET] atividadeId:", id);
  try {
    const [[atividade]] = await db.query(
      `SELECT pdf_layout_id FROM atividades_obrigacao WHERE id = ?`,
      [id]
    );
    console.log("[BACK PDF Vincular][GET] resultado atividade:", atividade);
    if (!atividade) return res.status(404).json({ erro: "Atividade n√£o encontrada" });
    if (!atividade.pdf_layout_id) return res.json([]);
    const [[modelo]] = await db.query(
      `SELECT id, nome FROM pdf_layouts WHERE id = ?`,
      [atividade.pdf_layout_id]
    );
    console.log("[BACK PDF Vincular][GET] resultado modelo:", modelo);
    if (!modelo) return res.json([]);
    res.json([modelo]);
  } catch (err) {
    console.error("Erro ao buscar modelo PDF vinculado:", err);
    res.status(500).json({ erro: "Erro ao buscar modelo PDF vinculado" });
  }
});

// POST vincular modelo
router.post("/atividades/:id/pdf-layouts", autenticarToken, async (req, res) => {
  const { id } = req.params;
  const { pdf_layout_id } = req.body;
  console.log("[BACK PDF Vincular][POST] atividadeId:", id, "layoutId:", pdf_layout_id);
  if (!pdf_layout_id) return res.status(400).json({ erro: "pdf_layout_id √© obrigat√≥rio" });
  try {
    const [[atividade]] = await db.query(
      `SELECT id FROM atividades_obrigacao WHERE id = ?`,
      [id]
    );
    console.log("[BACK PDF Vincular][POST] resultado atividade:", atividade);
    if (!atividade) return res.status(404).json({ erro: "Atividade n√£o encontrada" });
    await db.query(
      `UPDATE atividades_obrigacao SET pdf_layout_id = ? WHERE id = ?`,
      [pdf_layout_id, id]
    );
    res.json({ sucesso: true });
  } catch (err) {
    console.error("Erro ao vincular modelo PDF:", err);
    res.status(500).json({ erro: "Erro ao vincular modelo PDF" });
  }
});

// DELETE desvincular modelo
router.delete("/atividades/:id/pdf-layouts/:layoutId", autenticarToken, async (req, res) => {
  const { id, layoutId } = req.params;
  console.log("[BACK PDF Vincular][DELETE] atividadeId:", id, "layoutId:", layoutId);
  try {
    const [[atividade]] = await db.query(
      `SELECT pdf_layout_id FROM atividades_obrigacao WHERE id = ?`,
      [id]
    );
    console.log("[BACK PDF Vincular][DELETE] resultado atividade:", atividade);
    if (!atividade) return res.status(404).json({ erro: "Atividade n√£o encontrada" });
    if (atividade.pdf_layout_id != layoutId) return res.status(404).json({ erro: "Modelo n√£o vinculado a esta atividade" });
    await db.query(
      `UPDATE atividades_obrigacao SET pdf_layout_id = NULL WHERE id = ? AND pdf_layout_id = ?`,
      [id, layoutId]
    );
    res.json({ sucesso: true });
  } catch (err) {
    console.error("Erro ao desvincular modelo PDF:", err);
    res.status(500).json({ erro: "Erro ao desvincular modelo PDF" });
  }
});

// ================= M√öLTIPLOS RESPONS√ÅVEIS =================
// Utiliza a tabela obrigacoes_responsaveis_cliente existente
// Permite m√∫ltiplos respons√°veis por obriga√ß√£o/cliente

/**
 * GET m√∫ltiplos respons√°veis de uma obriga√ß√£o para um cliente
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/clientes/:clienteId/responsaveis
 */
router.get('/:obrigacaoId/clientes/:clienteId/responsaveis', autenticarToken, async (req, res) => {
  const { obrigacaoId, clienteId } = req.params;
  try {
    const [responsaveis] = await db.query(`
      SELECT DISTINCT orc.id, orc.usuarioId, u.nome, u.email, d.nome as departamentoNome
      FROM obrigacoes_responsaveis_cliente orc
      JOIN usuarios u ON u.id = orc.usuarioId
      LEFT JOIN relacao_empresas re ON re.usuarioId = u.id
      LEFT JOIN departamentos d ON d.id = re.departamentoId
      WHERE orc.obrigacaoId = ? AND orc.clienteId = ?
      ORDER BY u.nome
    `, [obrigacaoId, clienteId]);
    
    res.json(responsaveis);
  } catch (err) {
    console.error('Erro ao buscar m√∫ltiplos respons√°veis:', err);
    res.status(500).json({ error: 'Erro ao buscar respons√°veis.' });
  }
});

/**
 * POST adicionar respons√°vel m√∫ltiplo
 * Exemplo: POST /api/obrigacoes/:obrigacaoId/clientes/:clienteId/responsaveis { usuarioId }
 */
router.post('/:obrigacaoId/clientes/:clienteId/responsaveis', autenticarToken, async (req, res) => {
  const { obrigacaoId, clienteId } = req.params;
  const { usuarioId } = req.body;
  
  if (!usuarioId) {
    return res.status(400).json({ error: 'usuarioId √© obrigat√≥rio.' });
  }
  
  try {
    // Verificar se j√° existe
    const [existe] = await db.query(`
      SELECT obrigacaoId FROM obrigacoes_responsaveis_cliente 
      WHERE obrigacaoId = ? AND clienteId = ? AND usuarioId = ?
    `, [obrigacaoId, clienteId, usuarioId]);
    
    if (existe.length > 0) {
      return res.status(400).json({ error: 'Este respons√°vel j√° est√° vinculado.' });
    }
    
    // Inserir novo respons√°vel
    await db.query(`
      INSERT INTO obrigacoes_responsaveis_cliente (obrigacaoId, clienteId, usuarioId) 
      VALUES (?, ?, ?)
    `, [obrigacaoId, clienteId, usuarioId]);
    
    res.json({ success: true, message: 'Respons√°vel adicionado com sucesso.' });
  } catch (err) {
    console.error('Erro ao adicionar respons√°vel:', err);
    res.status(500).json({ error: 'Erro ao adicionar respons√°vel.' });
  }
});

/**
 * DELETE remover respons√°vel m√∫ltiplo
 * Exemplo: DELETE /api/obrigacoes/:obrigacaoId/clientes/:clienteId/responsaveis/:responsavelId
 */
router.delete('/:obrigacaoId/clientes/:clienteId/responsaveis/:responsavelId', autenticarToken, async (req, res) => {
  const { obrigacaoId, clienteId, responsavelId } = req.params;
  
  try {
    await db.query(`
      DELETE FROM obrigacoes_responsaveis_cliente 
      WHERE obrigacaoId = ? AND clienteId = ? AND usuarioId = ?
    `, [obrigacaoId, clienteId, responsavelId]);
    
    res.json({ success: true, message: 'Respons√°vel removido com sucesso.' });
  } catch (err) {
    console.error('Erro ao remover respons√°vel:', err);
    res.status(500).json({ error: 'Erro ao remover respons√°vel.' });
  }
});

/**
 * GET respons√°veis m√∫ltiplos para uma obriga√ß√£o (todos os clientes)
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/responsaveis-multiplos
 */
router.get('/:obrigacaoId/responsaveis-multiplos', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  
  try {
    const [responsaveis] = await db.query(`
      SELECT 
        orc.id, 
        orc.clienteId,
        orc.usuarioId,
        c.nome as clienteNome,
        c.cnpjCpf as clienteCnpj,
        u.nome as responsavelNome,
        u.email as responsavelEmail,
        d.nome as departamentoNome
      FROM obrigacoes_responsaveis_cliente orc
      JOIN clientes c ON c.id = orc.clienteId
      JOIN usuarios u ON u.id = orc.usuarioId
      LEFT JOIN relacao_empresas re ON re.usuarioId = u.id
      LEFT JOIN departamentos d ON d.id = re.departamentoId
      WHERE orc.obrigacaoId = ?
      ORDER BY c.nome, u.nome
    `, [obrigacaoId]);
    
    res.json(responsaveis);
  } catch (err) {
    console.error('Erro ao buscar respons√°veis m√∫ltiplos:', err);
    res.status(500).json({ error: 'Erro ao buscar respons√°veis.' });
  }
});

// Endpoint para buscar respons√°veis de uma tarefa espec√≠fica
router.get("/obrigacoes-clientes/:obrigacaoClienteId/responsaveis", autenticarToken, async (req, res) => {
  const { obrigacaoClienteId } = req.params;
  
  try {
    // Primeiro, buscar informa√ß√µes da obriga√ß√£o para verificar a frequ√™ncia
    const [obrigacaoInfo] = await db.query(`
      SELECT oc.obrigacaoId, o.frequencia
      FROM obrigacoes_clientes oc
      JOIN obrigacoes o ON o.id = oc.obrigacaoId
      WHERE oc.id = ?
    `, [obrigacaoClienteId]);

    if (obrigacaoInfo.length === 0) {
      return res.status(404).json({ erro: "Obriga√ß√£o n√£o encontrada" });
    }

    const { obrigacaoId, frequencia } = obrigacaoInfo[0];
    let responsaveis = [];

    // 1. Buscar respons√°veis da tabela obrigacoes_clientes_responsaveis (sempre)
    const [responsaveisTabelaRelacao] = await db.query(`
      SELECT 
        u.id,
        u.nome,
        u.email,
        d.nome as departamentoNome
      FROM obrigacoes_clientes_responsaveis ocr
      JOIN usuarios u ON u.id = ocr.usuarioId
      LEFT JOIN relacao_empresas re ON re.usuarioId = u.id
      LEFT JOIN departamentos d ON d.id = re.departamentoId
      WHERE ocr.obrigacaoClienteId = ?
      ORDER BY u.nome
    `, [obrigacaoClienteId]);

    responsaveis = responsaveisTabelaRelacao;

    // 2. Se frequ√™ncia for "Espor√°dica" e n√£o h√° respons√°veis na tabela de rela√ß√£o, buscar da obrigacoes_clientes
    if (frequencia === "Espor√°dica" && responsaveis.length === 0) {
      const [responsavelDireto] = await db.query(`
        SELECT 
          u.id,
          u.nome,
          u.email,
          d.nome as departamentoNome
        FROM obrigacoes_clientes oc
        JOIN usuarios u ON u.id = oc.responsavelId
        LEFT JOIN relacao_empresas re ON re.usuarioId = u.id
        LEFT JOIN departamentos d ON d.id = re.departamentoId
        WHERE oc.id = ? AND oc.responsavelId IS NOT NULL
        ORDER BY u.nome
      `, [obrigacaoClienteId]);

      responsaveis = responsavelDireto;
    }
    
    res.json(responsaveis);
  } catch (error) {
    console.error("Erro ao buscar respons√°veis da tarefa:", error);
    res.status(500).json({ erro: "Erro interno do servidor" });
  }
});

/**
 * POST criar coment√°rio para obriga√ß√£o
 * Exemplo: POST /api/obrigacoes/comentario
 */
router.post("/comentario", autenticarToken, async (req, res) => {
  const { obrigacaoId, comentario, tipo = "usuario" } = req.body;
  const userId = req.usuario?.id;

  if (!obrigacaoId || !comentario) {
    return res.status(400).json({ error: "obrigacaoId e comentario s√£o obrigat√≥rios." });
  }

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      `SELECT id FROM obrigacoes_clientes WHERE id = ?`,
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: "Obriga√ß√£o n√£o encontrada." });
    }

    // Inserir coment√°rio
    const [result] = await db.query(
      `INSERT INTO comentarios_obrigacao (obrigacaoId, usuarioId, comentario, tipo) 
       VALUES (?, ?, ?, ?)`,
      [obrigacaoId, userId, comentario, tipo]
    );

    res.status(201).json({ 
      success: true, 
      comentarioId: result.insertId,
      message: "Coment√°rio criado com sucesso." 
    });
  } catch (err) {
    console.error("Erro ao criar coment√°rio:", err);
    res.status(500).json({ error: "Erro ao criar coment√°rio." });
  }
});

/**
 * GET buscar coment√°rios de uma obriga√ß√£o
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/comentarios
 */
router.get("/:obrigacaoId/comentarios", autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    const [comentarios] = await db.query(`
      SELECT 
        co.id,
        co.comentario,
        co.tipo,
        co.criadoEm,
        u.nome as usuarioNome,
        u.email as usuarioEmail
      FROM comentarios_obrigacao co
      JOIN usuarios u ON u.id = co.usuarioId
      WHERE co.obrigacaoId = ?
      ORDER BY co.criadoEm DESC
    `, [obrigacaoId]);

    res.json(comentarios);
  } catch (err) {
    console.error("Erro ao buscar coment√°rios:", err);
    res.status(500).json({ error: "Erro ao buscar coment√°rios." });
  }
});

/**
 * POST buscar coment√°rios em lote para m√∫ltiplas obriga√ß√µes
 * Exemplo: POST /api/obrigacoes/comentarios/lote
 */
router.post("/comentarios/lote", autenticarToken, async (req, res) => {
  const { obrigacaoIds } = req.body;
  
  if (!obrigacaoIds || !Array.isArray(obrigacaoIds) || obrigacaoIds.length === 0) {
    return res.status(400).json({ error: "Lista de IDs de obriga√ß√µes √© obrigat√≥ria." });
  }

  try {
    // Buscar o √∫ltimo coment√°rio de cada obriga√ß√£o
    const placeholders = obrigacaoIds.map(() => '?').join(',');
    const [comentarios] = await db.query(`
      SELECT 
        co.obrigacaoId,
        co.id as comentarioId,
        co.comentario,
        co.tipo,
        co.criadoEm,
        u.nome as autorNome,
        u.id as autorId
      FROM comentarios_obrigacao co
      JOIN usuarios u ON co.usuarioId = u.id
      WHERE co.obrigacaoId IN (${placeholders})
      AND co.id = (
        SELECT MAX(co2.id) 
        FROM comentarios_obrigacao co2 
        WHERE co2.obrigacaoId = co.obrigacaoId
      )
      ORDER BY co.criadoEm DESC
    `, obrigacaoIds);

    // Organizar por obrigacaoId para facilitar o acesso
    const comentariosPorObrigacao = {};
    comentarios.forEach(comentario => {
      comentariosPorObrigacao[comentario.obrigacaoId] = comentario;
    });

    res.json(comentariosPorObrigacao);
  } catch (err) {
    console.error("Erro ao buscar coment√°rios em lote:", err);
    res.status(500).json({ error: "Erro ao buscar coment√°rios em lote." });
  }
});

// ================= RESPONS√ÅVEIS FIXOS GLOBAIS M√öLTIPLOS =================

/**
 * GET buscar respons√°veis fixos globais de uma obriga√ß√£o
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/responsaveis-fixos-globais
 */
router.get('/:obrigacaoId/responsaveis-fixos-globais', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      'SELECT id FROM obrigacoes WHERE id = ?',
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada' });
    }

    // Buscar respons√°veis fixos globais (clienteId = null)
    const [responsaveis] = await db.query(`
      SELECT 
        orc.usuarioId,
        u.nome,
        u.email,
        d.nome as departamentoNome
      FROM obrigacoes_responsaveis_cliente orc
      JOIN usuarios u ON u.id = orc.usuarioId
      LEFT JOIN relacao_empresas re ON re.usuarioId = u.id
      LEFT JOIN departamentos d ON d.id = re.departamentoId
      WHERE orc.obrigacaoId = ? AND orc.clienteId IS NULL
      ORDER BY u.nome
    `, [obrigacaoId]);

    res.json(responsaveis);
  } catch (error) {
    console.error('Erro ao buscar respons√°veis fixos globais:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * POST adicionar respons√°vel fixo global
 * Exemplo: POST /api/obrigacoes/:obrigacaoId/responsaveis-fixos-globais { usuarioId }
 */
router.post('/:obrigacaoId/responsaveis-fixos-globais', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;
  const { usuarioId } = req.body;

  if (!usuarioId) {
    return res.status(400).json({ error: 'usuarioId √© obrigat√≥rio' });
  }

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      'SELECT id FROM obrigacoes WHERE id = ?',
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada' });
    }

    // Verificar se o usu√°rio existe
    const [[usuario]] = await db.query(
      'SELECT id FROM usuarios WHERE id = ?',
      [usuarioId]
    );

    if (!usuario) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }

    // Verificar se j√° existe este respons√°vel para esta obriga√ß√£o
    const [[existente]] = await db.query(
      'SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND usuarioId = ? AND clienteId IS NULL',
      [obrigacaoId, usuarioId]
    );

    if (existente) {
      return res.status(400).json({ error: 'Este usu√°rio j√° √© respons√°vel fixo global desta obriga√ß√£o' });
    }

    // Adicionar respons√°vel fixo global (clienteId = null)
    await db.query(
      'INSERT INTO obrigacoes_responsaveis_cliente (obrigacaoId, clienteId, usuarioId) VALUES (?, NULL, ?)',
      [obrigacaoId, usuarioId]
    );

    res.status(201).json({ 
      success: true, 
      message: 'Respons√°vel fixo global adicionado com sucesso' 
    });
  } catch (error) {
    console.error('Erro ao adicionar respons√°vel fixo global:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * DELETE remover respons√°vel fixo global
 * Exemplo: DELETE /api/obrigacoes/:obrigacaoId/responsaveis-fixos-globais/:usuarioId
 */
router.delete('/:obrigacaoId/responsaveis-fixos-globais/:usuarioId', autenticarToken, async (req, res) => {
  const { obrigacaoId, usuarioId } = req.params;

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      'SELECT id FROM obrigacoes WHERE id = ?',
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada' });
    }

    // Verificar se o respons√°vel existe
    const [[responsavel]] = await db.query(
      'SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND usuarioId = ? AND clienteId IS NULL',
      [obrigacaoId, usuarioId]
    );

    if (!responsavel) {
      return res.status(404).json({ error: 'Respons√°vel fixo global n√£o encontrado' });
    }

    // Remover respons√°vel fixo global
    await db.query(
      'DELETE FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND usuarioId = ? AND clienteId IS NULL',
      [obrigacaoId, usuarioId]
    );

    res.json({ 
      success: true, 
      message: 'Respons√°vel fixo global removido com sucesso' 
    });
  } catch (error) {
    console.error('Erro ao remover respons√°vel fixo global:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * GET buscar todos os respons√°veis de uma obriga√ß√£o (individuais e globais)
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/responsaveis-todos
 */
router.get('/:obrigacaoId/responsaveis-todos', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      'SELECT id FROM obrigacoes WHERE id = ?',
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada' });
    }

    // Buscar todos os respons√°veis individuais e globais de uma vez
    const [responsaveis] = await db.query(`
      SELECT DISTINCT
        orc.usuarioId,
        orc.clienteId,
        u.nome,
        u.email,
        d.nome as departamentoNome,
        CASE 
          WHEN orc.clienteId IS NULL THEN 'global'
          ELSE 'individual'
        END as tipo
      FROM obrigacoes_responsaveis_cliente orc
      JOIN usuarios u ON u.id = orc.usuarioId
      LEFT JOIN relacao_empresas re ON re.usuarioId = u.id
      LEFT JOIN departamentos d ON d.id = re.departamentoId
      WHERE orc.obrigacaoId = ?
      ORDER BY orc.clienteId ASC, u.nome ASC
    `, [obrigacaoId]);

    // Organizar por cliente
    const responsaveisPorCliente = {};
    const responsaveisGlobais = [];

    responsaveis.forEach(resp => {
      if (resp.clienteId === null) {
        // Respons√°vel global
        responsaveisGlobais.push({
          id: resp.usuarioId,
          usuarioId: resp.usuarioId,
          nome: resp.nome,
          email: resp.email,
          departamentoNome: resp.departamentoNome,
          tipo: 'global',
          clienteId: null
        });
      } else {
        // Respons√°vel individual
        if (!responsaveisPorCliente[resp.clienteId]) {
          responsaveisPorCliente[resp.clienteId] = [];
        }
        responsaveisPorCliente[resp.clienteId].push({
          id: resp.usuarioId,
          usuarioId: resp.usuarioId,
          nome: resp.nome,
          email: resp.email,
          departamentoNome: resp.departamentoNome,
          tipo: 'individual',
          clienteId: resp.clienteId
        });
      }
    });

    res.json({
      globais: responsaveisGlobais,
      porCliente: responsaveisPorCliente
    });
  } catch (err) {
    console.error('Erro ao buscar respons√°veis:', err);
    res.status(500).json({ error: 'Erro ao buscar respons√°veis.' });
  }
});

// üìå Gerar tarefas individualmente por cliente
router.post("/gerar-tarefas", autenticarToken, async (req, res) => {
  const { clienteId, obrigacaoIds, ano, vencimentoAPartir, mesReferenciaAte } = req.body;

  console.log("üîç Dados recebidos:", { clienteId, obrigacaoIds, ano, vencimentoAPartir, mesReferenciaAte });

  if (!clienteId || !obrigacaoIds || !ano || !vencimentoAPartir || !mesReferenciaAte) {
    console.log("‚ùå Valida√ß√£o falhou:", { clienteId, obrigacaoIds, ano, vencimentoAPartir, mesReferenciaAte });
    return res.status(400).json({ erro: 'Todos os campos s√£o obrigat√≥rios' });
  }

  // Validar se obrigacaoIds √© um array e n√£o est√° vazio
  if (!Array.isArray(obrigacaoIds) || obrigacaoIds.length === 0) {
    console.log("‚ùå obrigacaoIds inv√°lido:", obrigacaoIds);
    return res.status(400).json({ erro: 'obrigacaoIds deve ser um array n√£o vazio' });
  }

  // Fun√ß√£o para inserir as atividades base em batch
  async function clonarAtividadesBase(clienteId, obrigacaoClienteId, atividadesBase) {
    if (atividadesBase.length === 0) return;
    
    // Verificar se j√° existem atividades para esta obriga√ß√£o do cliente
    const [atividadesExistentes] = await db.query(`
      SELECT id FROM obrigacoes_atividades_clientes 
      WHERE clienteId = ? AND obrigacaoClienteId = ?
    `, [clienteId, obrigacaoClienteId]);
    
    // Se j√° existem atividades, n√£o inserir novamente
    if (atividadesExistentes.length > 0) {
      console.log(`‚ö†Ô∏è Atividades j√° existem para cliente ${clienteId}, obriga√ß√£o ${obrigacaoClienteId}. Pulando inser√ß√£o.`);
      return;
    }
    
    const values = atividadesBase.map(atv => [
      clienteId,
      obrigacaoClienteId,
      atv.tipo,
      atv.texto,
      atv.descricao,
      atv.tipoCancelamento,
      atv.ordem,
    ]);
    const placeholders = values.map(() => "(?, ?, ?, ?, ?, ?, ?)").join(", ");
    const flatValues = values.flat();
    await db.query(`
      INSERT INTO obrigacoes_atividades_clientes
      (clienteId, obrigacaoClienteId, tipo, texto, descricao, tipoCancelamento, ordem)
      VALUES ${placeholders}
    `, flatValues);
    
    console.log(`‚úÖ Inseridas ${atividadesBase.length} atividades para cliente ${clienteId}, obriga√ß√£o ${obrigacaoClienteId}`);
  }

  function calcularAnoReferencia(anoAtual, fatoGerador) {
    switch (fatoGerador) {
      case "6 anos anteriores": return anoAtual - 6;
      case "5 anos anteriores": return anoAtual - 5;
      case "4 anos anteriores": return anoAtual - 4;
      case "3 anos anteriores": return anoAtual - 3;
      case "2 anos anteriores": return anoAtual - 2;
      case "Ano anterior": return anoAtual - 1;
      case "Pr√≥ximo ano": return anoAtual + 1;
      case "Mesmo ano":
      default: return anoAtual;
    }
  }

  function calcularMesReferencia(mesVencimento, fatoGerador) {
    switch (fatoGerador) {
      case "M√™s anterior":
        const mesAnterior = mesVencimento - 1;
        return mesAnterior < 1 ? 12 : mesAnterior;
      case "Pr√≥ximo m√™s":
        const proximoMes = mesVencimento + 1;
        return proximoMes > 12 ? 1 : proximoMes;
      case "Mesmo m√™s":
      default:
        return mesVencimento;
    }
  }

  const MAX_PARALLEL = 10;
  async function processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsavelGlobalId, contadores) {
    await Promise.all(lote.map(async ({ clienteId, anoCalc, mesReferencia, vencimento, nomeObrigacao, acao, meta }) => {
      try {
        // ‚úÖ NOVO: Verificar se j√° existe tarefa para este cliente, obriga√ß√£o, ano e m√™s
        const [existentes] = await db.query(`
          SELECT id FROM obrigacoes_clientes
          WHERE clienteId = ? AND obrigacaoId = ? AND ano_referencia = ? AND mes_referencia = ?
        `, [clienteId, obrigacao.id, anoCalc, mesReferencia]);
        
        if (existentes.length > 0) {
          console.log(`‚ö†Ô∏è Tarefa j√° existe para cliente ${clienteId}, obriga√ß√£o ${obrigacao.id}, ano ${anoCalc}, m√™s ${mesReferencia}. Pulando inser√ß√£o.`);
          contadores.puladas++;
          return;
        }

        // Buscar respons√°vel individual
        const responsavelId = responsaveisIndividuaisMap.get(obrigacao.id) || responsavelGlobalId || null;

        const [res] = await db.query(`
          INSERT INTO obrigacoes_clientes
          (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
          VALUES (?, ?, ?, ?, 'pendente', ?, ?, ?, NOW(), ?, ?, ?)
        `, [
          clienteId,
          obrigacao.id,
          obrigacao.nome,
          `Obriga√ß√£o ${obrigacao.nome} de ${String(mesReferencia).padStart(2, "0")}/${anoCalc}`,
          anoCalc,
          mesReferencia,
          vencimento,
          responsavelId,
          acao,
          meta,
        ]);
        
        console.log("‚úÖ Tarefa gerada! obrigacaoClienteId:", res.insertId, "| clienteId:", clienteId, "| responsavelId:", responsavelId);
        contadores.geradas++;
        
        // Popular obrigacoes_clientes_responsaveis
        console.log(`üîç Inserindo m√∫ltiplos respons√°veis para obrigacaoClienteId: ${res.insertId}, obrigacaoId: ${obrigacao.id}, clienteId: ${clienteId}`);
        
        // Buscar respons√°veis individuais do cliente
        const [multiResponsaveisIndividuais] = await db.query(`
          SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?
        `, [obrigacao.id, clienteId]);
        
        // Buscar respons√°veis globais (clienteId = null)
        const [multiResponsaveisGlobais] = await db.query(`
          SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
        `, [obrigacao.id]);
        
        console.log(`üîç Respons√°veis individuais encontrados:`, multiResponsaveisIndividuais);
        console.log(`üîç Respons√°veis globais encontrados:`, multiResponsaveisGlobais);
        
        // Se h√° respons√°veis individuais, usar apenas eles
        // Se n√£o h√° individuais, usar os globais
        const responsaveisParaInserir = multiResponsaveisIndividuais.length > 0 
          ? multiResponsaveisIndividuais 
          : multiResponsaveisGlobais;
        
        if (responsaveisParaInserir.length > 0) {
          console.log(`üîç Inserindo ${responsaveisParaInserir.length} respons√°veis`);
          for (const resp of responsaveisParaInserir) {
            console.log(`üîç Inserindo respons√°vel: ${resp.usuarioId}`);
            await db.query(`
              INSERT IGNORE INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
              VALUES (?, ?)
            `, [res.insertId, resp.usuarioId]);
          }
        } else {
          console.log(`üîç Nenhum respons√°vel encontrado para inserir`);
        }
        await clonarAtividadesBase(clienteId, res.insertId, atividadesBase);
      } catch (err) {
        if (!err.message.includes("Duplicate")) console.error("Erro ao inserir tarefa:", err);
      }
    }));
  }

  try {
    // Converter vencimentoAPartir e mesReferenciaAte para n√∫meros de m√™s
    const mesesMap = {
      "Janeiro": 1, "Fevereiro": 2, "Mar√ßo": 3, "Abril": 4, "Maio": 5, "Junho": 6,
      "Julho": 7, "Agosto": 8, "Setembro": 9, "Outubro": 10, "Novembro": 11, "Dezembro": 12
    };
    
    const mesInicio = mesesMap[vencimentoAPartir];
    const mesFim = mesesMap[mesReferenciaAte];
    
    console.log("üîç Mapeamento de meses:", { vencimentoAPartir, mesInicio, mesReferenciaAte, mesFim });
    
    if (!mesInicio || !mesFim) {
      console.log("‚ùå Meses inv√°lidos:", { vencimentoAPartir, mesInicio, mesReferenciaAte, mesFim });
      return res.status(400).json({ erro: 'Meses inv√°lidos' });
    }

    console.log(`üöÄ Iniciando processamento de ${obrigacaoIds.length} obriga√ß√µes para cliente ${clienteId}`);
    
    let tarefasGeradas = 0;
    let tarefasPuladas = 0;
    
    // ‚úÖ NOVO: Buscar respons√°veis ANTES de processar as obriga√ß√µes (mesmo padr√£o da gerar-atividades)
    const responsaveisIndividuaisMap = new Map();
    const responsaveisGlobaisMap = new Map();
    
    // Buscar respons√°veis individuais para o cliente
    if (obrigacaoIds.length > 0) {
      const [responsaveisIndividuais] = await db.query(`
        SELECT rc.clienteId, rc.usuarioId, rc.obrigacaoId
        FROM obrigacoes_responsaveis_cliente rc
        WHERE rc.obrigacaoId IN (?) AND rc.clienteId = ?
      `, [obrigacaoIds, clienteId]);
      
      for (const r of responsaveisIndividuais) {
        responsaveisIndividuaisMap.set(r.obrigacaoId, r.usuarioId);
      }
      
      // Buscar respons√°veis globais (clienteId = null) para cada obriga√ß√£o
      for (const obrigacaoId of obrigacaoIds) {
        const [[globalResp]] = await db.query(`
          SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
        `, [obrigacaoId]);
        if (globalResp) {
          responsaveisGlobaisMap.set(obrigacaoId, globalResp.usuarioId);
        }
      }
    }
    
    console.log("üîç Respons√°veis encontrados:", { 
      individuais: Array.from(responsaveisIndividuaisMap.entries()),
      globais: Array.from(responsaveisGlobaisMap.entries())
    });
    
    // Processar cada obriga√ß√£o selecionada
    for (const obrigacaoId of obrigacaoIds) {
      const [obrigacoes] = await db.query(`SELECT * FROM obrigacoes WHERE id = ?`, [obrigacaoId]);
      const obrigacao = obrigacoes[0];
      if (!obrigacao) {
        console.log(`‚ö†Ô∏è Obriga√ß√£o ${obrigacaoId} n√£o encontrada`);
        continue;
      }

      const [atividadesBase] = await db.query(`SELECT * FROM atividades_obrigacao WHERE obrigacaoId = ?`, [obrigacaoId]);

      // Verificar se o cliente atende √†s particularidades da obriga√ß√£o
      const [particularidadesE] = await db.query(`
        SELECT particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ? AND tipo = 'E'
      `, [obrigacaoId]);
      const [particularidadesOU] = await db.query(`
        SELECT particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ? AND tipo = 'OU'
      `, [obrigacaoId]);
      const [particularidadesEXCETO] = await db.query(`
        SELECT particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ? AND tipo = 'EXCETO'
      `, [obrigacaoId]);
      
      const partE = particularidadesE.map(p => p.particularidadeId);
      const partOU = particularidadesOU.map(p => p.particularidadeId);
      const partEXCETO = particularidadesEXCETO.map(p => p.particularidadeId);

      // Buscar respostas do cliente
      const [respostasCliente] = await db.query(`
        SELECT cr.clienteId, er.particularidadeId
        FROM cliente_respostas cr
        JOIN enquete_respostas er ON cr.respostaId = er.id
        WHERE cr.clienteId = ?
      `, [clienteId]);

      const clienteParticularidades = new Set(respostasCliente.map(r => r.particularidadeId));
      
      // Verificar se o cliente atende √†s particularidades
      const atendeTodasE = partE.every(pid => clienteParticularidades.has(pid));
      const atendeAlgumaOU = partOU.length === 0 || partOU.some(pid => clienteParticularidades.has(pid));
      const temAlgumExceto = partEXCETO.length > 0 && partEXCETO.some(pid => clienteParticularidades.has(pid));
      
      if (!atendeTodasE || !atendeAlgumaOU || temAlgumExceto) {
        console.log(`‚ö†Ô∏è Cliente ${clienteId} n√£o atende √†s particularidades da obriga√ß√£o ${obrigacaoId}`);
        continue;
      }

      // Frequ√™ncias
      let meses = [];
      switch (obrigacao.frequencia) {
        case "Mensal":        for (let i = mesInicio; i <= mesFim; i++) meses.push(i); break;
        case "Bimestral":     for (let i = mesInicio; i <= mesFim; i += 2) meses.push(i); break;
        case "Trimestral":
        case "Trimestral 2 Cotas":
        case "Trimestral 3 Cotas": for (let i = mesInicio; i <= mesFim; i += 3) meses.push(i); break;
        case "Quadrimestral": for (let i = mesInicio; i <= mesFim; i += 4) meses.push(i); break;
        case "Semestral":     for (let i = mesInicio; i <= mesFim; i += 6) meses.push(i); break;
        case "Anual":
          // üéØ CORRE√á√ÉO: Obriga√ß√µes anuais devem usar o campo diaSemana como m√™s
          const mesAnual2 = obterMesDoDiaSemana(obrigacao.diaSemana);
          if (mesAnual2) {
            // L√≥gica inteligente: verificar se o m√™s ainda cabe no ano atual
            const mesAtual2 = new Date().getMonth() + 1; // M√™s atual (1-12)
            
            if (mesAnual2 >= mesInicio && mesAnual2 <= mesFim) {
              // M√™s est√° dentro do per√≠odo selecionado
              meses = [mesAnual2];
              console.log(`üìå Obriga√ß√£o anual configurada para m√™s: ${mesAnual2} (${obrigacao.diaSemana}) - dentro do per√≠odo`);
            } else if (mesAnual2 < mesAtual2 && mesInicio <= 12) {
              // M√™s j√° passou no ano atual, mas usu√°rio pode querer gerar para o pr√≥ximo ano
              const mesProximoAno2 = mesAnual2;
              if (mesProximoAno2 >= 1 && mesProximoAno2 <= 12) {
                meses = [mesProximoAno2];
                console.log(`üìå Obriga√ß√£o anual configurada para m√™s: ${mesProximoAno2} (${obrigacao.diaSemana}) - pr√≥ximo ano`);
              } else {
                meses = [];
                console.log(`‚ö†Ô∏è M√™s anual ${mesAnual2} (${obrigacao.diaSemana}) n√£o pode ser processado`);
              }
            } else {
              meses = [];
              console.log(`‚ö†Ô∏è M√™s anual ${mesAnual2} (${obrigacao.diaSemana}) fora do per√≠odo ${mesInicio}-${mesFim}`);
            }
          } else {
            console.log(`‚ö†Ô∏è M√™s anual inv√°lido: ${obrigacao.diaSemana}`);
            meses = [];
          }
          break;
        case "Esporadica":    meses = [mesInicio]; break;
        case "Di√°rio":
          const hoje = new Date();
          hoje.setHours(0, 0, 0, 0);
          // Buscar todas as obriga√ß√µes j√° existentes para o per√≠odo, cliente e obriga√ß√£o
          const [existentesDiario] = await db.query(`
            SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia, vencimento
            FROM obrigacoes_clientes
            WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? AND clienteId = ?
          `, [obrigacaoId, ano, mesInicio, mesFim, clienteId]);
          const existeSetDiario = new Set(existentesDiario.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}|${e.vencimento.toISOString().slice(0,10)}`));
          const novasDiario = [];
          for (let mes = mesInicio; mes <= mesFim; mes++) {
            const diasNoMes = new Date(ano, mes, 0).getDate();
            for (let dia = 1; dia <= diasNoMes; dia++) {
              const data = new Date(ano, mes - 1, dia);
              data.setHours(0, 0, 0, 0);
              if (data < hoje) continue;
              const weekday = data.getDay();
              if (weekday === 0 || weekday === 6) continue;
              const chave = `${clienteId}|${obrigacaoId}|${ano}|${mes}|${data.toISOString().slice(0,10)}`;
              if (existeSetDiario.has(chave)) continue;
              // Calcular acao/meta
              const vencimento = data.toISOString().split("T")[0];
              const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
              const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
              const responsavelId = responsaveisIndividuaisMap.get(obrigacaoId) || responsaveisGlobaisMap.get(obrigacaoId) || null;
              novasDiario.push([
                clienteId,
                obrigacaoId,
                obrigacao.nome,
                `Obrigacao ${obrigacao.nome} de ${String(mes).padStart(2, "0")}/${ano}`,
                'pendente',
                ano,
                mes,
                vencimento,
                responsavelId,
                acao,
                meta
              ]);
            }
          }
          if (novasDiario.length) {
            const placeholders = novasDiario.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(",");
            const flat = novasDiario.flat();
            const [result] = await db.query(`
              INSERT INTO obrigacoes_clientes
              (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
              VALUES ${placeholders}
            `, flat);
            // Buscar os IDs inseridos
            const insertedIds = [];
            const [ultimos] = await db.query('SELECT id, clienteId FROM obrigacoes_clientes WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? AND clienteId = ?', [obrigacaoId, ano, mesInicio, mesFim, clienteId]);
            for (const row of ultimos) insertedIds.push({ id: row.id, clienteId: row.clienteId });
            
            // Popular obrigacoes_clientes_responsaveis para inser√ß√µes em lote (Di√°rio)
            console.log(`üîç Processando ${insertedIds.length} tarefas inseridas em lote (Di√°rio)`);
            for (const { id: obrigacaoClienteId, clienteId } of insertedIds) {
              console.log(`üîç Inserindo m√∫ltiplos respons√°veis para obrigacaoClienteId: ${obrigacaoClienteId}, clienteId: ${clienteId}`);
              
              // Buscar respons√°veis individuais do cliente
              const [multiResponsaveisIndividuais] = await db.query(`
                SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?
              `, [obrigacaoId, clienteId]);
              
              // Buscar respons√°veis globais (clienteId = null)
              const [multiResponsaveisGlobais] = await db.query(`
                SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
              `, [obrigacaoId]);
              
              console.log(`üîç Respons√°veis individuais encontrados para cliente ${clienteId}:`, multiResponsaveisIndividuais);
              console.log(`üîç Respons√°veis globais encontrados:`, multiResponsaveisGlobais);
              
              // Se h√° respons√°veis individuais, usar apenas eles
              // Se n√£o h√° individuais, usar os globais
              const responsaveisParaInserir = multiResponsaveisIndividuais.length > 0 
                ? multiResponsaveisIndividuais 
                : multiResponsaveisGlobais;
              
              if (responsaveisParaInserir.length > 0) {
                console.log(`üîç Inserindo ${responsaveisParaInserir.length} respons√°veis`);
                for (const resp of responsaveisParaInserir) {
                  console.log(`üîç Inserindo respons√°vel: ${resp.usuarioId}`);
                  await db.query(`
                    INSERT INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
                    VALUES (?, ?)
                  `, [obrigacaoClienteId, resp.usuarioId]);
                }
              } else {
                console.log(`üîç Nenhum respons√°vel encontrado para inserir`);
              }
            }
            
            // Clonar atividades base para cada nova obriga√ß√£o
            for (const { id, clienteId } of insertedIds) {
              await clonarAtividadesBase(clienteId, id, atividadesBase);
            }
          }
          continue;
        case "Semanal":
          const hojeSemanal = new Date();
          hojeSemanal.setHours(0, 0, 0, 0);
          const diaSemanaMap = {
            Domingo: 0, Segunda: 1, Terca: 2, Ter√ßa: 2, Quarta: 3, Quinta: 4, Sexta: 5, Sabado: 6,
          };
          const diaAlvo = diaSemanaMap[obrigacao.diaSemana];
          if (diaAlvo === undefined) {
            console.log(`‚ö†Ô∏è Dia da semana inv√°lido para obriga√ß√£o ${obrigacaoId}`);
            continue;
          }
          // Buscar todas as obriga√ß√µes j√° existentes para o per√≠odo, cliente e obriga√ß√£o
          const [existentesSemanal] = await db.query(`
            SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia, vencimento
            FROM obrigacoes_clientes
            WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? AND clienteId = ?
          `, [obrigacaoId, ano, mesInicio, mesFim, clienteId]);
          const existeSetSemanal = new Set(existentesSemanal.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}|${e.vencimento.toISOString().slice(0,10)}`));
          const novasSemanal = [];
          for (let mes = mesInicio; mes <= mesFim; mes++) {
            const diasNoMes = new Date(ano, mes, 0).getDate();
            for (let dia = 1; dia <= diasNoMes; dia++) {
              const data = new Date(ano, mes - 1, dia);
              data.setHours(0, 0, 0, 0);
              if (data < hojeSemanal) continue;
              if (data.getDay() !== diaAlvo) continue;
              const chave = `${clienteId}|${obrigacaoId}|${ano}|${mes}|${data.toISOString().slice(0,10)}`;
              if (existeSetSemanal.has(chave)) continue;
              // Calcular acao/meta
              const vencimento = data.toISOString().split("T")[0];
              const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
              const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
              const responsavelId = responsaveisIndividuaisMap.get(obrigacaoId) || responsaveisGlobaisMap.get(obrigacaoId) || null;
              novasSemanal.push([
                clienteId,
                obrigacaoId,
                obrigacao.nome,
                `Obrigacao ${obrigacao.nome} de ${String(mes).padStart(2, "0")}/${ano}`,
                'pendente',
                ano,
                mes,
                vencimento,
                responsavelId,
                acao,
                meta
              ]);
            }
          }
          if (novasSemanal.length) {
            const placeholders = novasSemanal.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(",");
            const flat = novasSemanal.flat();
            const [result] = await db.query(`
              INSERT INTO obrigacoes_clientes
              (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
              VALUES ${placeholders}
            `, flat);
            // Buscar os IDs inseridos
            const insertedIds = [];
            const [ultimos] = await db.query('SELECT id, clienteId FROM obrigacoes_clientes WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? AND clienteId = ?', [obrigacaoId, ano, mesInicio, mesFim, clienteId]);
            for (const row of ultimos) insertedIds.push({ id: row.id, clienteId: row.clienteId });
            
            // Popular obrigacoes_clientes_responsaveis para inser√ß√µes em lote (Semanal)
            console.log(`üîç Processando ${insertedIds.length} tarefas inseridas em lote (Semanal)`);
            for (const { id: obrigacaoClienteId, clienteId } of insertedIds) {
              console.log(`üîç Inserindo m√∫ltiplos respons√°veis para obrigacaoClienteId: ${obrigacaoClienteId}, clienteId: ${clienteId}`);
              
              // Buscar respons√°veis individuais do cliente
              const [multiResponsaveisIndividuais] = await db.query(`
                SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId = ?
              `, [obrigacaoId, clienteId]);
              
              // Buscar respons√°veis globais (clienteId = null)
              const [multiResponsaveisGlobais] = await db.query(`
                SELECT usuarioId FROM obrigacoes_responsaveis_cliente WHERE obrigacaoId = ? AND clienteId IS NULL
              `, [obrigacaoId]);
              
              console.log(`üîç Respons√°veis individuais encontrados para cliente ${clienteId}:`, multiResponsaveisIndividuais);
              console.log(`üîç Respons√°veis globais encontrados:`, multiResponsaveisGlobais);
              
              // Se h√° respons√°veis individuais, usar apenas eles
              // Se n√£o h√° individuais, usar os globais
              const responsaveisParaInserir = multiResponsaveisIndividuais.length > 0 
                ? multiResponsaveisIndividuais 
                : multiResponsaveisGlobais;
              
              if (responsaveisParaInserir.length > 0) {
                console.log(`üîç Inserindo ${responsaveisParaInserir.length} respons√°veis`);
                for (const resp of responsaveisParaInserir) {
                  console.log(`üîç Inserindo respons√°vel: ${resp.usuarioId}`);
                  await db.query(`
                    INSERT INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
                    VALUES (?, ?)
                  `, [obrigacaoClienteId, resp.usuarioId]);
                }
              } else {
                console.log(`üîç Nenhum respons√°vel encontrado para inserir`);
              }
            }
            
            // Clonar atividades base para cada nova obriga√ß√£o
            for (const { id, clienteId } of insertedIds) {
              await clonarAtividadesBase(clienteId, id, atividadesBase);
            }
          }
          continue;
        default: 
          console.log(`‚ö†Ô∏è Frequ√™ncia inv√°lida ou n√£o suportada para obriga√ß√£o ${obrigacaoId}: ${obrigacao.frequencia}`);
          continue;
      }

      // L√≥gica de fato gerador - define o ano e m√™s de refer√™ncia baseado no fato gerador
      const anoReferencia = calcularAnoReferencia(ano, obrigacao.fatoGerador);
      const tarefasParaCriar = [];
      
      for (const mesVencimento of meses) {
        // Calcular m√™s de refer√™ncia baseado no fato gerador
        let mesCompetencia = calcularMesReferencia(mesVencimento, obrigacao.fatoGerador);
        let anoCompetencia = anoReferencia;

        // Ajustar ano se necess√°rio quando o m√™s muda
        if (obrigacao.fatoGerador === 'M√™s anterior' && mesCompetencia === 12 && mesVencimento === 1) {
          anoCompetencia = anoReferencia - 1;
        } else if (obrigacao.fatoGerador === 'Pr√≥ximo m√™s' && mesCompetencia === 1 && mesVencimento === 12) {
          anoCompetencia = anoReferencia + 1;
        }
        
        const vencimento = calcularVencimento(
          ano, // ano de vencimento sempre √© o ano atual
          mesVencimento,
          obrigacao.vencimentoTipo,
          obrigacao.vencimentoDia,
          obrigacao.fatoGerador
        );
        
        // Calcular acao/meta
        const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
        const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
        
        tarefasParaCriar.push({
          clienteId,
          anoCalc: anoCompetencia, // ano de refer√™ncia baseado no fato gerador
          mesReferencia: mesCompetencia,
          vencimento,
          nomeObrigacao: `${obrigacao.nome} de ${String(mesCompetencia).padStart(2, "0")}/${anoCompetencia}`,
          acao,
          meta,
        });
      }
      
      for (let i = 0; i < tarefasParaCriar.length; i += MAX_PARALLEL) {
        const lote = tarefasParaCriar.slice(i, i + MAX_PARALLEL);
        await processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsaveisGlobaisMap.get(obrigacao.id), { geradas: tarefasGeradas, puladas: tarefasPuladas });
      }
    }

    console.log(`üìä Resumo: ${tarefasGeradas} tarefas geradas, ${tarefasPuladas} tarefas puladas (j√° existiam)`);
    res.status(200).json({ 
      ok: true, 
      mensagem: "Tarefas geradas com sucesso!", 
      resumo: {
        tarefasGeradas,
        tarefasPuladas
      }
    });
  } catch (err) {
    console.error("Erro ao gerar tarefas:", err);
    res.status(500).json({ erro: 'Erro ao gerar tarefas' });
  }
});

// ================= ATUALIZAR TAREFAS DOS CLIENTES =================

/**
 * GET verificar se h√° tarefas que podem ser atualizadas
 * Exemplo: GET /api/obrigacoes/:obrigacaoId/verificar-atualizacao-tarefas
 */
router.get('/:obrigacaoId/verificar-atualizacao-tarefas', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      'SELECT id, nome FROM obrigacoes WHERE id = ?',
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada' });
    }

    // Buscar atividades base atuais da obriga√ß√£o
    const [atividadesBase] = await db.query(`
      SELECT id, tipo, texto, descricao, tipoCancelamento, ordem, pdf_layout_id, titulo_documento
      FROM atividades_obrigacao 
      WHERE obrigacaoId = ? 
      ORDER BY ordem
    `, [obrigacaoId]);

    if (atividadesBase.length === 0) {
      return res.json({
        podeAtualizar: false,
        motivo: 'N√£o h√° atividades base configuradas para esta obriga√ß√£o'
      });
    }

    // Buscar obriga√ß√µes dos clientes onde TODAS as atividades est√£o intocadas
    // Se qualquer atividade foi mexida, a obriga√ß√£o inteira √© ignorada
    const [obrigacoesIntocadas] = await db.query(`
      SELECT oc.id as obrigacaoClienteId, oc.clienteId, c.nome as clienteNome,
             COUNT(oac.id) as totalAtividades,
             COUNT(CASE WHEN 
               oac.concluida = 0 
               AND oac.cancelada = 0
               AND oac.dataConclusao IS NULL
               AND oac.dataCancelamento IS NULL
               AND (oac.justificativa IS NULL OR oac.justificativa = '')
               AND (oac.anexo IS NULL OR oac.anexo = '')
               AND oac.concluidoPor IS NULL
             THEN 1 END) as atividadesIntocadas
      FROM obrigacoes_clientes oc
      JOIN obrigacoes_atividades_clientes oac ON oac.obrigacaoClienteId = oc.id
      JOIN clientes c ON oac.clienteId = c.id
      WHERE oc.obrigacaoId = ?
      GROUP BY oc.id, oc.clienteId, c.nome
      HAVING totalAtividades = atividadesIntocadas AND totalAtividades > 0
    `, [obrigacaoId]);

    const tarefasAtualizaveis = obrigacoesIntocadas;

    // Contar obriga√ß√µes dos clientes que t√™m pelo menos uma atividade modificada (ser√£o ignoradas)
    let obrigacoesIgnoradas = { total: 0 };
    if (tarefasAtualizaveis.length > 0) {
      const [[result]] = await db.query(`
        SELECT COUNT(DISTINCT oc.id) as total
        FROM obrigacoes_clientes oc
        JOIN obrigacoes_atividades_clientes oac ON oac.obrigacaoClienteId = oc.id
        WHERE oc.obrigacaoId = ?
          AND oc.id NOT IN (${tarefasAtualizaveis.map(() => '?').join(',')})
      `, [obrigacaoId, ...tarefasAtualizaveis.map(t => t.obrigacaoClienteId)]);
      obrigacoesIgnoradas = result;
    } else {
      // Se n√£o h√° tarefas atualiz√°veis, todas s√£o ignoradas
      const [[result]] = await db.query(`
        SELECT COUNT(DISTINCT oc.id) as total
        FROM obrigacoes_clientes oc
        JOIN obrigacoes_atividades_clientes oac ON oac.obrigacaoClienteId = oc.id
        WHERE oc.obrigacaoId = ?
      `, [obrigacaoId]);
      obrigacoesIgnoradas = result;
    }

    const tarefasIgnoradas = obrigacoesIgnoradas.total;

    // Detectar mudan√ßas nas atividades (compara√ß√£o simples)
    const mudancas = [];
    
    // Para simplificar, vamos apenas indicar que h√° atividades para replicar
    mudancas.push({
      tipo: 'Atualiza√ß√£o Dispon√≠vel',
      descricao: `${atividadesBase.length} atividade(s) base ser√£o replicadas para as tarefas n√£o modificadas`
    });

    if (tarefasAtualizaveis.length === 0) {
      return res.json({
        podeAtualizar: false,
        motivo: 'Todas as tarefas j√° foram modificadas pelos usu√°rios'
      });
    }

    res.json({
      podeAtualizar: true,
      resumo: {
        clientesAfetados: new Set(tarefasAtualizaveis.map(t => t.clienteId)).size,
        tarefasAtualizaveis: tarefasAtualizaveis.length * atividadesBase.length,
        tarefasIgnoradas: Math.max(0, tarefasIgnoradas)
      },
      mudancas,
      obrigacao: {
        id: obrigacao.id,
        nome: obrigacao.nome
      }
    });

  } catch (error) {
    console.error('Erro ao verificar atualiza√ß√µes de tarefas:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * POST executar atualiza√ß√£o das tarefas dos clientes
 * Exemplo: POST /api/obrigacoes/:obrigacaoId/atualizar-tarefas
 */
router.post('/:obrigacaoId/atualizar-tarefas', autenticarToken, async (req, res) => {
  const { obrigacaoId } = req.params;

  try {
    // Verificar se a obriga√ß√£o existe
    const [[obrigacao]] = await db.query(
      'SELECT id, nome FROM obrigacoes WHERE id = ?',
      [obrigacaoId]
    );

    if (!obrigacao) {
      return res.status(404).json({ error: 'Obriga√ß√£o n√£o encontrada' });
    }

    // Buscar atividades base atuais
    const [atividadesBase] = await db.query(`
      SELECT id, tipo, texto, descricao, tipoCancelamento, ordem, pdf_layout_id, titulo_documento
      FROM atividades_obrigacao 
      WHERE obrigacaoId = ? 
      ORDER BY ordem
    `, [obrigacaoId]);

    if (atividadesBase.length === 0) {
      return res.status(400).json({ error: 'N√£o h√° atividades base para replicar' });
    }

    // Buscar apenas obriga√ß√µes dos clientes onde TODAS as atividades est√£o intocadas
    // Se qualquer atividade foi mexida, a obriga√ß√£o inteira √© ignorada
    const [obrigacoesClientes] = await db.query(`
      SELECT oc.id as obrigacaoClienteId, oc.clienteId,
             COUNT(oac.id) as totalAtividades,
             COUNT(CASE WHEN 
               oac.concluida = 0 
               AND oac.cancelada = 0
               AND oac.dataConclusao IS NULL
               AND oac.dataCancelamento IS NULL
               AND (oac.justificativa IS NULL OR oac.justificativa = '')
               AND (oac.anexo IS NULL OR oac.anexo = '')
               AND oac.concluidoPor IS NULL
             THEN 1 END) as atividadesIntocadas
      FROM obrigacoes_clientes oc
      JOIN obrigacoes_atividades_clientes oac ON oac.obrigacaoClienteId = oc.id
      WHERE oc.obrigacaoId = ?
      GROUP BY oc.id, oc.clienteId
      HAVING totalAtividades = atividadesIntocadas AND totalAtividades > 0
    `, [obrigacaoId]);

    if (obrigacoesClientes.length === 0) {
      return res.json({
        success: true,
        mensagem: 'Nenhuma tarefa precisava ser atualizada. Todas j√° foram modificadas pelos usu√°rios.',
        clientesAfetados: 0,
        tarefasAtualizadas: 0
      });
    }

    let totalTarefasAtualizadas = 0;
    const clientesAfetados = new Set();

    // Processar cada obriga√ß√£o do cliente (j√° sabemos que TODAS as atividades est√£o intocadas)
    for (const obrigacaoCliente of obrigacoesClientes) {
      try {
        console.log(`üîÑ Atualizando obriga√ß√£o ${obrigacaoCliente.obrigacaoClienteId} do cliente ${obrigacaoCliente.clienteId}`);
        console.log(`   Total atividades: ${obrigacaoCliente.totalAtividades}, Intocadas: ${obrigacaoCliente.atividadesIntocadas}`);

        // 1. Remover TODAS as atividades desta obriga√ß√£o (j√° sabemos que est√£o intocadas)
        const [result] = await db.query(`
          DELETE FROM obrigacoes_atividades_clientes 
          WHERE obrigacaoClienteId = ?
        `, [obrigacaoCliente.obrigacaoClienteId]);

        const tarefasRemovidas = result.affectedRows;
        console.log(`üóëÔ∏è Removidas ${tarefasRemovidas} atividades antigas`);

        // 2. Recriar as atividades baseadas na estrutura atual
        if (tarefasRemovidas > 0) {
          const values = atividadesBase.map(atv => [
            obrigacaoCliente.clienteId,
            obrigacaoCliente.obrigacaoClienteId,
            atv.tipo,
            atv.texto,
            atv.descricao,
            atv.tipoCancelamento,
            atv.ordem,
          ]);

          const placeholders = values.map(() => "(?, ?, ?, ?, ?, ?, ?)").join(", ");
          const flatValues = values.flat();

          await db.query(`
            INSERT INTO obrigacoes_atividades_clientes
            (clienteId, obrigacaoClienteId, tipo, texto, descricao, tipoCancelamento, ordem)
            VALUES ${placeholders}
          `, flatValues);

          totalTarefasAtualizadas += atividadesBase.length;
          clientesAfetados.add(obrigacaoCliente.clienteId);

          console.log(`‚úÖ Inseridas ${atividadesBase.length} atividades atualizadas para cliente ${obrigacaoCliente.clienteId}, obriga√ß√£o ${obrigacaoCliente.obrigacaoClienteId}`);
        }

      } catch (error) {
        console.error(`‚ùå Erro ao atualizar tarefas para obriga√ß√£o cliente ${obrigacaoCliente.obrigacaoClienteId}:`, error);
        // Continuar com as outras obriga√ß√µes mesmo se uma falhar
      }
    }

    res.json({
      success: true,
      mensagem: `Tarefas atualizadas com sucesso! ${totalTarefasAtualizadas} atividades foram atualizadas para ${clientesAfetados.size} cliente(s).`,
      clientesAfetados: clientesAfetados.size,
      tarefasAtualizadas: totalTarefasAtualizadas,
      obrigacao: {
        id: obrigacao.id,
        nome: obrigacao.nome
      }
    });

  } catch (error) {
    console.error('Erro ao atualizar tarefas dos clientes:', error);
    res.status(500).json({ error: 'Erro interno do servidor ao atualizar tarefas' });
  }
});

// Rota para prorrogar tarefas
router.post("/prorrogar-tarefas", autenticarToken, async (req, res) => {
  try {
    const {
      empresaId,
      obrigacaoId,
      alterarAcao,
      alterarMeta,
      alterarVencimento,
      novaAcao,
      novaMeta,
      novoVencimento,
      motivo,
      idsSelecionados
    } = req.body;

    if (!empresaId || !obrigacaoId || !idsSelecionados || idsSelecionados.length === 0) {
      return res.status(400).json({ error: "Dados obrigat√≥rios n√£o fornecidos" });
    }

    if (!alterarAcao && !alterarMeta && !alterarVencimento) {
      return res.status(400).json({ error: "Pelo menos um campo deve ser alterado" });
    }

    if (!motivo || motivo.trim() === "") {
      return res.status(400).json({ error: "Motivo √© obrigat√≥rio" });
    }

    const token = req.headers.authorization?.split(" ")[1];
    if (!token) {
      return res.status(401).json({ error: "Token n√£o fornecido" });
    }

    // Decodificar token para obter usu√°rio
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const usuarioId = decoded.id;

    // Iniciar transa√ß√£o
    const connection = await db.getConnection();
    await connection.beginTransaction();

    try {
      for (const obrigacaoClienteId of idsSelecionados) {
        // Atualizar campos na tabela obrigacoes_clientes
        let updateFields = [];
        let updateValues = [];

        if (alterarAcao && novaAcao) {
          updateFields.push("acao = ?");
          updateValues.push(novaAcao);
        }

        if (alterarMeta && novaMeta) {
          updateFields.push("meta = ?");
          updateValues.push(novaMeta);
        }

        if (alterarVencimento && novoVencimento) {
          updateFields.push("vencimento = ?");
          updateValues.push(novoVencimento);
        }

        if (updateFields.length > 0) {
          const updateQuery = `
            UPDATE obrigacoes_clientes 
            SET ${updateFields.join(", ")}
            WHERE id = ?
          `;
          
          await connection.execute(updateQuery, [...updateValues, obrigacaoClienteId]);
        }

        // Adicionar coment√°rio na tabela comentarios_obrigacao
        const comentarioQuery = `
          INSERT INTO comentarios_obrigacao 
          (obrigacaoid, comentario, tipo, usuarioId, criadoEm)
          VALUES (?, ?, 'usuario', ?, NOW())
        `;
        
        await connection.execute(comentarioQuery, [
          obrigacaoClienteId,
          `Motivo de Prorroga√ß√£o da Tarefa: ${motivo}`,
          usuarioId
        ]);
      }

      await connection.commit();
      connection.release();

      res.json({ 
        success: true, 
        message: `${idsSelecionados.length} tarefa(s) prorrogada(s) com sucesso` 
      });

    } catch (error) {
      await connection.rollback();
      connection.release();
      throw error;
    }

  } catch (error) {
    console.error("Erro ao prorrogar tarefas:", error);
    res.status(500).json({ error: "Erro interno ao prorrogar tarefas" });
  }
});

// üî∂ POST /api/obrigacoes/gerar-tarefas-lote-grupo - Gerar tarefas em lote para grupo
router.post("/gerar-tarefas-lote-grupo", autenticarToken, async (req, res) => {
  const { grupoId, ano, mesInicio, mesFim, selectedPairs } = req.body;

  // Fun√ß√£o otimizada para inserir atividades base em batch
  async function clonarAtividadesBaseBatch(obrigacaoClienteIds, atividadesBase) {
    console.log(`üîç clonarAtividadesBaseBatch: obrigacaoClienteIds.length=${obrigacaoClienteIds.length}, atividadesBase.length=${atividadesBase.length}`);
    
    if (atividadesBase.length === 0 || obrigacaoClienteIds.length === 0) {
      console.log(`‚ö†Ô∏è Pulando clonagem: atividadesBase=${atividadesBase.length}, obrigacaoClienteIds=${obrigacaoClienteIds.length}`);
      return;
    }
    
    // Verificar atividades existentes em batch
    const [atividadesExistentes] = await db.query(`
      SELECT DISTINCT clienteId, obrigacaoClienteId FROM obrigacoes_atividades_clientes 
      WHERE obrigacaoClienteId IN (${obrigacaoClienteIds.map(item => item.id).map(() => '?').join(',')})
    `, obrigacaoClienteIds.map(item => item.id));
    
    console.log(`üîç Atividades existentes encontradas: ${atividadesExistentes.length}`);
    
    const existentesSet = new Set(atividadesExistentes.map(e => `${e.clienteId}|${e.obrigacaoClienteId}`));
    
    // Preparar inser√ß√µes em batch
    const values = [];
    for (const { clienteId, id: obrigacaoClienteId } of obrigacaoClienteIds) {
      const chave = `${clienteId}|${obrigacaoClienteId}`;
      if (!existentesSet.has(chave)) {
        console.log(`üîç Inserindo atividades para cliente ${clienteId}, obrigacaoClienteId ${obrigacaoClienteId}`);
        for (const atv of atividadesBase) {
          values.push([clienteId, obrigacaoClienteId, atv.tipo, atv.texto, atv.descricao, atv.tipoCancelamento, atv.ordem]);
        }
      } else {
        console.log(`‚ö†Ô∏è Atividades j√° existem para cliente ${clienteId}, obrigacaoClienteId ${obrigacaoClienteId}`);
      }
    }
    
    console.log(`üîç Total de valores para inserir: ${values.length}`);
    
    if (values.length > 0) {
    const placeholders = values.map(() => "(?, ?, ?, ?, ?, ?, ?)").join(", ");
    const flatValues = values.flat();
    await db.query(`
      INSERT INTO obrigacoes_atividades_clientes
      (clienteId, obrigacaoClienteId, tipo, texto, descricao, tipoCancelamento, ordem)
      VALUES ${placeholders}
    `, flatValues);
      console.log(`‚úÖ Inseridas ${values.length} atividades em batch`);
    } else {
      console.log(`‚ö†Ô∏è Nenhuma atividade para inserir`);
    }
  }

  function calcularAnoReferencia(anoAtual, fatoGerador) {
    switch (fatoGerador) {
      case "6 anos anteriores": return anoAtual - 6;
      case "5 anos anteriores": return anoAtual - 5;
      case "4 anos anteriores": return anoAtual - 4;
      case "3 anos anteriores": return anoAtual - 3;
      case "2 anos anteriores": return anoAtual - 2;
      case "Ano anterior": return anoAtual - 1;
      case "Pr√≥ximo ano": return anoAtual + 1;
      case "Mesmo ano":
      default: return anoAtual;
    }
  }

  function calcularMesReferencia(mesVencimento, fatoGerador) {
    switch (fatoGerador) {
      case "M√™s anterior":
        const mesAnterior = mesVencimento - 1;
        return mesAnterior < 1 ? 12 : mesAnterior;
      case "Pr√≥ximo m√™s":
        const proximoMes = mesVencimento + 1;
        return proximoMes > 12 ? 1 : proximoMes;
      case "Mesmo m√™s":
      default:
        return mesVencimento;
    }
  }

  const MAX_PARALLEL = 20; // Aumentado para melhor performance
  
  // Fun√ß√£o otimizada para inserir respons√°veis em batch
  async function inserirResponsaveisBatch(obrigacaoClienteIds, obrigacaoId, responsaveisIndividuaisMap, responsaveisGlobais) {
    if (obrigacaoClienteIds.length === 0) return;
    
    // Buscar todos os respons√°veis individuais de uma vez
    const clientesIds = [...new Set(obrigacaoClienteIds.map(item => item.clienteId))];
    const [responsaveisIndividuais] = await db.query(`
      SELECT clienteId, usuarioId FROM obrigacoes_responsaveis_cliente 
      WHERE obrigacaoId = ? AND clienteId IN (${clientesIds.map(() => '?').join(',')})
    `, [obrigacaoId, ...clientesIds]);
    
    const responsaveisIndividuaisMapBatch = new Map();
    for (const r of responsaveisIndividuais) {
      responsaveisIndividuaisMapBatch.set(r.clienteId, r.usuarioId);
    }
    
    // Preparar inser√ß√µes de respons√°veis em batch
    const responsaveisValues = [];
    for (const { id: obrigacaoClienteId, clienteId } of obrigacaoClienteIds) {
      const responsavelIndividual = responsaveisIndividuaisMapBatch.get(clienteId);
      const responsaveisParaInserir = responsavelIndividual ? [{ usuarioId: responsavelIndividual }] : responsaveisGlobais;
      
      for (const resp of responsaveisParaInserir) {
        responsaveisValues.push([obrigacaoClienteId, resp.usuarioId]);
      }
    }
    
    if (responsaveisValues.length > 0) {
      const placeholders = responsaveisValues.map(() => "(?, ?)").join(", ");
      const flatValues = responsaveisValues.flat();
      await db.query(`
        INSERT IGNORE INTO obrigacoes_clientes_responsaveis (obrigacaoClienteId, usuarioId)
        VALUES ${placeholders}
      `, flatValues);
    }
  }

  async function processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsaveisGlobais) {
    // Verificar existentes em batch
    const existentesConditions = lote.map(() => "(clienteId = ? AND obrigacaoId = ? AND ano_referencia = ? AND mes_referencia = ?)").join(" OR ");
    const existentesParams = lote.flatMap(item => [item.clienteId, obrigacao.id, item.anoCalc, item.mesReferencia]);
    
    const [existentes] = await db.query(`
      SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia FROM obrigacoes_clientes
      WHERE ${existentesConditions}
    `, existentesParams);
    
    const existentesSet = new Set(existentes.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}`));
    
    // Filtrar apenas os que n√£o existem
    const loteFiltrado = lote.filter(item => 
      !existentesSet.has(`${item.clienteId}|${obrigacao.id}|${item.anoCalc}|${item.mesReferencia}`)
    );
    
    if (loteFiltrado.length === 0) return;
    
    // Inserir tarefas em batch
    const tarefasValues = loteFiltrado.map(item => [
      item.clienteId,
      obrigacao.id,
      obrigacao.nome,
      `Obriga√ß√£o ${obrigacao.nome} de ${String(item.mesReferencia).padStart(2, "0")}/${item.anoCalc}`,
      'pendente',
      item.anoCalc,
      item.mesReferencia,
      item.vencimento,
      responsaveisIndividuaisMap.get(item.clienteId) || null,
      item.acao,
      item.meta
    ]);
    
    console.log(`üîç Inserindo ${tarefasValues.length} tarefas no banco para obriga√ß√£o ${obrigacao.id}`);
    
    const placeholders = tarefasValues.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(", ");
    const flatValues = tarefasValues.flat();
    
    const [insertResult] = await db.query(`
      INSERT INTO obrigacoes_clientes
      (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
      VALUES ${placeholders}
    `, flatValues);
    
    console.log(`‚úÖ Tarefas inseridas com sucesso! InsertId: ${insertResult.insertId}, AffectedRows: ${insertResult.affectedRows}`);
    
    // Buscar IDs inseridos
    const [inseridos] = await db.query(`
      SELECT id, clienteId FROM obrigacoes_clientes 
      WHERE obrigacaoId = ? AND clienteId IN (${loteFiltrado.map(() => '?').join(',')})
      ORDER BY id DESC LIMIT ?
    `, [obrigacao.id, ...loteFiltrado.map(item => item.clienteId), loteFiltrado.length]);
    
    // Inserir respons√°veis em batch
    await inserirResponsaveisBatch(inseridos, obrigacao.id, responsaveisIndividuaisMap, responsaveisGlobais);
    
    // Inserir atividades em batch
    await clonarAtividadesBaseBatch(inseridos, atividadesBase);
  }

  try {
    if (!grupoId || !ano || !mesInicio || !mesFim || !selectedPairs || !Array.isArray(selectedPairs)) {
      return res.status(400).json({ 
        erro: 'Todos os campos s√£o obrigat√≥rios: grupoId, ano, mesInicio, mesFim, selectedPairs' 
      });
    }

    // Buscar obriga√ß√µes do grupo com respons√°veis
    const [obrigacoesGrupo] = await db.query(`
      SELECT DISTINCT o.id, o.nome, o.frequencia, o.diaSemana, o.vencimentoTipo, o.vencimentoDia, 
             o.fatoGerador, o.acaoQtdDias, o.acaoTipoDias, o.metaQtdDias, o.metaTipoDias
      FROM obrigacoes o
      INNER JOIN obrigacoes_responsaveis_cliente orc ON o.id = orc.obrigacaoId
      WHERE o.empresaId = (SELECT empresaId FROM clientes_grupos_vinculo WHERE grupoId = ? LIMIT 1)
    `, [grupoId]);

    if (obrigacoesGrupo.length === 0) {
      return res.status(404).json({ 
        erro: 'Nenhuma obriga√ß√£o com respons√°veis encontrada para este grupo' 
      });
    }

    // Agrupar pares por obriga√ß√£o para processar em lote
    const obrigacoesMap = new Map();
    for (const pair of selectedPairs) {
      const [clienteId, obrigacaoId] = pair.split(':').map(Number);
      if (!obrigacoesMap.has(obrigacaoId)) {
        obrigacoesMap.set(obrigacaoId, []);
      }
      obrigacoesMap.get(obrigacaoId).push(clienteId);
    }

    // Processar cada obriga√ß√£o com todos os seus clientes
    const tarefasGeradas = [];

    for (const [obrigacaoId, clientesIds] of obrigacoesMap) {
      // Buscar dados da obriga√ß√£o
      const [obrigacoes] = await db.query(`SELECT * FROM obrigacoes WHERE id = ?`, [obrigacaoId]);
      const obrigacao = obrigacoes[0];
      if (!obrigacao) continue;

      const [atividadesBase] = await db.query(`SELECT * FROM atividades_obrigacao WHERE obrigacaoId = ?`, [obrigacaoId]);
      console.log(`üîç Atividades base encontradas para obrigacaoId ${obrigacaoId}: ${atividadesBase.length}`);

          // Buscar respons√°veis individuais e globais em uma √∫nica query
    const [responsaveis] = await db.query(`
      SELECT clienteId, usuarioId
      FROM obrigacoes_responsaveis_cliente
      WHERE obrigacaoId = ? AND (clienteId IN (${clientesIds.map(() => '?').join(',')}) OR clienteId IS NULL)
      `, [obrigacaoId, ...clientesIds]);
      
      const responsaveisIndividuaisMap = new Map();
    let responsaveisGlobais = [];
    
    for (const r of responsaveis) {
      if (r.clienteId === null) {
        responsaveisGlobais.push({ usuarioId: r.usuarioId });
      } else {
        responsaveisIndividuaisMap.set(r.clienteId, r.usuarioId);
      }
    }

      // Buscar todas as particularidades em uma √∫nica query
      const [particularidades] = await db.query(`
        SELECT tipo, particularidadeId FROM obrigacoes_particularidades WHERE obrigacaoId = ?
      `, [obrigacaoId]);
      
      const partE = particularidades.filter(p => p.tipo === 'E').map(p => p.particularidadeId);
      const partOU = particularidades.filter(p => p.tipo === 'OU').map(p => p.particularidadeId);
      const partEXCETO = particularidades.filter(p => p.tipo === 'EXCETO').map(p => p.particularidadeId);

      // Verificar quais clientes atende √†s particularidades
      const [respostasClientes] = await db.query(`
        SELECT cr.clienteId, er.particularidadeId
        FROM cliente_respostas cr
        JOIN enquete_respostas er ON cr.respostaId = er.id
        WHERE cr.clienteId IN (${clientesIds.map(() => '?').join(',')})
      `, clientesIds);

      const clientesValidos = [];
      const clienteParticularidadesMap = new Map();
      
      // Agrupar particularidades por cliente
      for (const resp of respostasClientes) {
        if (!clienteParticularidadesMap.has(resp.clienteId)) {
          clienteParticularidadesMap.set(resp.clienteId, new Set());
        }
        clienteParticularidadesMap.get(resp.clienteId).add(resp.particularidadeId);
      }

      // Verificar cada cliente
      for (const clienteId of clientesIds) {
        const clienteParticularidades = clienteParticularidadesMap.get(clienteId) || new Set();
        const atendeTodasE = partE.every(pid => clienteParticularidades.has(pid));
        const atendeAlgumaOU = partOU.length === 0 || partOU.some(pid => clienteParticularidades.has(pid));
        const temAlgumExceto = partEXCETO.length > 0 && partEXCETO.some(pid => clienteParticularidades.has(pid));
        
        if (atendeTodasE && atendeAlgumaOU && !temAlgumExceto) {
          clientesValidos.push(clienteId);
        }
      }

      console.log(`üîç Clientes v√°lidos para obriga√ß√£o ${obrigacaoId}: ${clientesValidos.length}`);
      
      if (clientesValidos.length === 0) {
        console.log(`‚ö†Ô∏è Nenhum cliente v√°lido para obriga√ß√£o ${obrigacaoId}, pulando...`);
        continue;
      }

      // Frequ√™ncias
      let meses = [];
      
      console.log(`üîç Processando obriga√ß√£o ${obrigacaoId} com frequ√™ncia: ${obrigacao.frequencia}`);
      console.log(`üîç Per√≠odo: ${mesInicio} a ${mesFim} do ano ${ano}`);
      
      switch (obrigacao.frequencia) {
        case "Mensal":        
          console.log(`üîç PROCESSANDO OBRIGA√á√ÉO MENSAL ${obrigacaoId}`);
          
          // L√≥gica espec√≠fica para obriga√ß√µes mensais (copiada do gerar-atividades)
          const anoReferenciaMensal = calcularAnoReferencia(ano, obrigacao.fatoGerador);
          const tarefasParaCriarMensal = [];
          
          console.log(`üîç Ano de refer√™ncia: ${anoReferenciaMensal} (fato gerador: ${obrigacao.fatoGerador})`);
          
          // Gerar meses de vencimento
          for (let i = mesInicio; i <= mesFim; i++) meses.push(i);
          console.log(`üîç Meses de vencimento: ${meses.join(', ')}`);
          
          for (const mesVencimento of meses) {
            console.log(`üîç Processando m√™s de vencimento: ${mesVencimento}`);
            
            // Calcular m√™s de refer√™ncia baseado no fato gerador
            let mesCompetencia = calcularMesReferencia(mesVencimento, obrigacao.fatoGerador);
            let anoCompetencia = anoReferenciaMensal;
        
            // Ajustar ano se necess√°rio quando o m√™s muda
            if (obrigacao.fatoGerador === 'M√™s anterior' && mesCompetencia === 12 && mesVencimento === 1) {
              anoCompetencia = anoReferenciaMensal - 1;
            } else if (obrigacao.fatoGerador === 'Pr√≥ximo m√™s' && mesCompetencia === 1 && mesVencimento === 12) {
              anoCompetencia = anoReferenciaMensal + 1;
            }
            
            console.log(`üîç M√™s compet√™ncia: ${mesCompetencia}, Ano compet√™ncia: ${anoCompetencia}`);
            
            const vencimento = calcularVencimento(
              ano, // ano de vencimento sempre √© o ano atual
              mesVencimento,
              obrigacao.vencimentoTipo,
              obrigacao.vencimentoDia,
              obrigacao.fatoGerador
            );
            
            console.log(`üîç Vencimento: ${vencimento}`);
            
            // Calcular acao/meta
            const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
            const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
            
            for (const clienteId of clientesValidos) {
              const tarefa = {
                clienteId,
                anoCalc: anoCompetencia,
                mesReferencia: mesCompetencia,
                vencimento,
                nomeObrigacao: `${obrigacao.nome} de ${String(mesCompetencia).padStart(2, "0")}/${anoCompetencia}`,
                acao,
                meta,
              };
              
              console.log(`üîç Tarefa mensal criada:`, tarefa);
              tarefasParaCriarMensal.push(tarefa);
            }
          }
          
          console.log(`üîç Total de tarefas mensais a criar: ${tarefasParaCriarMensal.length}`);
          
          if (tarefasParaCriarMensal.length > 0) {
            console.log(`üîç Processando ${tarefasParaCriarMensal.length} tarefas mensais em lotes de ${MAX_PARALLEL}`);
            for (let i = 0; i < tarefasParaCriarMensal.length; i += MAX_PARALLEL) {
              const lote = tarefasParaCriarMensal.slice(i, i + MAX_PARALLEL);
              console.log(`üîç Processando lote mensal ${Math.floor(i/MAX_PARALLEL) + 1} com ${lote.length} tarefas`);
              await processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsaveisGlobais);
            }
          }
          
          console.log(`üîç FINALIZANDO obriga√ß√£o mensal ${obrigacaoId} - ${tarefasParaCriarMensal.length} tarefas criadas`);
          tarefasGeradas.push({ obrigacaoId, clientesValidos, quantidade: tarefasParaCriarMensal.length });
          continue;
        case "Bimestral":     
          for (let i = mesInicio; i <= mesFim; i += 2) meses.push(i); 
          // N√£o fazer break aqui - deixar continuar para o default
        case "Trimestral":
        case "Trimestral 2 Cotas":
        case "Trimestral 3 Cotas": 
          for (let i = mesInicio; i <= mesFim; i += 3) meses.push(i); 
          // N√£o fazer break aqui - deixar continuar para o default
        case "Quadrimestral": 
          for (let i = mesInicio; i <= mesFim; i += 4) meses.push(i); 
          // N√£o fazer break aqui - deixar continuar para o default
        case "Semestral":     
          for (let i = mesInicio; i <= mesFim; i += 6) meses.push(i); 
          // N√£o fazer break aqui - deixar continuar para o default
        case "Anual":
          // üéØ CORRE√á√ÉO: Obriga√ß√µes anuais devem usar o campo diaSemana como m√™s
          const mesAnual3 = obterMesDoDiaSemana(obrigacao.diaSemana);
          if (mesAnual3) {
            // L√≥gica inteligente: verificar se o m√™s ainda cabe no ano atual
            const mesAtual3 = new Date().getMonth() + 1; // M√™s atual (1-12)
            
            if (mesAnual3 >= mesInicio && mesAnual3 <= mesFim) {
              // M√™s est√° dentro do per√≠odo selecionado
              meses = [mesAnual3];
              console.log(`üìå Obriga√ß√£o anual configurada para m√™s: ${mesAnual3} (${obrigacao.diaSemana}) - dentro do per√≠odo`);
            } else if (mesAnual3 < mesAtual3 && mesInicio <= 12) {
              // M√™s j√° passou no ano atual, mas usu√°rio pode querer gerar para o pr√≥ximo ano
              const mesProximoAno3 = mesAnual3;
              if (mesProximoAno3 >= 1 && mesProximoAno3 <= 12) {
                meses = [mesProximoAno3];
                console.log(`üìå Obriga√ß√£o anual configurada para m√™s: ${mesProximoAno3} (${obrigacao.diaSemana}) - pr√≥ximo ano`);
              } else {
                meses = [];
                console.log(`‚ö†Ô∏è M√™s anual ${mesAnual3} (${obrigacao.diaSemana}) n√£o pode ser processado`);
              }
            } else {
              meses = [];
              console.log(`‚ö†Ô∏è M√™s anual ${mesAnual3} (${obrigacao.diaSemana}) fora do per√≠odo ${mesInicio}-${mesFim}`);
            }
          } else {
            console.log(`‚ö†Ô∏è M√™s anual inv√°lido: ${obrigacao.diaSemana}`);
            meses = [];
          }
          break;
        case "Esporadica":    
          meses = [mesInicio]; 
          // N√£o fazer break aqui - deixar continuar para o default
        case "Di√°rio":
          const hoje = new Date();
          hoje.setHours(0, 0, 0, 0);
          // Buscar todas as obriga√ß√µes j√° existentes para o per√≠odo, todos os clientes e obriga√ß√£o
          const [existentesDiario] = await db.query(`
            SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia, vencimento
            FROM obrigacoes_clientes
            WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ?
              AND clienteId IN (${clientesValidos.map(() => '?').join(',')})
          `, [obrigacaoId, ano, mesInicio, mesFim, ...clientesValidos]);
          const existeSetDiario = new Set(existentesDiario.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}|${e.vencimento.toISOString().slice(0,10)}`));
          const novasDiario = [];
          
          // Processar cada cliente v√°lido
          for (const clienteId of clientesValidos) {
            for (let mes = mesInicio; mes <= mesFim; mes++) {
              const diasNoMes = new Date(ano, mes, 0).getDate();
              for (let dia = 1; dia <= diasNoMes; dia++) {
                const data = new Date(ano, mes - 1, dia);
                data.setHours(0, 0, 0, 0);
                if (data < hoje) continue;
                const weekday = data.getDay();
                if (weekday === 0 || weekday === 6) continue;
                const chave = `${clienteId}|${obrigacaoId}|${ano}|${mes}|${data.toISOString().slice(0,10)}`;
                if (existeSetDiario.has(chave)) continue;
                // Calcular acao/meta
                const vencimento = data.toISOString().split("T")[0];
                const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
                const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
                const responsavelId = responsaveisIndividuaisMap.get(clienteId) || responsavelGlobalId || null;
                novasDiario.push([
                  clienteId,
                  obrigacaoId,
                  obrigacao.nome,
                  `Obrigacao ${obrigacao.nome} de ${String(mes).padStart(2, "0")}/${ano}`,
                  'pendente',
                  ano,
                  mes,
                  vencimento,
                  responsavelId,
                  acao,
                  meta
                ]);
              }
            }
          }
          if (novasDiario.length) {
            const placeholders = novasDiario.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(",");
            const flat = novasDiario.flat();
            const [result] = await db.query(`
              INSERT INTO obrigacoes_clientes
              (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
              VALUES ${placeholders}
            `, flat);
            // Buscar os IDs inseridos para todos os clientes v√°lidos
            const [ultimos] = await db.query(`
              SELECT id, clienteId FROM obrigacoes_clientes 
              WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? 
              AND clienteId IN (${clientesValidos.map(() => '?').join(',')})
            `, [obrigacaoId, ano, mesInicio, mesFim, ...clientesValidos]);
            
            const insertedIds = ultimos.map(row => ({ id: row.id, clienteId: row.clienteId }));
              
            // Inserir respons√°veis e atividades em batch
            await inserirResponsaveisBatch(insertedIds, obrigacaoId, responsaveisIndividuaisMap, responsaveisGlobais);
            await clonarAtividadesBaseBatch(insertedIds, atividadesBase);
            }
          tarefasGeradas.push({ obrigacaoId, clientesValidos, quantidade: novasDiario.length });
          continue;
        case "Semanal":
          const hojeSemanal = new Date();
          hojeSemanal.setHours(0, 0, 0, 0);
          const diaSemanaMap = {
            Domingo: 0, Segunda: 1, Terca: 2, Ter√ßa: 2, Quarta: 3, Quinta: 4, Sexta: 5, Sabado: 6,
          };
          const diaAlvo = diaSemanaMap[obrigacao.diaSemana];
          if (diaAlvo === undefined) continue;
          // Buscar todas as obriga√ß√µes j√° existentes para o per√≠odo, todos os clientes e obriga√ß√£o
          const [existentesSemanal] = await db.query(`
            SELECT clienteId, obrigacaoId, ano_referencia, mes_referencia, vencimento
            FROM obrigacoes_clientes
            WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ?
              AND clienteId IN (${clientesValidos.map(() => '?').join(',')})
          `, [obrigacaoId, ano, mesInicio, mesFim, ...clientesValidos]);
          const existeSetSemanal = new Set(existentesSemanal.map(e => `${e.clienteId}|${e.obrigacaoId}|${e.ano_referencia}|${e.mes_referencia}|${e.vencimento.toISOString().slice(0,10)}`));
          const novasSemanal = [];
          
          // Processar cada cliente v√°lido
          for (const clienteId of clientesValidos) {
            for (let mes = mesInicio; mes <= mesFim; mes++) {
              const diasNoMes = new Date(ano, mes, 0).getDate();
              for (let dia = 1; dia <= diasNoMes; dia++) {
                const data = new Date(ano, mes - 1, dia);
                data.setHours(0, 0, 0, 0);
                if (data < hojeSemanal) continue;
                if (data.getDay() !== diaAlvo) continue;
                const chave = `${clienteId}|${obrigacaoId}|${ano}|${mes}|${data.toISOString().slice(0,10)}`;
                if (existeSetSemanal.has(chave)) continue;
                // Calcular acao/meta
                const vencimento = data.toISOString().split("T")[0];
                const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
                const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
                const responsavelId = responsaveisIndividuaisMap.get(clienteId) || responsavelGlobalId || null;
                novasSemanal.push([
                  clienteId,
                  obrigacaoId,
                  obrigacao.nome,
                  `Obrigacao ${obrigacao.nome} de ${String(mes).padStart(2, "0")}/${ano}`,
                  'pendente',
                  ano,
                  mes,
                  vencimento,
                  responsavelId,
                  acao,
                  meta
                ]);
              }
            }
          }
          if (novasSemanal.length) {
            const placeholders = novasSemanal.map(() => "(?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)").join(",");
            const flat = novasSemanal.flat();
            const [result] = await db.query(`
              INSERT INTO obrigacoes_clientes
              (clienteId, obrigacaoId, nome, descricao, status, ano_referencia, mes_referencia, vencimento, dataCriacao, responsavelId, acao, meta)
              VALUES ${placeholders}
            `, flat);
            // Buscar os IDs inseridos para todos os clientes v√°lidos
            const [ultimos] = await db.query(`
              SELECT id, clienteId FROM obrigacoes_clientes 
              WHERE obrigacaoId = ? AND ano_referencia = ? AND mes_referencia BETWEEN ? AND ? 
              AND clienteId IN (${clientesValidos.map(() => '?').join(',')})
            `, [obrigacaoId, ano, mesInicio, mesFim, ...clientesValidos]);
            
            const insertedIds = ultimos.map(row => ({ id: row.id, clienteId: row.clienteId }));
              
            // Inserir respons√°veis e atividades em batch
            await inserirResponsaveisBatch(insertedIds, obrigacaoId, responsaveisIndividuaisMap, responsaveisGlobais);
            await clonarAtividadesBaseBatch(insertedIds, atividadesBase);
            }
          tarefasGeradas.push({ obrigacaoId, clientesValidos, quantidade: novasSemanal.length });
          continue;
        default:
          // Para frequ√™ncias que n√£o s√£o Di√°rio ou Semanal (Mensal, Bimestral, etc.)
          console.log(`üîç ENTRANDO NO DEFAULT - Obriga√ß√£o ${obrigacaoId}`);
          console.log(`üîç Meses a processar para obriga√ß√£o ${obrigacaoId}: ${meses.length}`);
          console.log(`üîç Array de meses:`, meses);
          
          if (meses.length === 0) {
            console.log(`‚ö†Ô∏è Nenhum m√™s para processar na obriga√ß√£o ${obrigacaoId}, pulando...`);
            continue;
          }

          // L√≥gica de fato gerador - define o ano e m√™s de refer√™ncia baseado no fato gerador
          const anoReferencia = calcularAnoReferencia(ano, obrigacao.fatoGerador);
          const tarefasParaCriar = [];
          
          console.log(`üîç Ano de refer√™ncia calculado: ${anoReferencia} (fato gerador: ${obrigacao.fatoGerador})`);
          console.log(`üîç Processando ${clientesValidos.length} clientes para ${meses.length} meses`);
          
          // Processar cada cliente v√°lido
          for (const clienteId of clientesValidos) {
            console.log(`üîç Processando cliente ${clienteId}`);
            for (const mesVencimento of meses) {
              console.log(`üîç Processando m√™s de vencimento: ${mesVencimento}`);
              
              // Calcular m√™s de refer√™ncia baseado no fato gerador
              let mesCompetencia = calcularMesReferencia(mesVencimento, obrigacao.fatoGerador);
              let anoCompetencia = anoReferencia;
          
              // Ajustar ano se necess√°rio quando o m√™s muda
              if (obrigacao.fatoGerador === 'M√™s anterior' && mesCompetencia === 12 && mesVencimento === 1) {
                anoCompetencia = anoReferencia - 1;
              } else if (obrigacao.fatoGerador === 'Pr√≥ximo m√™s' && mesCompetencia === 1 && mesVencimento === 12) {
                anoCompetencia = anoReferencia + 1;
              }
              
              console.log(`üîç M√™s de compet√™ncia: ${mesCompetencia}, Ano de compet√™ncia: ${anoCompetencia}`);
              
              const vencimento = calcularVencimento(
                ano, // ano de vencimento sempre √© o ano atual
                mesVencimento,
                obrigacao.vencimentoTipo,
                obrigacao.vencimentoDia,
                obrigacao.fatoGerador
              );
              
              console.log(`üîç Vencimento calculado: ${vencimento}`);
              
              // Calcular acao/meta
              const meta = obrigacao.metaQtdDias != null && obrigacao.metaTipoDias ? subtrairDias(vencimento, obrigacao.metaQtdDias, obrigacao.metaTipoDias).toISOString().split("T")[0] : null;
              const acao = obrigacao.acaoQtdDias != null && obrigacao.acaoTipoDias ? subtrairDias(meta, obrigacao.acaoQtdDias, obrigacao.acaoTipoDias).toISOString().split("T")[0] : null;
              
              const tarefa = {
                clienteId,
                anoCalc: anoCompetencia, // ano de refer√™ncia baseado no fato gerador
                mesReferencia: mesCompetencia,
                vencimento,
                nomeObrigacao: `${obrigacao.nome} de ${String(mesCompetencia).padStart(2, "0")}/${anoCompetencia}`,
                acao,
                meta,
              };
              
              console.log(`üîç Tarefa criada:`, tarefa);
              tarefasParaCriar.push(tarefa);
            }
          }
          
          console.log(`üîç Tarefas a criar para obriga√ß√£o ${obrigacaoId}: ${tarefasParaCriar.length}`);
          
          if (tarefasParaCriar.length > 0) {
            console.log(`üîç Processando ${tarefasParaCriar.length} tarefas em lotes de ${MAX_PARALLEL}`);
            for (let i = 0; i < tarefasParaCriar.length; i += MAX_PARALLEL) {
              const lote = tarefasParaCriar.slice(i, i + MAX_PARALLEL);
              console.log(`üîç Processando lote ${Math.floor(i/MAX_PARALLEL) + 1} com ${lote.length} tarefas`);
              await processarLote(lote, atividadesBase, obrigacao, responsaveisIndividuaisMap, responsaveisGlobais);
            }
          } else {
            console.log(`‚ö†Ô∏è Nenhuma tarefa para criar na obriga√ß√£o ${obrigacaoId}`);
          }
          
          console.log(`üîç FINALIZANDO obriga√ß√£o ${obrigacaoId} - ${tarefasParaCriar.length} tarefas criadas`);
          tarefasGeradas.push({ obrigacaoId, clientesValidos, quantidade: tarefasParaCriar.length });
          continue;
        }
    }

    const totalTarefas = tarefasGeradas.reduce((sum, item) => sum + item.quantidade, 0);
    
    console.log(`üìä RESUMO FINAL:`);
    console.log(`üìä Total de tarefas geradas: ${totalTarefas}`);
    console.log(`üìä Combina√ß√µes processadas: ${tarefasGeradas.length}`);
    console.log(`üìä Detalhes:`, tarefasGeradas);
    
    res.status(200).json({ 
      ok: true, 
      mensagem: `Tarefas geradas com sucesso! Total: ${totalTarefas} tarefas para ${tarefasGeradas.length} combina√ß√µes cliente/obriga√ß√£o.`,
      totalTarefas,
      combinacoesProcessadas: tarefasGeradas.length,
      detalhes: tarefasGeradas
    });
  } catch (err) {
    console.error("Erro ao gerar tarefas em lote para grupo:", err);
    res.status(500).json({ erro: 'Erro ao gerar tarefas em lote para grupo' });
  }
});

module.exports = router;
