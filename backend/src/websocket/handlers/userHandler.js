const webSocketManager = require('../index');

class UserHandler {
  /**
   * 游릭 Notifica usu치rio online
   */
  static notifyUserOnline(userId, userData) {
    // Notifica todos os usu치rios da empresa
    webSocketManager.emitToRoom(`company:${userData.company_id}`, 'user:online', {
      type: 'user_online',
      user_id: userId,
      user: userData,
      timestamp: new Date().toISOString()
    });

    console.log(`游릭 Usu치rio ${userData.name} (ID: ${userId}) est치 online`);
  }

  /**
   * 游댮 Notifica usu치rio offline
   */
  static notifyUserOffline(userId, userData) {
    // Notifica todos os usu치rios da empresa
    webSocketManager.emitToRoom(`company:${userData.company_id}`, 'user:offline', {
      type: 'user_offline',
      user_id: userId,
      user: userData,
      timestamp: new Date().toISOString()
    });

    console.log(`游댮 Usu치rio ${userData.name} (ID: ${userId}) est치 offline`);
  }

  /**
   * 游논 Notifica usu치rio entrou em equipe
   */
  static notifyUserJoinedTeam(userId, teamId, userData) {
    webSocketManager.emitToRoom(`team:${teamId}`, 'user:joined_team', {
      type: 'user_joined_team',
      user_id: userId,
      team_id: teamId,
      user: userData,
      timestamp: new Date().toISOString()
    });

    console.log(`游논 Usu치rio ${userData.name} entrou na equipe ${teamId}`);
  }

  /**
   * 游뛁 Notifica usu치rio saiu de equipe
   */
  static notifyUserLeftTeam(userId, teamId, userData) {
    webSocketManager.emitToRoom(`team:${teamId}`, 'user:left_team', {
      type: 'user_left_team',
      user_id: userId,
      team_id: teamId,
      user: userData,
      timestamp: new Date().toISOString()
    });

    console.log(`游뛁 Usu치rio ${userData.name} saiu da equipe ${teamId}`);
  }

  /**
   * 游님 Notifica usu치rio digitando em conversa
   */
  static notifyUserTyping(userId, conversationId, userData) {
    webSocketManager.emitToRoom(`conversation:${conversationId}`, 'user:typing', {
      type: 'user_typing',
      user_id: userId,
      conversation_id: conversationId,
      user: userData,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * 游띔 Notifica usu치rio parou de digitar
   */
  static notifyUserStoppedTyping(userId, conversationId, userData) {
    webSocketManager.emitToRoom(`conversation:${conversationId}`, 'user:stopped_typing', {
      type: 'user_stopped_typing',
      user_id: userId,
      conversation_id: conversationId,
      user: userData,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * 游댒 Notifica usu치rio sobre nova atribui칞칚o
   */
  static notifyUserAssignment(userId, assignmentData) {
    webSocketManager.emitToUser(userId, 'user:assigned', {
      type: 'user_assigned',
      assignment: assignmentData,
      timestamp: new Date().toISOString()
    });

    console.log(`游댒 Usu치rio ${userId} notificado sobre nova atribui칞칚o`);
  }

  /**
   * 游늵 Notifica mudan칞a de status do usu치rio
   */
  static notifyUserStatusChange(userId, newStatus, companyId) {
    webSocketManager.emitToRoom(`company:${companyId}`, 'user:status_changed', {
      type: 'user_status_changed',
      user_id: userId,
      new_status: newStatus,
      timestamp: new Date().toISOString()
    });

    console.log(`游늵 Status do usu치rio ${userId} alterado para ${newStatus}`);
  }
}

module.exports = UserHandler;

