const cron = require('node-cron');
const automacaoRecorrencia = require('./automacaoRecorrencia');

class CronJobs {
  constructor() {
    this.jobs = new Map();
  }

  // üöÄ Inicializar todos os cron jobs
  init() {
    console.log('üïê Inicializando cron jobs...');
    
    // Verificar contratos todos os dias √†s 8h da manh√£
    this.scheduleContratosVerification();
    
    // Verificar contratos a cada 6 horas (backup)
    this.scheduleContratosBackup();
    
    console.log('‚úÖ Cron jobs inicializados com sucesso!');
  }

  // üìÖ Agendar verifica√ß√£o principal de contratos (di√°ria √†s 8h)
  scheduleContratosVerification() {
    const job = cron.schedule('0 8 * * *', async () => {
      console.log('üïê Executando verifica√ß√£o di√°ria de contratos...');
      try {
        const contratosProcessados = await automacaoRecorrencia.verificarContratosParaBoleto();
        console.log(`‚úÖ Verifica√ß√£o di√°ria conclu√≠da: ${contratosProcessados} contratos processados`);
      } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o di√°ria:', error);
      }
    }, {
      scheduled: true,
      timezone: "America/Sao_Paulo"
    });

    this.jobs.set('contratosVerification', job);
    console.log('üìÖ Verifica√ß√£o di√°ria de contratos agendada para 8h da manh√£');
  }

  // üîÑ Agendar verifica√ß√£o de backup (a cada 6 horas)
  scheduleContratosBackup() {
    const job = cron.schedule('0 */6 * * *', async () => {
      console.log('üïê Executando verifica√ß√£o de backup de contratos...');
      try {
        const contratosProcessados = await automacaoRecorrencia.verificarContratosParaBoleto();
        if (contratosProcessados > 0) {
          console.log(`‚úÖ Verifica√ß√£o de backup: ${contratosProcessados} contratos processados`);
        } else {
          console.log('‚úÖ Verifica√ß√£o de backup: nenhum contrato pendente');
        }
      } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o de backup:', error);
      }
    }, {
      scheduled: true,
      timezone: "America/Sao_Paulo"
    });

    this.jobs.set('contratosBackup', job);
    console.log('üîÑ Verifica√ß√£o de backup agendada a cada 6 horas');
  }

  // üõë Parar todos os cron jobs
  stop() {
    console.log('üõë Parando todos os cron jobs...');
    this.jobs.forEach((job, name) => {
      job.stop();
      console.log(`üõë Cron job "${name}" parado`);
    });
    this.jobs.clear();
  }

  // üìä Status dos cron jobs
  getStatus() {
    const status = {};
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        nextDate: job.nextDate(),
        lastDate: job.lastDate()
      };
    });
    return status;
  }

  // ‚ñ∂Ô∏è Executar verifica√ß√£o manual
  async executarVerificacaoManual() {
    console.log('üöÄ Executando verifica√ß√£o manual...');
    try {
      const contratosProcessados = await automacaoRecorrencia.verificarContratosParaBoleto();
      console.log(`‚úÖ Verifica√ß√£o manual conclu√≠da: ${contratosProcessados} contratos processados`);
      return contratosProcessados;
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o manual:', error);
      throw error;
    }
  }
}

// Criar inst√¢ncia singleton
const cronJobs = new CronJobs();

module.exports = cronJobs; 