const axios = require("axios");

// üóùÔ∏è Vari√°veis Pluggy
const clientId = process.env.PLUGGY_CLIENT_ID;
const clientSecret = process.env.PLUGGY_CLIENT_SECRET;

// üîê Cache da API KEY Pluggy
let pluggyApiKey = null;
let pluggyApiKeyExpiresAt = null;

// üîë Fun√ß√£o para gerar e cachear a API KEY
async function getPluggyApiKey() {
  const now = new Date();
  if (pluggyApiKey && pluggyApiKeyExpiresAt > now) {
    console.log("[Pluggy] Usando API KEY em cache");
    return pluggyApiKey;
  }

  console.log("[Pluggy] Gerando nova API KEY");
  const { data } = await axios.post("https://api.pluggy.ai/auth", { clientId, clientSecret });

  pluggyApiKey = data.apiKey;
  pluggyApiKeyExpiresAt = new Date(now.getTime() + 23 * 60 * 60 * 1000);
  console.log("[Pluggy] Nova API KEY gerada");
  return pluggyApiKey;
}

// üîë Fun√ß√£o para for√ßar gera√ß√£o de nova API KEY (sem cache)
async function forceNewPluggyApiKey() {
  console.log("[Pluggy] For√ßando gera√ß√£o de nova API KEY");
  const { data } = await axios.post("https://api.pluggy.ai/auth", { clientId, clientSecret });
  
  // Atualizar cache
  pluggyApiKey = data.apiKey;
  pluggyApiKeyExpiresAt = new Date(new Date().getTime() + 23 * 60 * 60 * 1000);
  
  console.log("[Pluggy] Nova API KEY for√ßada gerada");
  return pluggyApiKey;
}

// üîÑ Fun√ß√£o para fazer requisi√ß√£o com retry autom√°tico
async function makePluggyRequest(url, options = {}) {
  let attempts = 0;
  const maxAttempts = 2;

  while (attempts < maxAttempts) {
    try {
      attempts++;
      console.log(`[Pluggy] Tentativa ${attempts} de ${maxAttempts}`);
      
      const apiKey = await getPluggyApiKey();
      console.log(`[Pluggy] API KEY utilizada: ${apiKey.substring(0, 10)}...`);
      
      const response = await axios.get(url, {
        headers: { "X-API-KEY": apiKey, ...options.headers },
        ...options
      });
      
      console.log(`[Pluggy] Requisi√ß√£o bem-sucedida na tentativa ${attempts}`);
      return response;
      
    } catch (error) {
      console.error(`[Pluggy] Erro na tentativa ${attempts}:`, error?.response?.data || error.message);
      
      // Se for erro 403 (token inv√°lido) e n√£o for a √∫ltima tentativa
      if (error?.response?.status === 403 && attempts < maxAttempts) {
        console.log("[Pluggy] Token inv√°lido detectado, for√ßando nova gera√ß√£o...");
        
        // For√ßar nova gera√ß√£o de token
        await forceNewPluggyApiKey();
        
        // Aguardar um pouco antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 1000));
        continue;
      }
      
      // Se chegou aqui, √© o √∫ltimo erro ou n√£o √© erro 403
      throw error;
    }
  }
}

// üîÑ Fun√ß√£o para fazer requisi√ß√£o POST com retry autom√°tico
async function makePluggyPostRequest(url, data, options = {}) {
  let attempts = 0;
  const maxAttempts = 2;

  while (attempts < maxAttempts) {
    try {
      attempts++;
      console.log(`[Pluggy] Tentativa ${attempts} de ${maxAttempts} (POST)`);
      
      const apiKey = await getPluggyApiKey();
      console.log(`[Pluggy] API KEY utilizada: ${apiKey.substring(0, 10)}...`);
      
      const response = await axios.post(url, data, {
        headers: { "X-API-KEY": apiKey, ...options.headers },
        ...options
      });
      
      console.log(`[Pluggy] Requisi√ß√£o POST bem-sucedida na tentativa ${attempts}`);
      return response;
      
    } catch (error) {
      console.error(`[Pluggy] Erro na tentativa ${attempts} (POST):`, error?.response?.data || error.message);
      
      // Se for erro 403 (token inv√°lido) e n√£o for a √∫ltima tentativa
      if (error?.response?.status === 403 && attempts < maxAttempts) {
        console.log("[Pluggy] Token inv√°lido detectado, for√ßando nova gera√ß√£o...");
        
        // For√ßar nova gera√ß√£o de token
        await forceNewPluggyApiKey();
        
        // Aguardar um pouco antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 1000));
        continue;
      }
      
      // Se chegou aqui, √© o √∫ltimo erro ou n√£o √© erro 403
      throw error;
    }
  }
}

// üîÑ Fun√ß√£o para fazer requisi√ß√£o PUT com retry autom√°tico
async function makePluggyPutRequest(url, data, options = {}) {
  let attempts = 0;
  const maxAttempts = 2;

  while (attempts < maxAttempts) {
    try {
      attempts++;
      console.log(`[Pluggy] Tentativa ${attempts} de ${maxAttempts} (PUT)`);
      
      const apiKey = await getPluggyApiKey();
      console.log(`[Pluggy] API KEY utilizada: ${apiKey.substring(0, 10)}...`);
      
      const response = await axios.put(url, data, {
        headers: { "X-API-KEY": apiKey, ...options.headers },
        ...options
      });
      
      console.log(`[Pluggy] Requisi√ß√£o PUT bem-sucedida na tentativa ${attempts}`);
      return response;
      
    } catch (error) {
      console.error(`[Pluggy] Erro na tentativa ${attempts} (PUT):`, error?.response?.data || error.message);
      
      // Se for erro 403 (token inv√°lido) e n√£o for a √∫ltima tentativa
      if (error?.response?.status === 403 && attempts < maxAttempts) {
        console.log("[Pluggy] Token inv√°lido detectado, for√ßando nova gera√ß√£o...");
        
        // For√ßar nova gera√ß√£o de token
        await forceNewPluggyApiKey();
        
        // Aguardar um pouco antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 1000));
        continue;
      }
      
      // Se chegou aqui, √© o √∫ltimo erro ou n√£o √© erro 403
      throw error;
    }
  }
}

module.exports = {
  getPluggyApiKey,
  forceNewPluggyApiKey,
  makePluggyRequest,
  makePluggyPostRequest,
  makePluggyPutRequest
}; 